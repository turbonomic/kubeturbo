package turboaction

import (
	"time"

	"k8s.io/kubernetes/pkg/types"
)

const (
	Pending TurboActionStatus = "pending"
	Executed TurboActionStatus = "executed"
	Success TurboActionStatus = "success"
	Fail TurboActionStatus = "fail"

	TypePod                   string = "Pod"
	TypeReplicationController string = "ReplicationController"
	TypeReplicaSet            string = "ReplicaSet"
	TypeDeployment            string = "Deployment"
)

// TypeMeta describes an individual object in an API response or request
// with strings representing the type of the object and its API schema version.
// Structures that are versioned or persisted should inline TypeMeta.
type TypeMeta struct {
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	Kind string `json:"kind,omitempty"`

	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	APIVersion string `json:"apiVersion,omitempty"`
}

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
type ObjectMeta struct {
	// Name is unique within a namespace.  Name is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	Name string `json:"name,omitempty"`

	// GenerateName indicates that the name should be made unique by the server prior to persisting
	// it. A non-empty value for the field indicates the name will be made unique (and the name
	// returned to the client will be different than the name passed). The value of this field will
	// be combined with a unique suffix on the server if the Name field has not been provided.
	// The provided value must be valid within the rules for Name, and may be truncated by the length
	// of the suffix required to make the value unique on the server.
	//
	// If this field is specified, and Name is not present, the server will NOT return a 409 if the
	// generated name exists - instead, it will either return 201 Created or 500 with Reason
	// ServerTimeout indicating a unique name could not be found in the time allotted, and the client
	// should retry (optionally after the time indicated in the Retry-After header).
	GenerateName string `json:"generateName,omitempty"`

	// Namespace defines the space within which name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	Namespace string `json:"namespace,omitempty"`

	// SelfLink is a URL representing this object.
	SelfLink string `json:"selfLink,omitempty"`

	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	UID types.UID `json:"uid,omitempty"`

	// An opaque value that represents the version of this resource. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and values may only be valid for a particular
	// resource or set of resources. Only servers will generate resource versions.
	ResourceVersion string `json:"resourceVersion,omitempty"`

	// A sequence number representing a specific generation of the desired state.
	// Currently only implemented by replication controllers.
	Generation int64 `json:"generation,omitempty"`

	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	CreationTimestamp time.Time `json:"creationTimestamp,omitempty"`

	// DeletionTimestamp is the time after which this resource will be deleted. This
	// field is set by the server when a graceful deletion is requested by the user, and is not
	// directly settable by a client. The resource will be deleted (no longer visible from
	// resource lists, and not reachable by name) after the time in this field. Once set, this
	// value may not be unset or be set further into the future, although it may be shortened
	// or the resource may be deleted prior to this time. For example, a user may request that
	// a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination
	// signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet
	// will send a hard termination signal to the container.
	DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

	// Labels are key value pairs that may be used to scope and select individual resources.
	// Label keys are of the form:
	//     label-key ::= prefixed-name | name
	//     prefixed-name ::= prefix '/' name
	//     prefix ::= DNS_SUBDOMAIN
	//     name ::= DNS_LABEL
	// The prefix is optional.  If the prefix is not specified, the key is assumed to be private
	// to the user.  Other system components that wish to use labels must specify a prefix.  The
	// "kubernetes.io/" prefix is reserved for use by kubernetes components.
	// TODO: replace map[string]string with labels.LabelSet type
	Labels map[string]string `json:"labels,omitempty"`

	// Annotations are unstructured key value data stored with a resource that may be set by
	// external tooling. They are not queryable and should be preserved when modifying
	// objects.  Annotation keys have the same formatting restrictions as Label keys. See the
	// comments on Labels for details.
	Annotations map[string]string `json:"annotations,omitempty"`
}

type TurboActionStatus string

// VMTEvent defines all kinds of events those related to VMT service.
type TurboAction struct {
	TypeMeta   `json:",inline"`
	ObjectMeta `json:"metadata,omitempty"`

	Content        TurboActionContent `json:"content,omitempty"`

	Status         TurboActionStatus `json:"status,omitempty"`

	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp time.Time `json:"firstTimestamp,omitempty"`

	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp  time.Time `json:"lastTimestamp,omitempty"`
}

type TurboActionContent struct {
	// The type of the action
	ActionType string `json:"actionType,omitempty"`

	// target object is the object we get from vmtevent. For example, move pod p1, then target object the pod to be moved.
	TargetObject    TargetObject `json:"targetObject,omitempty"`

	// parent object is the object who owns the target object. For example, if move pod p1, then the replication controller rc1 is the
	// object responsible to create a new pod after p1 is killed.
	ParentObjectRef ParentObjectRef `json:"parentObject,omitempty"`

	// Action related specfication.
	ActionSpec      ActionSpec `json:"actionSpec,omitempty"`

	// This field to store the messageID of the incoming server request.
	// The same message ID should be used to create a valid response.
	ActionMessageID int `json:"messageId,omitempty"`
}

type MoveSpec struct {
	// the origin of the move action. Should be the name of the original node.
	Source string `json:"source,omitempty"`

	// the destination of the move action. Should be the name of the new node.
	Destination string `json:"destination,omitempty"`

	// the identifier of new entity created after move.
	NewObjectName string `json:"newObjectName,omitempty`
}

type ScaleSpec struct {
	// the origin of the move action. Should be the name of the original node.
	OriginalReplicas int32 `json:"originalReplicas,omitempty"`

	// the destination of the move action. Should be the name of the new node.
	NewReplicas int32 `json:"newReplicas,omitempty"`
}

type TargetObject struct {
	TargetObjectName string `json:"targetObjectName,omitempty"`
	TargetObjectType string `json:"targetObjectType,omitempty"`
}

// the parent object related to the move targetSE. For example, when move, a replication controller or deployment
// is related the pod to be moved and create a new pod after the original pod get deleted.
type ParentObjectRef struct {
	ParentObjectName string `json:"parentObjectName,omitempty"`
	ParentObjectType string `json:"parentObjectType,omitempty"`
}

// ListMeta describes metadata that synthetic resources must have, including lists and
// various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// SelfLink is a URL representing this object.
	SelfLink string `json:"selfLink,omitempty"`

	// An opaque value that represents the version of this response for use with optimistic
	// concurrency and change monitoring endpoints.  Clients must treat these values as opaque
	// and values may only be valid for a particular resource or set of resources. Only servers
	// will generate resource versions.
	ResourceVersion string `json:"resourceVersion,omitempty"`
}

// VMTEventList is a list of vmt events.
type VMTEventList struct {
	TypeMeta `json:",inline"`
	ListMeta `json:"metadata,omitempty"`

	Items []TurboAction `json:"items"`
}

func (MoveSpec) IsActionSpec()  {}
func (ScaleSpec) IsActionSpec() {}
