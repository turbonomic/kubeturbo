package turboaction

import (
	k8sapi "k8s.io/client-go/pkg/api/v1"
	"time"
)

const (
	Pending  TurboActionStatus = "pending"
	Executed TurboActionStatus = "executed"
	Success  TurboActionStatus = "success"
	Fail     TurboActionStatus = "fail"

	TypePod                   string = "Pod"
	TypeReplicationController string = "ReplicationController"
	TypeReplicaSet            string = "ReplicaSet"
	TypeDeployment            string = "Deployment"

	ActionProvision       TurboActionType = "provision"
	ActionMove            TurboActionType = "move"
	ActionUnbind          TurboActionType = "unbind"
	ActionContainerResize TurboActionType = "resizeContainer"
)

// TypeMeta describes an individual object in an API response or request
// with strings representing the type of the object and its API schema version.
// Structures that are versioned or persisted should inline TypeMeta.
type TypeMeta struct {
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	Kind string `json:"kind,omitempty"`

	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	APIVersion string `json:"apiVersion,omitempty"`
}

type UID string

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
type ObjectMeta struct {
	// Name is unique within a namespace.  Name is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	Name string `json:"name,omitempty"`

	// Namespace defines the space within which name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	Namespace string `json:"namespace,omitempty"`

	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	UID UID `json:"uid,omitempty"`
}

type TurboActionStatus string

// TurboAction defines all kinds of actions generated from Turbonomic Automatic Platform.
type TurboAction struct {
	TypeMeta   `json:",inline"`
	ObjectMeta `json:"metadata,omitempty"`

	Content TurboActionContent `json:"content,omitempty"`

	Status TurboActionStatus `json:"status,omitempty"`

	// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
	FirstTimestamp time.Time `json:"firstTimestamp,omitempty"`

	// The time at which the most recent occurrence of this event was recorded.
	LastTimestamp time.Time `json:"lastTimestamp,omitempty"`
}

type TurboActionType string

type TurboActionContent struct {
	// The type of the action
	ActionType TurboActionType `json:"actionType,omitempty"`

	// target object is the object we get from turbo action.
	// For example, move pod p1, then target object the pod to be moved.
	TargetObject TargetObject `json:"targetObject,omitempty"`

	// parent object is the object who owns the target object.
	// For example, if move pod Foo, then the replication controller Foo_RC is the object that is responsible to
	// create a new pod after Foo is killed.
	ParentObjectRef ParentObjectRef `json:"parentObject,omitempty"`

	// Action related specification.
	ActionSpec ActionSpec `json:"actionSpec,omitempty"`
}

type MoveSpec struct {
	// the origin of the move action. Should be the name of the original node.
	Source string `json:"source,omitempty"`

	// the destination of the move action. Should be the name of the new node.
	Destination string `json:"destination,omitempty"`

	// the identifier of new entity created after move.
	NewObjectNamespace string `json:"newObjectNamespace,omitempty"`
	NewObjectName      string `json:"newObjectName,omitempty"`
}

type ScaleSpec struct {
	// the origin number of replicas
	OriginalReplicas int32 `json:"originalReplicas,omitempty"`

	// the requested number of replicas
	NewReplicas int32 `json:"newReplicas,omitempty"`
}

type ContainerResizeSpec struct {
	// the new capacity of the resources
	NewCapacity k8sapi.ResourceList

	// index of Pod's containers
	Index int
}

type TargetObject struct {
	TargetObjectUID       string `json:"targetObjectUID,omitempty"`
	TargetObjectNamespace string `json:"targetObjectNamespace,omitempty"`
	TargetObjectName      string `json:"targetObjectName,omitempty"`
	TargetObjectType      string `json:"targetObjectType,omitempty"`
}

// the parent object related to the move targetSE. For example, when move, a replication controller or deployment
// is related the pod to be moved and create a new pod after the original pod get deleted.
type ParentObjectRef struct {
	ParentObjectUID       string `json:"parentObjectUID,omitempty"`
	ParentObjectNamespace string `json:"parentObjectNamespace,omitempty"`
	ParentObjectName      string `json:"parentObjectName,omitempty"`
	ParentObjectType      string `json:"parentObjectType,omitempty"`
}

func (MoveSpec) IsActionSpec()            {}
func (ScaleSpec) IsActionSpec()           {}
func (ContainerResizeSpec) IsActionSpec() {}
