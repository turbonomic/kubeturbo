// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ProfileDTO.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EntityProfileDTO_VMProfileDTO_VMTier int32

const (
	// Basic VM tier: VMs can't participate in Azure Load Balancers
	EntityProfileDTO_VMProfileDTO_BASIC EntityProfileDTO_VMProfileDTO_VMTier = 1
	// Standard VM tier: VMs can be part of Azure Load Balancers backend pools
	EntityProfileDTO_VMProfileDTO_STANDARD EntityProfileDTO_VMProfileDTO_VMTier = 2
)

// Enum value maps for EntityProfileDTO_VMProfileDTO_VMTier.
var (
	EntityProfileDTO_VMProfileDTO_VMTier_name = map[int32]string{
		1: "BASIC",
		2: "STANDARD",
	}
	EntityProfileDTO_VMProfileDTO_VMTier_value = map[string]int32{
		"BASIC":    1,
		"STANDARD": 2,
	}
)

func (x EntityProfileDTO_VMProfileDTO_VMTier) Enum() *EntityProfileDTO_VMProfileDTO_VMTier {
	p := new(EntityProfileDTO_VMProfileDTO_VMTier)
	*p = x
	return p
}

func (x EntityProfileDTO_VMProfileDTO_VMTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityProfileDTO_VMProfileDTO_VMTier) Descriptor() protoreflect.EnumDescriptor {
	return file_ProfileDTO_proto_enumTypes[0].Descriptor()
}

func (EntityProfileDTO_VMProfileDTO_VMTier) Type() protoreflect.EnumType {
	return &file_ProfileDTO_proto_enumTypes[0]
}

func (x EntityProfileDTO_VMProfileDTO_VMTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityProfileDTO_VMProfileDTO_VMTier) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityProfileDTO_VMProfileDTO_VMTier(num)
	return nil
}

// Deprecated: Use EntityProfileDTO_VMProfileDTO_VMTier.Descriptor instead.
func (EntityProfileDTO_VMProfileDTO_VMTier) EnumDescriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 1, 0}
}

// AWS VM tenancy types
type EntityProfileDTO_VMProfileDTO_TenancyType int32

const (
	EntityProfileDTO_VMProfileDTO_SHARED    EntityProfileDTO_VMProfileDTO_TenancyType = 1
	EntityProfileDTO_VMProfileDTO_DEDICATED EntityProfileDTO_VMProfileDTO_TenancyType = 2
	EntityProfileDTO_VMProfileDTO_HOST      EntityProfileDTO_VMProfileDTO_TenancyType = 3
)

// Enum value maps for EntityProfileDTO_VMProfileDTO_TenancyType.
var (
	EntityProfileDTO_VMProfileDTO_TenancyType_name = map[int32]string{
		1: "SHARED",
		2: "DEDICATED",
		3: "HOST",
	}
	EntityProfileDTO_VMProfileDTO_TenancyType_value = map[string]int32{
		"SHARED":    1,
		"DEDICATED": 2,
		"HOST":      3,
	}
)

func (x EntityProfileDTO_VMProfileDTO_TenancyType) Enum() *EntityProfileDTO_VMProfileDTO_TenancyType {
	p := new(EntityProfileDTO_VMProfileDTO_TenancyType)
	*p = x
	return p
}

func (x EntityProfileDTO_VMProfileDTO_TenancyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityProfileDTO_VMProfileDTO_TenancyType) Descriptor() protoreflect.EnumDescriptor {
	return file_ProfileDTO_proto_enumTypes[1].Descriptor()
}

func (EntityProfileDTO_VMProfileDTO_TenancyType) Type() protoreflect.EnumType {
	return &file_ProfileDTO_proto_enumTypes[1]
}

func (x EntityProfileDTO_VMProfileDTO_TenancyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityProfileDTO_VMProfileDTO_TenancyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityProfileDTO_VMProfileDTO_TenancyType(num)
	return nil
}

// Deprecated: Use EntityProfileDTO_VMProfileDTO_TenancyType.Descriptor instead.
func (EntityProfileDTO_VMProfileDTO_TenancyType) EnumDescriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 1, 1}
}

// This file lists all the objects related to Service Entity profiles
// created by user in environment or in VMTurbo
type EntityProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the entity profile.  This should allow access to the object
	// in the system it was discovered from and it should be unique in VMT also.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// display name to be displayed to the user
	DisplayName *string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	// Type of entity this profile applies to
	EntityType *EntityDTO_EntityType `protobuf:"varint,3,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// The profile should contain multiple related commodity profiles for example
	// profile for MEM, CPU, VSTORAGE...
	CommodityProfile []*CommodityProfileDTO `protobuf:"bytes,4,rep,name=commodityProfile" json:"commodityProfile,omitempty"`
	// Model related to the profile
	Model *string `protobuf:"bytes,5,opt,name=model" json:"model,omitempty"`
	// Vendor related to the profile
	Vendor *string `protobuf:"bytes,6,opt,name=vendor" json:"vendor,omitempty"`
	// Description of the profile
	Description *string `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	// If this is a profile for VMs, vmProfileDTO must be specified
	// If this is a profile for PMs, pmProfileDTO must be specified
	// If this is a profile for DBs or DBInstances, dbProfileDTO must be specified
	//
	// Types that are assignable to EntityTypeSpecificData:
	//	*EntityProfileDTO_VmProfileDTO
	//	*EntityProfileDTO_PmProfileDTO
	//	*EntityProfileDTO_DbProfileDTO
	EntityTypeSpecificData isEntityProfileDTO_EntityTypeSpecificData `protobuf_oneof:"EntityTypeSpecificData"`
	// This flag indicates where existing entities can be matched against this profile
	EnableProvisionMatch *bool `protobuf:"varint,10,opt,name=enableProvisionMatch" json:"enableProvisionMatch,omitempty"`
	// This flag indicates whether a resize action may use this profile to resize to
	EnableResizeMatch *bool `protobuf:"varint,11,opt,name=enableResizeMatch" json:"enableResizeMatch,omitempty"`
	// Allow entity properties to be specified related to the entity profile dto.
	// Entity properties are a list of <string, string, string> namespace, key, value triplets
	EntityProperties []*EntityDTO_EntityProperty `protobuf:"bytes,12,rep,name=entityProperties" json:"entityProperties,omitempty"`
	// Whether the profile is being created/updated or removed
	UpdateType *UpdateType `protobuf:"varint,14,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
}

// Default values for EntityProfileDTO fields.
const (
	Default_EntityProfileDTO_UpdateType = UpdateType_UPDATED
)

func (x *EntityProfileDTO) Reset() {
	*x = EntityProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProfileDTO) ProtoMessage() {}

func (x *EntityProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProfileDTO.ProtoReflect.Descriptor instead.
func (*EntityProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0}
}

func (x *EntityProfileDTO) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityProfileDTO) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityProfileDTO) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *EntityProfileDTO) GetCommodityProfile() []*CommodityProfileDTO {
	if x != nil {
		return x.CommodityProfile
	}
	return nil
}

func (x *EntityProfileDTO) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *EntityProfileDTO) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *EntityProfileDTO) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (m *EntityProfileDTO) GetEntityTypeSpecificData() isEntityProfileDTO_EntityTypeSpecificData {
	if m != nil {
		return m.EntityTypeSpecificData
	}
	return nil
}

func (x *EntityProfileDTO) GetVmProfileDTO() *EntityProfileDTO_VMProfileDTO {
	if x, ok := x.GetEntityTypeSpecificData().(*EntityProfileDTO_VmProfileDTO); ok {
		return x.VmProfileDTO
	}
	return nil
}

func (x *EntityProfileDTO) GetPmProfileDTO() *EntityProfileDTO_PMProfileDTO {
	if x, ok := x.GetEntityTypeSpecificData().(*EntityProfileDTO_PmProfileDTO); ok {
		return x.PmProfileDTO
	}
	return nil
}

func (x *EntityProfileDTO) GetDbProfileDTO() *EntityProfileDTO_DBProfileDTO {
	if x, ok := x.GetEntityTypeSpecificData().(*EntityProfileDTO_DbProfileDTO); ok {
		return x.DbProfileDTO
	}
	return nil
}

func (x *EntityProfileDTO) GetEnableProvisionMatch() bool {
	if x != nil && x.EnableProvisionMatch != nil {
		return *x.EnableProvisionMatch
	}
	return false
}

func (x *EntityProfileDTO) GetEnableResizeMatch() bool {
	if x != nil && x.EnableResizeMatch != nil {
		return *x.EnableResizeMatch
	}
	return false
}

func (x *EntityProfileDTO) GetEntityProperties() []*EntityDTO_EntityProperty {
	if x != nil {
		return x.EntityProperties
	}
	return nil
}

func (x *EntityProfileDTO) GetUpdateType() UpdateType {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return Default_EntityProfileDTO_UpdateType
}

type isEntityProfileDTO_EntityTypeSpecificData interface {
	isEntityProfileDTO_EntityTypeSpecificData()
}

type EntityProfileDTO_VmProfileDTO struct {
	VmProfileDTO *EntityProfileDTO_VMProfileDTO `protobuf:"bytes,8,opt,name=vmProfileDTO,oneof"`
}

type EntityProfileDTO_PmProfileDTO struct {
	PmProfileDTO *EntityProfileDTO_PMProfileDTO `protobuf:"bytes,9,opt,name=pmProfileDTO,oneof"`
}

type EntityProfileDTO_DbProfileDTO struct {
	DbProfileDTO *EntityProfileDTO_DBProfileDTO `protobuf:"bytes,13,opt,name=dbProfileDTO,oneof"`
}

func (*EntityProfileDTO_VmProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

func (*EntityProfileDTO_PmProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

func (*EntityProfileDTO_DbProfileDTO) isEntityProfileDTO_EntityTypeSpecificData() {}

// Data related to a commodity profile used in an entity profile
// Note typically only a subset of these fields may be specified in a profile for
// each commmodity.
type CommodityProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of commodity such as MEM, CPU, STORAGE
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
	// The capacity of the commodity
	Capacity *float32 `protobuf:"fixed32,2,opt,name=capacity" json:"capacity,omitempty"`
	// Consumed factor may be used to calculate consumed based on capacity
	ConsumedFactor *float32 `protobuf:"fixed32,3,opt,name=consumedFactor" json:"consumedFactor,omitempty"`
	// Consumed value to be used in the profile
	Consumed *float32 `protobuf:"fixed32,4,opt,name=consumed" json:"consumed,omitempty"`
	// A reservation related to this commodity
	Reservation *float32 `protobuf:"fixed32,5,opt,name=reservation" json:"reservation,omitempty"`
	// Overhead related to this commodity - for example overheadMem
	Overhead *float32 `protobuf:"fixed32,6,opt,name=overhead" json:"overhead,omitempty"`
}

func (x *CommodityProfileDTO) Reset() {
	*x = CommodityProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommodityProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityProfileDTO) ProtoMessage() {}

func (x *CommodityProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityProfileDTO.ProtoReflect.Descriptor instead.
func (*CommodityProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{1}
}

func (x *CommodityProfileDTO) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *CommodityProfileDTO) GetCapacity() float32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *CommodityProfileDTO) GetConsumedFactor() float32 {
	if x != nil && x.ConsumedFactor != nil {
		return *x.ConsumedFactor
	}
	return 0
}

func (x *CommodityProfileDTO) GetConsumed() float32 {
	if x != nil && x.Consumed != nil {
		return *x.Consumed
	}
	return 0
}

func (x *CommodityProfileDTO) GetReservation() float32 {
	if x != nil && x.Reservation != nil {
		return *x.Reservation
	}
	return 0
}

func (x *CommodityProfileDTO) GetOverhead() float32 {
	if x != nil && x.Overhead != nil {
		return *x.Overhead
	}
	return 0
}

// This represents a deployment profile (service catalog item) which is related
// to a service entity profile (template)
// This DTO ties image information with scope and a profile to allow for
// the deployment of an entity related to a profile
type DeploymentProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id related to this.  This may be an id from the system where this was discovered
	// it must be unique in VMTurbo
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Display name for the deployment profile
	ProfileName *string `protobuf:"bytes,2,opt,name=profileName" json:"profileName,omitempty"`
	// Context data needed to actually invoke deploy - such as URIs
	ContextData []*ContextData `protobuf:"bytes,3,rep,name=contextData" json:"contextData,omitempty"`
	// related service entity profiles (templates)
	RelatedEntityProfileId []string `protobuf:"bytes,4,rep,name=relatedEntityProfileId" json:"relatedEntityProfileId,omitempty"`
	// scopes in which this can be used for example cluster, network
	RelatedScopeId []string `protobuf:"bytes,5,rep,name=relatedScopeId" json:"relatedScopeId,omitempty"`
	// accessible scopes in which this can be used for example clusters
	// this id allows for a set of clusters, where the relatedScopeId would typically
	// only allow for 1 cluster or data center.  This is treated as an OR of scopes
	AccessibleScopeId []string `protobuf:"bytes,6,rep,name=accessibleScopeId" json:"accessibleScopeId,omitempty"`
	// Whether the profile is being created/updated or removed
	UpdateType *UpdateType `protobuf:"varint,7,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
}

// Default values for DeploymentProfileDTO fields.
const (
	Default_DeploymentProfileDTO_UpdateType = UpdateType_UPDATED
)

func (x *DeploymentProfileDTO) Reset() {
	*x = DeploymentProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentProfileDTO) ProtoMessage() {}

func (x *DeploymentProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentProfileDTO.ProtoReflect.Descriptor instead.
func (*DeploymentProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{2}
}

func (x *DeploymentProfileDTO) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DeploymentProfileDTO) GetProfileName() string {
	if x != nil && x.ProfileName != nil {
		return *x.ProfileName
	}
	return ""
}

func (x *DeploymentProfileDTO) GetContextData() []*ContextData {
	if x != nil {
		return x.ContextData
	}
	return nil
}

func (x *DeploymentProfileDTO) GetRelatedEntityProfileId() []string {
	if x != nil {
		return x.RelatedEntityProfileId
	}
	return nil
}

func (x *DeploymentProfileDTO) GetRelatedScopeId() []string {
	if x != nil {
		return x.RelatedScopeId
	}
	return nil
}

func (x *DeploymentProfileDTO) GetAccessibleScopeId() []string {
	if x != nil {
		return x.AccessibleScopeId
	}
	return nil
}

func (x *DeploymentProfileDTO) GetUpdateType() UpdateType {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return Default_DeploymentProfileDTO_UpdateType
}

// define a multimap between region name and available license name in each region.
type EntityProfileDTO_LicenseMapEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region      *string  `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	LicenseName []string `protobuf:"bytes,2,rep,name=licenseName" json:"licenseName,omitempty"`
}

func (x *EntityProfileDTO_LicenseMapEntry) Reset() {
	*x = EntityProfileDTO_LicenseMapEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProfileDTO_LicenseMapEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProfileDTO_LicenseMapEntry) ProtoMessage() {}

func (x *EntityProfileDTO_LicenseMapEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProfileDTO_LicenseMapEntry.ProtoReflect.Descriptor instead.
func (*EntityProfileDTO_LicenseMapEntry) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EntityProfileDTO_LicenseMapEntry) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *EntityProfileDTO_LicenseMapEntry) GetLicenseName() []string {
	if x != nil {
		return x.LicenseName
	}
	return nil
}

// Specific data related to a vm profile
type EntityProfileDTO_VMProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// At least one of numVCPUs and vCPUSpeed should be specified.
	// One of the two can be derived from the other using the capacity
	// from the commodityDTO
	// number of VCPUs
	NumVCPUs *int32 `protobuf:"varint,1,opt,name=numVCPUs" json:"numVCPUs,omitempty"`
	// VCPU speed
	VCPUSpeed *float32 `protobuf:"fixed32,2,opt,name=vCPUSpeed" json:"vCPUSpeed,omitempty"`
	// Number of storage entities that this VM will use storage from
	NumStorageConsumed *int32 `protobuf:"varint,3,opt,name=numStorageConsumed" json:"numStorageConsumed,omitempty"`
	// Disk type related to the VM
	DiskType *string `protobuf:"bytes,4,opt,name=diskType" json:"diskType,omitempty"`
	// An identifier for matching profiles that belong to the same family.
	//
	// Deprecated: Do not use.
	Family *string `protobuf:"bytes,5,opt,name=family" json:"family,omitempty"`
	// A quantitative way to compare different instance types in a family.
	NumberOfCoupons *int32 `protobuf:"varint,6,opt,name=numberOfCoupons" json:"numberOfCoupons,omitempty"`
	// Specifies the dedicated storage configuration state for the VM profile
	DedicatedStorageNetworkState *EntityDTO_ComputeTierData_DedicatedStorageNetworkState `protobuf:"varint,7,opt,name=dedicatedStorageNetworkState,enum=common_dto.EntityDTO_ComputeTierData_DedicatedStorageNetworkState" json:"dedicatedStorageNetworkState,omitempty"`
	License                      []*EntityProfileDTO_LicenseMapEntry                     `protobuf:"bytes,8,rep,name=license" json:"license,omitempty"`
	// UUID of the entity from which this entity is cloned.
	// Required for EBS enabled profiles on AWS.
	ClonedUuid *string `protobuf:"bytes,9,opt,name=clonedUuid" json:"clonedUuid,omitempty"`
	// The VM tier. Currently required for Azure.
	VmTier           *EntityProfileDTO_VMProfileDTO_VMTier `protobuf:"varint,10,opt,name=vmTier,enum=common_dto.EntityProfileDTO_VMProfileDTO_VMTier" json:"vmTier,omitempty"`
	InstanceDiskType *EntityDTO_InstanceDiskType           `protobuf:"varint,11,opt,name=instanceDiskType,enum=common_dto.EntityDTO_InstanceDiskType" json:"instanceDiskType,omitempty"`
	InstanceDiskSize *int32                                `protobuf:"varint,12,opt,name=instanceDiskSize" json:"instanceDiskSize,omitempty"`
	// Show if it supports AWS encrypted volumes
	SupportEncryptedVolume *bool `protobuf:"varint,13,opt,name=supportEncryptedVolume" json:"supportEncryptedVolume,omitempty"`
	// Template providers are created on the platform side, so on the probe side we can only
	// find out a key for template family commodity and then use it for creating of commodity.
	TemplateFamilyCommodityKey *string `protobuf:"bytes,14,opt,name=templateFamilyCommodityKey" json:"templateFamilyCommodityKey,omitempty"`
	NumCloudComputeUnit        *int32  `protobuf:"varint,15,opt,name=numCloudComputeUnit" json:"numCloudComputeUnit,omitempty"`
	// instanceSizeFamily is the group that comprises of profiles of varying sizes that fit a
	// particular use case. Instance size flexible Reserved Instances can be applied to entities
	// using any profile within an instanceSizeFamily.
	InstanceSizeFamily *string `protobuf:"bytes,16,opt,name=instanceSizeFamily" json:"instanceSizeFamily,omitempty"`
	// An optional list of tenancy types supported by the VM profile
	Tenancy []EntityProfileDTO_VMProfileDTO_TenancyType `protobuf:"varint,17,rep,name=tenancy,enum=common_dto.EntityProfileDTO_VMProfileDTO_TenancyType" json:"tenancy,omitempty"`
	// quotaFamily is the group that comprises of profiles that count towards the usage limit for
	// a defined category imposed on a Business Account.
	QuotaFamily *string `protobuf:"bytes,18,opt,name=quotaFamily" json:"quotaFamily,omitempty"`
	// DEPRECATED: Use newer 'instanceDiskCounts' instead.
	// number of instance store disks supported by the EC2 template
	//
	// Deprecated: Do not use.
	NumInstanceDisks *int32 `protobuf:"varint,19,opt,name=numInstanceDisks" json:"numInstanceDisks,omitempty"`
	// property to determine if this VMProfile supports burstable CPUs.
	BurstableCPU *bool `protobuf:"varint,20,opt,name=burstableCPU" json:"burstableCPU,omitempty"`
	// Possible disk counts supported for compute tier. Normally single value like 8
	// but others like GCP support multiple options like: 2, 4, 8, 16, or 24
	InstanceDiskCounts []int32 `protobuf:"varint,21,rep,name=instanceDiskCounts" json:"instanceDiskCounts,omitempty"`
}

func (x *EntityProfileDTO_VMProfileDTO) Reset() {
	*x = EntityProfileDTO_VMProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProfileDTO_VMProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProfileDTO_VMProfileDTO) ProtoMessage() {}

func (x *EntityProfileDTO_VMProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProfileDTO_VMProfileDTO.ProtoReflect.Descriptor instead.
func (*EntityProfileDTO_VMProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EntityProfileDTO_VMProfileDTO) GetNumVCPUs() int32 {
	if x != nil && x.NumVCPUs != nil {
		return *x.NumVCPUs
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetVCPUSpeed() float32 {
	if x != nil && x.VCPUSpeed != nil {
		return *x.VCPUSpeed
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetNumStorageConsumed() int32 {
	if x != nil && x.NumStorageConsumed != nil {
		return *x.NumStorageConsumed
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetDiskType() string {
	if x != nil && x.DiskType != nil {
		return *x.DiskType
	}
	return ""
}

// Deprecated: Do not use.
func (x *EntityProfileDTO_VMProfileDTO) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

func (x *EntityProfileDTO_VMProfileDTO) GetNumberOfCoupons() int32 {
	if x != nil && x.NumberOfCoupons != nil {
		return *x.NumberOfCoupons
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetDedicatedStorageNetworkState() EntityDTO_ComputeTierData_DedicatedStorageNetworkState {
	if x != nil && x.DedicatedStorageNetworkState != nil {
		return *x.DedicatedStorageNetworkState
	}
	return EntityDTO_ComputeTierData_NOT_SUPPORTED
}

func (x *EntityProfileDTO_VMProfileDTO) GetLicense() []*EntityProfileDTO_LicenseMapEntry {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *EntityProfileDTO_VMProfileDTO) GetClonedUuid() string {
	if x != nil && x.ClonedUuid != nil {
		return *x.ClonedUuid
	}
	return ""
}

func (x *EntityProfileDTO_VMProfileDTO) GetVmTier() EntityProfileDTO_VMProfileDTO_VMTier {
	if x != nil && x.VmTier != nil {
		return *x.VmTier
	}
	return EntityProfileDTO_VMProfileDTO_BASIC
}

func (x *EntityProfileDTO_VMProfileDTO) GetInstanceDiskType() EntityDTO_InstanceDiskType {
	if x != nil && x.InstanceDiskType != nil {
		return *x.InstanceDiskType
	}
	return EntityDTO_NONE
}

func (x *EntityProfileDTO_VMProfileDTO) GetInstanceDiskSize() int32 {
	if x != nil && x.InstanceDiskSize != nil {
		return *x.InstanceDiskSize
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetSupportEncryptedVolume() bool {
	if x != nil && x.SupportEncryptedVolume != nil {
		return *x.SupportEncryptedVolume
	}
	return false
}

func (x *EntityProfileDTO_VMProfileDTO) GetTemplateFamilyCommodityKey() string {
	if x != nil && x.TemplateFamilyCommodityKey != nil {
		return *x.TemplateFamilyCommodityKey
	}
	return ""
}

func (x *EntityProfileDTO_VMProfileDTO) GetNumCloudComputeUnit() int32 {
	if x != nil && x.NumCloudComputeUnit != nil {
		return *x.NumCloudComputeUnit
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetInstanceSizeFamily() string {
	if x != nil && x.InstanceSizeFamily != nil {
		return *x.InstanceSizeFamily
	}
	return ""
}

func (x *EntityProfileDTO_VMProfileDTO) GetTenancy() []EntityProfileDTO_VMProfileDTO_TenancyType {
	if x != nil {
		return x.Tenancy
	}
	return nil
}

func (x *EntityProfileDTO_VMProfileDTO) GetQuotaFamily() string {
	if x != nil && x.QuotaFamily != nil {
		return *x.QuotaFamily
	}
	return ""
}

// Deprecated: Do not use.
func (x *EntityProfileDTO_VMProfileDTO) GetNumInstanceDisks() int32 {
	if x != nil && x.NumInstanceDisks != nil {
		return *x.NumInstanceDisks
	}
	return 0
}

func (x *EntityProfileDTO_VMProfileDTO) GetBurstableCPU() bool {
	if x != nil && x.BurstableCPU != nil {
		return *x.BurstableCPU
	}
	return false
}

func (x *EntityProfileDTO_VMProfileDTO) GetInstanceDiskCounts() []int32 {
	if x != nil {
		return x.InstanceDiskCounts
	}
	return nil
}

// Specific data related to a pm profile
type EntityProfileDTO_PMProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// At least one of numCores and cpuCoreSpeed should be specified
	// The other can be derived from the cpu capacity in
	// the commodity dto.
	NumCores     *int32   `protobuf:"varint,1,opt,name=numCores" json:"numCores,omitempty"`
	CpuCoreSpeed *float32 `protobuf:"fixed32,2,opt,name=cpuCoreSpeed" json:"cpuCoreSpeed,omitempty"`
}

func (x *EntityProfileDTO_PMProfileDTO) Reset() {
	*x = EntityProfileDTO_PMProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProfileDTO_PMProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProfileDTO_PMProfileDTO) ProtoMessage() {}

func (x *EntityProfileDTO_PMProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProfileDTO_PMProfileDTO.ProtoReflect.Descriptor instead.
func (*EntityProfileDTO_PMProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EntityProfileDTO_PMProfileDTO) GetNumCores() int32 {
	if x != nil && x.NumCores != nil {
		return *x.NumCores
	}
	return 0
}

func (x *EntityProfileDTO_PMProfileDTO) GetCpuCoreSpeed() float32 {
	if x != nil && x.CpuCoreSpeed != nil {
		return *x.CpuCoreSpeed
	}
	return 0
}

// Specific data related to a db profile or db instance profile
// Only used by vendors: AWS and Azure
type EntityProfileDTO_DBProfileDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for matching profiles that belong to the same family.
	Family *string `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	// number of VCPUs
	NumVCPUs *int32 `protobuf:"varint,2,opt,name=numVCPUs" json:"numVCPUs,omitempty"`
	// all database editions supported by profile.  Edition example: "Enterprise" or "web".
	DbEdition []string `protobuf:"bytes,3,rep,name=dbEdition" json:"dbEdition,omitempty"`
	// all database engines supported by profile.  Engine example: "MariaDB" or "MySql".
	DbEngine []string `protobuf:"bytes,4,rep,name=dbEngine" json:"dbEngine,omitempty"`
	// all the license (operating system or DB engine) supported by profile
	License []*EntityProfileDTO_LicenseMapEntry `protobuf:"bytes,5,rep,name=license" json:"license,omitempty"`
}

func (x *EntityProfileDTO_DBProfileDTO) Reset() {
	*x = EntityProfileDTO_DBProfileDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ProfileDTO_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityProfileDTO_DBProfileDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityProfileDTO_DBProfileDTO) ProtoMessage() {}

func (x *EntityProfileDTO_DBProfileDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ProfileDTO_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityProfileDTO_DBProfileDTO.ProtoReflect.Descriptor instead.
func (*EntityProfileDTO_DBProfileDTO) Descriptor() ([]byte, []int) {
	return file_ProfileDTO_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EntityProfileDTO_DBProfileDTO) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

func (x *EntityProfileDTO_DBProfileDTO) GetNumVCPUs() int32 {
	if x != nil && x.NumVCPUs != nil {
		return *x.NumVCPUs
	}
	return 0
}

func (x *EntityProfileDTO_DBProfileDTO) GetDbEdition() []string {
	if x != nil {
		return x.DbEdition
	}
	return nil
}

func (x *EntityProfileDTO_DBProfileDTO) GetDbEngine() []string {
	if x != nil {
		return x.DbEngine
	}
	return nil
}

func (x *EntityProfileDTO_DBProfileDTO) GetLicense() []*EntityProfileDTO_LicenseMapEntry {
	if x != nil {
		return x.License
	}
	return nil
}

var File_ProfileDTO_proto protoreflect.FileDescriptor

var file_ProfileDTO_proto_rawDesc = []byte{
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x1a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc9, 0x12, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x54, 0x4f, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0c, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x6d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x4d, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6d, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x4f, 0x0a, 0x0c, 0x64, 0x62, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x42, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x62, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x44, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x4b, 0x0a,
	0x0f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xbd, 0x09, 0x0a, 0x0c, 0x56,
	0x4d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x56, 0x43, 0x50, 0x55, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x56, 0x43, 0x50, 0x55, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x43, 0x50, 0x55, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76, 0x43, 0x50, 0x55,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x1c, 0x64, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x1c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x55, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x64, 0x55, 0x75, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x76, 0x6d, 0x54, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x54, 0x69, 0x65, 0x72, 0x52, 0x06, 0x76, 0x6d, 0x54, 0x69,
	0x65, 0x72, 0x12, 0x52, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75,
	0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x4f, 0x0a, 0x07,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x2e, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x50, 0x55, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x50, 0x55, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x06, 0x56, 0x4d, 0x54, 0x69, 0x65, 0x72, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x22, 0x32, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x4e, 0x0a, 0x0c, 0x50, 0x4d,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x63, 0x70,
	0x75, 0x43, 0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x1a, 0xc4, 0x01, 0x0a, 0x0c, 0x44,
	0x42, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x56, 0x43, 0x50, 0x55, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x56, 0x43, 0x50, 0x55, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x54, 0x4f, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x22,
	0xd2, 0x02, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x5b, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d, 0x74, 0x75,
	0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x74, 0x6f, 0x42, 0x0a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x44, 0x54, 0x4f, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f,
	0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f,
}

var (
	file_ProfileDTO_proto_rawDescOnce sync.Once
	file_ProfileDTO_proto_rawDescData = file_ProfileDTO_proto_rawDesc
)

func file_ProfileDTO_proto_rawDescGZIP() []byte {
	file_ProfileDTO_proto_rawDescOnce.Do(func() {
		file_ProfileDTO_proto_rawDescData = protoimpl.X.CompressGZIP(file_ProfileDTO_proto_rawDescData)
	})
	return file_ProfileDTO_proto_rawDescData
}

var file_ProfileDTO_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ProfileDTO_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ProfileDTO_proto_goTypes = []interface{}{
	(EntityProfileDTO_VMProfileDTO_VMTier)(0),                   // 0: common_dto.EntityProfileDTO.VMProfileDTO.VMTier
	(EntityProfileDTO_VMProfileDTO_TenancyType)(0),              // 1: common_dto.EntityProfileDTO.VMProfileDTO.TenancyType
	(*EntityProfileDTO)(nil),                                    // 2: common_dto.EntityProfileDTO
	(*CommodityProfileDTO)(nil),                                 // 3: common_dto.CommodityProfileDTO
	(*DeploymentProfileDTO)(nil),                                // 4: common_dto.DeploymentProfileDTO
	(*EntityProfileDTO_LicenseMapEntry)(nil),                    // 5: common_dto.EntityProfileDTO.LicenseMapEntry
	(*EntityProfileDTO_VMProfileDTO)(nil),                       // 6: common_dto.EntityProfileDTO.VMProfileDTO
	(*EntityProfileDTO_PMProfileDTO)(nil),                       // 7: common_dto.EntityProfileDTO.PMProfileDTO
	(*EntityProfileDTO_DBProfileDTO)(nil),                       // 8: common_dto.EntityProfileDTO.DBProfileDTO
	(EntityDTO_EntityType)(0),                                   // 9: common_dto.EntityDTO.EntityType
	(*EntityDTO_EntityProperty)(nil),                            // 10: common_dto.EntityDTO.EntityProperty
	(UpdateType)(0),                                             // 11: common_dto.UpdateType
	(CommodityDTO_CommodityType)(0),                             // 12: common_dto.CommodityDTO.CommodityType
	(*ContextData)(nil),                                         // 13: common_dto.ContextData
	(EntityDTO_ComputeTierData_DedicatedStorageNetworkState)(0), // 14: common_dto.EntityDTO.ComputeTierData.DedicatedStorageNetworkState
	(EntityDTO_InstanceDiskType)(0),                             // 15: common_dto.EntityDTO.InstanceDiskType
}
var file_ProfileDTO_proto_depIdxs = []int32{
	9,  // 0: common_dto.EntityProfileDTO.entityType:type_name -> common_dto.EntityDTO.EntityType
	3,  // 1: common_dto.EntityProfileDTO.commodityProfile:type_name -> common_dto.CommodityProfileDTO
	6,  // 2: common_dto.EntityProfileDTO.vmProfileDTO:type_name -> common_dto.EntityProfileDTO.VMProfileDTO
	7,  // 3: common_dto.EntityProfileDTO.pmProfileDTO:type_name -> common_dto.EntityProfileDTO.PMProfileDTO
	8,  // 4: common_dto.EntityProfileDTO.dbProfileDTO:type_name -> common_dto.EntityProfileDTO.DBProfileDTO
	10, // 5: common_dto.EntityProfileDTO.entityProperties:type_name -> common_dto.EntityDTO.EntityProperty
	11, // 6: common_dto.EntityProfileDTO.updateType:type_name -> common_dto.UpdateType
	12, // 7: common_dto.CommodityProfileDTO.commodityType:type_name -> common_dto.CommodityDTO.CommodityType
	13, // 8: common_dto.DeploymentProfileDTO.contextData:type_name -> common_dto.ContextData
	11, // 9: common_dto.DeploymentProfileDTO.updateType:type_name -> common_dto.UpdateType
	14, // 10: common_dto.EntityProfileDTO.VMProfileDTO.dedicatedStorageNetworkState:type_name -> common_dto.EntityDTO.ComputeTierData.DedicatedStorageNetworkState
	5,  // 11: common_dto.EntityProfileDTO.VMProfileDTO.license:type_name -> common_dto.EntityProfileDTO.LicenseMapEntry
	0,  // 12: common_dto.EntityProfileDTO.VMProfileDTO.vmTier:type_name -> common_dto.EntityProfileDTO.VMProfileDTO.VMTier
	15, // 13: common_dto.EntityProfileDTO.VMProfileDTO.instanceDiskType:type_name -> common_dto.EntityDTO.InstanceDiskType
	1,  // 14: common_dto.EntityProfileDTO.VMProfileDTO.tenancy:type_name -> common_dto.EntityProfileDTO.VMProfileDTO.TenancyType
	5,  // 15: common_dto.EntityProfileDTO.DBProfileDTO.license:type_name -> common_dto.EntityProfileDTO.LicenseMapEntry
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ProfileDTO_proto_init() }
func file_ProfileDTO_proto_init() {
	if File_ProfileDTO_proto != nil {
		return
	}
	file_CommonDTO_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ProfileDTO_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommodityProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProfileDTO_LicenseMapEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProfileDTO_VMProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProfileDTO_PMProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ProfileDTO_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityProfileDTO_DBProfileDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ProfileDTO_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EntityProfileDTO_VmProfileDTO)(nil),
		(*EntityProfileDTO_PmProfileDTO)(nil),
		(*EntityProfileDTO_DbProfileDTO)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ProfileDTO_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ProfileDTO_proto_goTypes,
		DependencyIndexes: file_ProfileDTO_proto_depIdxs,
		EnumInfos:         file_ProfileDTO_proto_enumTypes,
		MessageInfos:      file_ProfileDTO_proto_msgTypes,
	}.Build()
	File_ProfileDTO_proto = out.File
	file_ProfileDTO_proto_rawDesc = nil
	file_ProfileDTO_proto_goTypes = nil
	file_ProfileDTO_proto_depIdxs = nil
}
