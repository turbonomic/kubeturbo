// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: SupplyChain.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TemplateDTO_TemplateType int32

const (
	TemplateDTO_BASE      TemplateDTO_TemplateType = 0
	TemplateDTO_EXTENSION TemplateDTO_TemplateType = 1
)

// Enum value maps for TemplateDTO_TemplateType.
var (
	TemplateDTO_TemplateType_name = map[int32]string{
		0: "BASE",
		1: "EXTENSION",
	}
	TemplateDTO_TemplateType_value = map[string]int32{
		"BASE":      0,
		"EXTENSION": 1,
	}
)

func (x TemplateDTO_TemplateType) Enum() *TemplateDTO_TemplateType {
	p := new(TemplateDTO_TemplateType)
	*p = x
	return p
}

func (x TemplateDTO_TemplateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateDTO_TemplateType) Descriptor() protoreflect.EnumDescriptor {
	return file_SupplyChain_proto_enumTypes[0].Descriptor()
}

func (TemplateDTO_TemplateType) Type() protoreflect.EnumType {
	return &file_SupplyChain_proto_enumTypes[0]
}

func (x TemplateDTO_TemplateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TemplateDTO_TemplateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TemplateDTO_TemplateType(num)
	return nil
}

// Deprecated: Use TemplateDTO_TemplateType.Descriptor instead.
func (TemplateDTO_TemplateType) EnumDescriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{0, 0}
}

type Provider_ProviderType int32

const (
	// HOSTING is a To One relationship toward the provider, and it enforces containment.
	// This means that if the provider is removed, then every contained consumer will also be removed.
	Provider_HOSTING Provider_ProviderType = 0
	// LAYERED_OVER is a To Many relationship toward the provider, without containment.
	Provider_LAYERED_OVER Provider_ProviderType = 1
)

// Enum value maps for Provider_ProviderType.
var (
	Provider_ProviderType_name = map[int32]string{
		0: "HOSTING",
		1: "LAYERED_OVER",
	}
	Provider_ProviderType_value = map[string]int32{
		"HOSTING":      0,
		"LAYERED_OVER": 1,
	}
)

func (x Provider_ProviderType) Enum() *Provider_ProviderType {
	p := new(Provider_ProviderType)
	*p = x
	return p
}

func (x Provider_ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Provider_ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_SupplyChain_proto_enumTypes[1].Descriptor()
}

func (Provider_ProviderType) Type() protoreflect.EnumType {
	return &file_SupplyChain_proto_enumTypes[1]
}

func (x Provider_ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Provider_ProviderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Provider_ProviderType(num)
	return nil
}

// Deprecated: Use Provider_ProviderType.Descriptor instead.
func (Provider_ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{2, 0}
}

// Strategy of merging entity properties. The strategy defines how to merge properties of
// entities that are discovered by multiple targets. Since properties are merged prior to
// being patched, you can still control the merge behavior of individual properties via the
// "patchedProperties" attribute.
type MergedEntityMetadata_MergePropertiesStrategy int32

const (
	// Properties of the "onto" entity are preserved and no property merging is applied. This
	// strategy should be used when we know for sure that all targets discover the same set
	// of properties for each shared entity.
	MergedEntityMetadata_MERGE_NOTHING MergedEntityMetadata_MergePropertiesStrategy = 1
	// The resulting property list is a union of all properties from all EntityDTOs. When a
	// property exists in both the "from" and "onto" entities, the "onto" entity values will
	// be preserved.
	MergedEntityMetadata_MERGE_IF_NOT_PRESENT MergedEntityMetadata_MergePropertiesStrategy = 2
	// The resulting property list is a union of all properties from all EntityDTOs. When a
	// property exists in both the "from" and "onto" entities, the "from" entity values will
	// overwrite those of the "onto" entity.
	MergedEntityMetadata_MERGE_AND_OVERWRITE MergedEntityMetadata_MergePropertiesStrategy = 3
)

// Enum value maps for MergedEntityMetadata_MergePropertiesStrategy.
var (
	MergedEntityMetadata_MergePropertiesStrategy_name = map[int32]string{
		1: "MERGE_NOTHING",
		2: "MERGE_IF_NOT_PRESENT",
		3: "MERGE_AND_OVERWRITE",
	}
	MergedEntityMetadata_MergePropertiesStrategy_value = map[string]int32{
		"MERGE_NOTHING":        1,
		"MERGE_IF_NOT_PRESENT": 2,
		"MERGE_AND_OVERWRITE":  3,
	}
)

func (x MergedEntityMetadata_MergePropertiesStrategy) Enum() *MergedEntityMetadata_MergePropertiesStrategy {
	p := new(MergedEntityMetadata_MergePropertiesStrategy)
	*p = x
	return p
}

func (x MergedEntityMetadata_MergePropertiesStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergedEntityMetadata_MergePropertiesStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_SupplyChain_proto_enumTypes[2].Descriptor()
}

func (MergedEntityMetadata_MergePropertiesStrategy) Type() protoreflect.EnumType {
	return &file_SupplyChain_proto_enumTypes[2]
}

func (x MergedEntityMetadata_MergePropertiesStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata_MergePropertiesStrategy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergedEntityMetadata_MergePropertiesStrategy(num)
	return nil
}

// Deprecated: Use MergedEntityMetadata_MergePropertiesStrategy.Descriptor instead.
func (MergedEntityMetadata_MergePropertiesStrategy) EnumDescriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 0}
}

// Deprecated. Kept for backward compatibility.
// The type of the matching value we will use.  String or List<String>
//
// Deprecated: Do not use.
type MergedEntityMetadata_ReturnType int32

const (
	MergedEntityMetadata_STRING      MergedEntityMetadata_ReturnType = 1
	MergedEntityMetadata_LIST_STRING MergedEntityMetadata_ReturnType = 2
)

// Enum value maps for MergedEntityMetadata_ReturnType.
var (
	MergedEntityMetadata_ReturnType_name = map[int32]string{
		1: "STRING",
		2: "LIST_STRING",
	}
	MergedEntityMetadata_ReturnType_value = map[string]int32{
		"STRING":      1,
		"LIST_STRING": 2,
	}
)

func (x MergedEntityMetadata_ReturnType) Enum() *MergedEntityMetadata_ReturnType {
	p := new(MergedEntityMetadata_ReturnType)
	*p = x
	return p
}

func (x MergedEntityMetadata_ReturnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergedEntityMetadata_ReturnType) Descriptor() protoreflect.EnumDescriptor {
	return file_SupplyChain_proto_enumTypes[3].Descriptor()
}

func (MergedEntityMetadata_ReturnType) Type() protoreflect.EnumType {
	return &file_SupplyChain_proto_enumTypes[3]
}

func (x MergedEntityMetadata_ReturnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata_ReturnType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergedEntityMetadata_ReturnType(num)
	return nil
}

// Deprecated: Use MergedEntityMetadata_ReturnType.Descriptor instead.
func (MergedEntityMetadata_ReturnType) EnumDescriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 1}
}

// Defines the type of scope you are using. Currently, only PARENT is supported on the
// back end.
type MergedEntityMetadata_StitchingScopeType int32

const (
	// indicates a target will only stitch with its parent target(s)
	MergedEntityMetadata_PARENT MergedEntityMetadata_StitchingScopeType = 1
)

// Enum value maps for MergedEntityMetadata_StitchingScopeType.
var (
	MergedEntityMetadata_StitchingScopeType_name = map[int32]string{
		1: "PARENT",
	}
	MergedEntityMetadata_StitchingScopeType_value = map[string]int32{
		"PARENT": 1,
	}
)

func (x MergedEntityMetadata_StitchingScopeType) Enum() *MergedEntityMetadata_StitchingScopeType {
	p := new(MergedEntityMetadata_StitchingScopeType)
	*p = x
	return p
}

func (x MergedEntityMetadata_StitchingScopeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergedEntityMetadata_StitchingScopeType) Descriptor() protoreflect.EnumDescriptor {
	return file_SupplyChain_proto_enumTypes[4].Descriptor()
}

func (MergedEntityMetadata_StitchingScopeType) Type() protoreflect.EnumType {
	return &file_SupplyChain_proto_enumTypes[4]
}

func (x MergedEntityMetadata_StitchingScopeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata_StitchingScopeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MergedEntityMetadata_StitchingScopeType(num)
	return nil
}

// Deprecated: Use MergedEntityMetadata_StitchingScopeType.Descriptor instead.
func (MergedEntityMetadata_StitchingScopeType) EnumDescriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 2}
}

//
// The TemplateDTO message represents entity types (templates) that the probe expects to
// discover in the target. For the probe to load in Operations Manager, it must discover
// entity types that are valid members of the supply chain, and these entities must have
// valid buy/sell relationships. Specifying the set of templates for a probe serves to
// validate that the specific entities the probe discovers and sends to Operations Manager do
// indeed match the entity descriptions the probe is expected to discover.
//
// Specify entity type by setting an EntityType value to the templateClass field.
//
// An entity can maintain a list of commodities that it sells.
//
// An entity can maintain a map of commodities bought (TemplateCommodity objects). Each map key is
// an instance of Provider. For each provider, the map entry is a list of the commodities bought
// from that provider.
//
// The templateType can be either {@code Base} or
// Extension (see TemplateType).
//
// A Base template indicates the initial representation
// of an entity, which means this probe performs the primary discovery of the entity and places it in the market.
// Note that there can be more than one probe that discovers the same Base entity. The template has a
// templatePriority setting that resolves such a collision. The template with the highest priority value
// wins, and discoveries made for the lower-priority template are ignored.
//
// An extension template adds data to already discovered entities. This is a way to extend the
// commodities managed by a base template.
//
type TemplateDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of entity that the template represents. See EntityType
	// for the available types.
	TemplateClass *EntityDTO_EntityType `protobuf:"varint,1,req,name=templateClass,enum=common_dto.EntityDTO_EntityType" json:"templateClass,omitempty"`
	// The template type (Base or Extension), used during the validation process.
	TemplateType *TemplateDTO_TemplateType `protobuf:"varint,2,req,name=templateType,enum=common_dto.TemplateDTO_TemplateType" json:"templateType,omitempty"`
	// The priority of a Base template. For equivalent Base templates, Operations Manager uses the highest-priority
	// template, and discards discovered data from lower-priority Base templates.
	TemplatePriority *int32 `protobuf:"varint,3,req,name=templatePriority" json:"templatePriority,omitempty"`
	// This entity's list of {@link TemplateCommodity} items that it provides.
	CommoditySold []*TemplateCommodity `protobuf:"bytes,5,rep,name=commoditySold" json:"commoditySold,omitempty"`
	// The commodities bought from the different providers.
	// This Map contains the commodities bought where:
	CommodityBought []*TemplateDTO_CommBoughtProviderProp `protobuf:"bytes,6,rep,name=commodityBought" json:"commodityBought,omitempty"`
	// A map that defines the entity types that will be providers or consumers for this template entity.
	// The entry key is an entity type, from the EntityType enumeration. There can only be
	// one instance of each entity type in this map. The entry value is an instance of
	// ExternalEntityLink. Each entity link describes an entity type in the supply chain,
	// and the commodities it buys from or sells to the template entity.
	ExternalLink []*TemplateDTO_ExternalEntityLinkProp `protobuf:"bytes,7,rep,name=externalLink" json:"externalLink,omitempty"`
	// Each set represents a case where the entity must buy one commodity of the set ( a logical or of the set)
	// Note, the entity may buy more than one of the commodities in the set.
	CommBoughtOrSet []*TemplateDTO_CommBoughtProviderOrSet `protobuf:"bytes,8,rep,name=commBoughtOrSet" json:"commBoughtOrSet,omitempty"`
	// If this template represents an entity class that will be a proxy entity,
	// add MergedEntityMetadata that defines how to identify the matching entity in the server and
	// also what data from the proxy entity to copy over to the matching entity.
	// For details see the comment with the message definition of MergedEntityMetadata.
	MergedEntityMetaData *MergedEntityMetadata `protobuf:"bytes,9,opt,name=mergedEntityMetaData" json:"mergedEntityMetaData,omitempty"`
}

func (x *TemplateDTO) Reset() {
	*x = TemplateDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDTO) ProtoMessage() {}

func (x *TemplateDTO) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDTO.ProtoReflect.Descriptor instead.
func (*TemplateDTO) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{0}
}

func (x *TemplateDTO) GetTemplateClass() EntityDTO_EntityType {
	if x != nil && x.TemplateClass != nil {
		return *x.TemplateClass
	}
	return EntityDTO_SWITCH
}

func (x *TemplateDTO) GetTemplateType() TemplateDTO_TemplateType {
	if x != nil && x.TemplateType != nil {
		return *x.TemplateType
	}
	return TemplateDTO_BASE
}

func (x *TemplateDTO) GetTemplatePriority() int32 {
	if x != nil && x.TemplatePriority != nil {
		return *x.TemplatePriority
	}
	return 0
}

func (x *TemplateDTO) GetCommoditySold() []*TemplateCommodity {
	if x != nil {
		return x.CommoditySold
	}
	return nil
}

func (x *TemplateDTO) GetCommodityBought() []*TemplateDTO_CommBoughtProviderProp {
	if x != nil {
		return x.CommodityBought
	}
	return nil
}

func (x *TemplateDTO) GetExternalLink() []*TemplateDTO_ExternalEntityLinkProp {
	if x != nil {
		return x.ExternalLink
	}
	return nil
}

func (x *TemplateDTO) GetCommBoughtOrSet() []*TemplateDTO_CommBoughtProviderOrSet {
	if x != nil {
		return x.CommBoughtOrSet
	}
	return nil
}

func (x *TemplateDTO) GetMergedEntityMetaData() *MergedEntityMetadata {
	if x != nil {
		return x.MergedEntityMetaData
	}
	return nil
}

type TemplateCommodity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
	Key           *string                     `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Type of the bought commodity, that charges this one. This must be one of the commodities
	// the entity (template) is expected to buy. So, this is a link between bought and sold
	// commodity of the same entity
	ChargedBy []CommodityDTO_CommodityType `protobuf:"varint,3,rep,name=chargedBy,enum=common_dto.CommodityDTO_CommodityType" json:"chargedBy,omitempty"`
	// Flag indicating that this commodity is optional. If a commodity is not optional, then it
	// is mandatory. If commodity is mandatory it is a validation exception not to have
	// this commodity set up
	Optional *bool `protobuf:"varint,4,opt,name=optional,def=0" json:"optional,omitempty"`
	// Type of the sold commodity, that charges this one. This must be one of the commodities the
	// entity (template) is expected to sell. So, this is a linek between sold commodities of the
	// same entity.
	ChargedBySold []CommodityDTO_CommodityType `protobuf:"varint,5,rep,name=chargedBySold,enum=common_dto.CommodityDTO_CommodityType" json:"chargedBySold,omitempty"`
	// A resold commodity is designed to model situations in which the true source of supply for
	// that resold commodity is further down the supply chain rather than directly through the entity
	// providing the commodity. In these cases, the true supplier is responsible for setting the
	// price of the resold commodity. For a real-life economic analogy, consider the case of buying
	// a BigMac at McDonald's - the individual restaurant does not get to set the price. Instead,
	// the price may be set by the franchise based on national or regional prices of its
	// ingredients along with other factors. Useful in situations where an entity's direct provider
	// represents more of a logical grouping of entities rather than a proper supplier of resources ie
	// a Container buying from a ContainerPod.
	//
	// Note that this property is NOT used in stitching.
	IsResold *bool `protobuf:"varint,6,opt,name=isResold,def=0" json:"isResold,omitempty"`
}

// Default values for TemplateCommodity fields.
const (
	Default_TemplateCommodity_Optional = bool(false)
	Default_TemplateCommodity_IsResold = bool(false)
)

func (x *TemplateCommodity) Reset() {
	*x = TemplateCommodity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateCommodity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateCommodity) ProtoMessage() {}

func (x *TemplateCommodity) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateCommodity.ProtoReflect.Descriptor instead.
func (*TemplateCommodity) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{1}
}

func (x *TemplateCommodity) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *TemplateCommodity) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TemplateCommodity) GetChargedBy() []CommodityDTO_CommodityType {
	if x != nil {
		return x.ChargedBy
	}
	return nil
}

func (x *TemplateCommodity) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_TemplateCommodity_Optional
}

func (x *TemplateCommodity) GetChargedBySold() []CommodityDTO_CommodityType {
	if x != nil {
		return x.ChargedBySold
	}
	return nil
}

func (x *TemplateCommodity) GetIsResold() bool {
	if x != nil && x.IsResold != nil {
		return *x.IsResold
	}
	return Default_TemplateCommodity_IsResold
}

// The Provider class creates a template entity that sells commodities to a
// consumer template.
//
// Each Provider instance has a templateClass to define the entity type, which is expressed
// as a member of the EntityType enumeration.
//
// A provider can have one of two types of relationship with the consumer entity -
// HOSTING or LAYERED_OVER (see ProviderType):
//
// HOSTING is a One Provider/Many Consumers relationship, where the provider contains the consumer.
// This means that if the provider is removed, then every consumer it contains will also be removed.
// For example, a PhysicalMachine contains many VirtualMachines. If you remove the PhysicalMachine
// entity, then its contained VMs will also be removed. You should move VMs off of a host before removing it.
//
// LAYERED_OVER is a Many/Many relationship, with no concept of containment. For example, many VMs
// can share more than one datastore. For LayeredOver relationships, you must specify max and min limits
// to determine how many providers can be layered over the given type of consumer. These values are set in the
// cardinalityMax and cardinalityMin members of this class.
type Provider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of entity that the provider represents. See {@link Entity}
	// for the available types.
	TemplateClass *EntityDTO_EntityType `protobuf:"varint,1,req,name=templateClass,enum=common_dto.EntityDTO_EntityType" json:"templateClass,omitempty"`
	// ProviderType specifies the type of relationship between the provider and the consumer
	ProviderType *Provider_ProviderType `protobuf:"varint,2,req,name=providerType,enum=common_dto.Provider_ProviderType" json:"providerType,omitempty"`
	// For LAYERED_OVER providers, the maximum number of providers allowed for the consumer.
	CardinalityMax *int32 `protobuf:"varint,3,req,name=cardinalityMax" json:"cardinalityMax,omitempty"`
	// For LAYERED_OVER providers, the minimum number of providers allowed for the consumer.
	CardinalityMin *int32 `protobuf:"varint,4,req,name=cardinalityMin" json:"cardinalityMin,omitempty"`
}

func (x *Provider) Reset() {
	*x = Provider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{2}
}

func (x *Provider) GetTemplateClass() EntityDTO_EntityType {
	if x != nil && x.TemplateClass != nil {
		return *x.TemplateClass
	}
	return EntityDTO_SWITCH
}

func (x *Provider) GetProviderType() Provider_ProviderType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return Provider_HOSTING
}

func (x *Provider) GetCardinalityMax() int32 {
	if x != nil && x.CardinalityMax != nil {
		return *x.CardinalityMax
	}
	return 0
}

func (x *Provider) GetCardinalityMin() int32 {
	if x != nil && x.CardinalityMin != nil {
		return *x.CardinalityMin
	}
	return 0
}

// ExternalEntityLink is a subclass of {@link EntityLink} that
// describes the buy/sell relationship between an entity discovered by the probe, and
// an external entity.
//
// An external entity is one that exists in the
// Operations Manager topology, but has not been discovered by the probe.
// Operations Manager uses this link to stitch discovered entities into the
// existing topology that's managed by the Operations Manager market. This external
// entity can be a provider or a consumer. The ExternalEntityLink object
// contains a full description of the relationship between the external entity and
// the node entity.
// This description includes the entity types for the buyer and seller, the ProviderType
// (the relationship type for the provider, either HOSTING or LAYERED_OVER}),
// and the list of commodities bought from the provider.
//
// To enable stitching, the external link includes a map of {@code probeEntityDef} items
// and a list of ServerEntityPropertyDef items. These work together to identify which
// external entity to stitch together with the probe's discovered entity. The {@code probeEntityDef}
// items store data to identify the appropriate external entity. For example, a discovered application
// can store the IP address of the hosting VM.
//
// The ServerEntityPropertyDef items
// tell Operations Manager how to find identifying information in the external entities.
// For example, the discovered application stores IP address of the hosting VM. Operations Manager
// will use the ServerEntityPropertyDef to test the current VMs for a matching IP address.
type ExternalEntityLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consumer entity in the link
	BuyerRef *EntityDTO_EntityType `protobuf:"varint,1,req,name=buyerRef,enum=common_dto.EntityDTO_EntityType" json:"buyerRef,omitempty"`
	// Provider entity in the link
	SellerRef *EntityDTO_EntityType `protobuf:"varint,2,req,name=sellerRef,enum=common_dto.EntityDTO_EntityType" json:"sellerRef,omitempty"`
	// Provider relationship type
	Relationship *Provider_ProviderType `protobuf:"varint,3,req,name=relationship,enum=common_dto.Provider_ProviderType" json:"relationship,omitempty"`
	// The list of commodities the consumer entity buys from the provider entity.
	CommodityDefs []*ExternalEntityLink_CommodityDef `protobuf:"bytes,4,rep,name=commodityDefs" json:"commodityDefs,omitempty"`
	// Commodity key
	Key *string `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	// If one of the entity is to be found outside the probe
	HasExternalEntity *bool `protobuf:"varint,6,opt,name=hasExternalEntity" json:"hasExternalEntity,omitempty"`
	// Map of the name and description of the property belonging to the entity instances
	// discovered by the probe.
	ProbeEntityPropertyDef []*ExternalEntityLink_EntityPropertyDef `protobuf:"bytes,7,rep,name=probeEntityPropertyDef" json:"probeEntityPropertyDef,omitempty"`
	// The meta data representing the property definition of the external entity.
	// The value of the property is used for matching the entity instances.
	ExternalEntityPropertyDefs []*ServerEntityPropDef `protobuf:"bytes,8,rep,name=externalEntityPropertyDefs" json:"externalEntityPropertyDefs,omitempty"`
	// if the provider can replace a placeholder entity created outside of the probe,
	// give a list of EntityTypes it can replace.  For example, a LogicalPool can replace
	// a DiskArray or LogicalPool created by another probe.  The replaced entity must be
	// marked REPLACEABLE by the probe that creates it.
	ReplacesEntity []EntityDTO_EntityType `protobuf:"varint,9,rep,name=replacesEntity,enum=common_dto.EntityDTO_EntityType" json:"replacesEntity,omitempty"`
}

func (x *ExternalEntityLink) Reset() {
	*x = ExternalEntityLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEntityLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEntityLink) ProtoMessage() {}

func (x *ExternalEntityLink) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEntityLink.ProtoReflect.Descriptor instead.
func (*ExternalEntityLink) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalEntityLink) GetBuyerRef() EntityDTO_EntityType {
	if x != nil && x.BuyerRef != nil {
		return *x.BuyerRef
	}
	return EntityDTO_SWITCH
}

func (x *ExternalEntityLink) GetSellerRef() EntityDTO_EntityType {
	if x != nil && x.SellerRef != nil {
		return *x.SellerRef
	}
	return EntityDTO_SWITCH
}

func (x *ExternalEntityLink) GetRelationship() Provider_ProviderType {
	if x != nil && x.Relationship != nil {
		return *x.Relationship
	}
	return Provider_HOSTING
}

func (x *ExternalEntityLink) GetCommodityDefs() []*ExternalEntityLink_CommodityDef {
	if x != nil {
		return x.CommodityDefs
	}
	return nil
}

func (x *ExternalEntityLink) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ExternalEntityLink) GetHasExternalEntity() bool {
	if x != nil && x.HasExternalEntity != nil {
		return *x.HasExternalEntity
	}
	return false
}

func (x *ExternalEntityLink) GetProbeEntityPropertyDef() []*ExternalEntityLink_EntityPropertyDef {
	if x != nil {
		return x.ProbeEntityPropertyDef
	}
	return nil
}

func (x *ExternalEntityLink) GetExternalEntityPropertyDefs() []*ServerEntityPropDef {
	if x != nil {
		return x.ExternalEntityPropertyDefs
	}
	return nil
}

func (x *ExternalEntityLink) GetReplacesEntity() []EntityDTO_EntityType {
	if x != nil {
		return x.ReplacesEntity
	}
	return nil
}

// MergedEntityMetadata provides data that defines how to merge entities of this template type
// discovered by this probe with entities (referred to here as external entities) that were
// discovered by other probes and exist in the server.  There should be a MergedEntityMetadata entry
// for each entity type in the probe that is reported as origin "proxy".  The XL server will
// process the MergedEntityMetadata for each probe and create stitching operations for that probe.
// When processing topology from all the probes, XL will process the topology through the set of
// stitching operations to combine proxy instances with their matching external entities.
// The MergedEntityMetadata combines information that was previously contained in
// various places (e.g. external entity link, replacement entity metadata, and hardcoded in
// OpsManager stitching code).  It is currently used in XL for stitching,
// but is not used by OpsManager.  It consists of two parts: one part describes how to
// match two entities to know they are the same and the other part describes which properties and
// commodities to transfer from the proxy entity to the external entity it matches.  Matching can be
// done based on an entity property or field.  You specify one field or property to use on the entity
// that this probe discovers and one field or property for the external entity.  You may also
// specify multiple fields on either side in which case they will be concatenated together to
// form the matching value.  For the transfer, you can specify a list of entity properties, a list
// of entity fields, a list of sold commodities and/or a list of bought commodities.
type MergedEntityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should this entity type reported by the probe be kept in the topology if no stitching match
	// is found?  If yes, keepStandalone should be true.  If no, it should be false.
	KeepStandalone *bool `protobuf:"varint,1,opt,name=keepStandalone,def=1" json:"keepStandalone,omitempty"`
	// MatchingMetadata contains the information for matching this proxy entity with an external
	// entity
	MatchingMetadata *MergedEntityMetadata_MatchingMetadata `protobuf:"bytes,2,req,name=matchingMetadata" json:"matchingMetadata,omitempty"`
	// Names of entity properties that will be patched during merging.
	// Entities will be searched in EntityDTO.propMap.
	// These properties will be taken from the internal entity and written to the external entity.
	// If the external entity already has a property with the same key, it will be replaced by the
	// internal entity's property value.
	PatchedProperties []*MergedEntityMetadata_EntityPropertyName `protobuf:"bytes,3,rep,name=patchedProperties" json:"patchedProperties,omitempty"`
	// Similar to patched properties, we can have a list of fields in the EntityDTO to patch.
	// Again, if a field is specified here and exists in both the internal and external entities,
	// the value from the internal entity will overwrite the value from the external entity.
	PatchedFields []*MergedEntityMetadata_EntityField `protobuf:"bytes,4,rep,name=patchedFields" json:"patchedFields,omitempty"`
	// List of sold commodities that must be merged.
	//
	// Deprecated: Do not use.
	CommoditiesSold []CommodityDTO_CommodityType `protobuf:"varint,5,rep,name=commoditiesSold,enum=common_dto.CommodityDTO_CommodityType" json:"commoditiesSold,omitempty"`
	// List of bought commodities that must be merged.
	CommoditiesBought []*MergedEntityMetadata_CommodityBoughtMetadata `protobuf:"bytes,6,rep,name=commoditiesBought" json:"commoditiesBought,omitempty"`
	// List of metadata for the sold commodities that must be merged.
	CommoditiesSoldMetadata []*MergedEntityMetadata_CommoditySoldMetadata `protobuf:"bytes,7,rep,name=commodities_sold_metadata,json=commoditiesSoldMetadata" json:"commodities_sold_metadata,omitempty"`
	// Defines which type of targets to stitch with. Currently only supported StitchingScope
	// is Parent used by storage browsing probes. When stitching scope is not specified, we use
	// a scope derived from stitching order imposed in code.
	StitchingScope *MergedEntityMetadata_StitchingScope `protobuf:"bytes,8,opt,name=stitching_scope,json=stitchingScope" json:"stitching_scope,omitempty"`
	// Whether stitching should be skipped when there is a match with multiple external entities.
	// For example: if an APM target discovered multiple proxy VMs with the same IP, don't stitch
	// any of them to a VM that was discovered by a hypervisor/cloud target with this IP,
	// since we have no way of determining which of the several candidates is the right match.
	RequireSingleMatch *bool `protobuf:"varint,9,opt,name=requireSingleMatch,def=0" json:"requireSingleMatch,omitempty"`
	// The strategy for merging entity properties (see descriptions above).
	MergePropertiesStrategy *MergedEntityMetadata_MergePropertiesStrategy `protobuf:"varint,10,opt,name=merge_properties_strategy,json=mergePropertiesStrategy,enum=common_dto.MergedEntityMetadata_MergePropertiesStrategy,def=1" json:"merge_properties_strategy,omitempty"`
}

// Default values for MergedEntityMetadata fields.
const (
	Default_MergedEntityMetadata_KeepStandalone          = bool(true)
	Default_MergedEntityMetadata_RequireSingleMatch      = bool(false)
	Default_MergedEntityMetadata_MergePropertiesStrategy = MergedEntityMetadata_MERGE_NOTHING
)

func (x *MergedEntityMetadata) Reset() {
	*x = MergedEntityMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata) ProtoMessage() {}

func (x *MergedEntityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4}
}

func (x *MergedEntityMetadata) GetKeepStandalone() bool {
	if x != nil && x.KeepStandalone != nil {
		return *x.KeepStandalone
	}
	return Default_MergedEntityMetadata_KeepStandalone
}

func (x *MergedEntityMetadata) GetMatchingMetadata() *MergedEntityMetadata_MatchingMetadata {
	if x != nil {
		return x.MatchingMetadata
	}
	return nil
}

func (x *MergedEntityMetadata) GetPatchedProperties() []*MergedEntityMetadata_EntityPropertyName {
	if x != nil {
		return x.PatchedProperties
	}
	return nil
}

func (x *MergedEntityMetadata) GetPatchedFields() []*MergedEntityMetadata_EntityField {
	if x != nil {
		return x.PatchedFields
	}
	return nil
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata) GetCommoditiesSold() []CommodityDTO_CommodityType {
	if x != nil {
		return x.CommoditiesSold
	}
	return nil
}

func (x *MergedEntityMetadata) GetCommoditiesBought() []*MergedEntityMetadata_CommodityBoughtMetadata {
	if x != nil {
		return x.CommoditiesBought
	}
	return nil
}

func (x *MergedEntityMetadata) GetCommoditiesSoldMetadata() []*MergedEntityMetadata_CommoditySoldMetadata {
	if x != nil {
		return x.CommoditiesSoldMetadata
	}
	return nil
}

func (x *MergedEntityMetadata) GetStitchingScope() *MergedEntityMetadata_StitchingScope {
	if x != nil {
		return x.StitchingScope
	}
	return nil
}

func (x *MergedEntityMetadata) GetRequireSingleMatch() bool {
	if x != nil && x.RequireSingleMatch != nil {
		return *x.RequireSingleMatch
	}
	return Default_MergedEntityMetadata_RequireSingleMatch
}

func (x *MergedEntityMetadata) GetMergePropertiesStrategy() MergedEntityMetadata_MergePropertiesStrategy {
	if x != nil && x.MergePropertiesStrategy != nil {
		return *x.MergePropertiesStrategy
	}
	return Default_MergedEntityMetadata_MergePropertiesStrategy
}

// In some cases, an entity may buy one commodity or another, but it must buy one of the two
// This set represents the set of commodities where the entity must buy one of these.
// It could be that the set contains multiple commodities from the same provider - where only
// one of these will be bought.  Or it could be that there are multiple provider types and the
// entity must buy one.  However, for this set, the entity is only required to buy one of the
// commodities.
type TemplateDTO_CommBoughtProviderOrSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommBought []*TemplateDTO_CommBoughtProviderProp `protobuf:"bytes,1,rep,name=commBought" json:"commBought,omitempty"`
}

func (x *TemplateDTO_CommBoughtProviderOrSet) Reset() {
	*x = TemplateDTO_CommBoughtProviderOrSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDTO_CommBoughtProviderOrSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDTO_CommBoughtProviderOrSet) ProtoMessage() {}

func (x *TemplateDTO_CommBoughtProviderOrSet) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDTO_CommBoughtProviderOrSet.ProtoReflect.Descriptor instead.
func (*TemplateDTO_CommBoughtProviderOrSet) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TemplateDTO_CommBoughtProviderOrSet) GetCommBought() []*TemplateDTO_CommBoughtProviderProp {
	if x != nil {
		return x.CommBought
	}
	return nil
}

type TemplateDTO_CommBoughtProviderProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provider entity type created by the probe
	Key *Provider `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// The list of commodities bought from the provider specified as key.
	Value []*TemplateCommodity `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	// Specifies if the provider is optional or not.
	IsOptional *bool `protobuf:"varint,3,opt,name=isOptional,def=0" json:"isOptional,omitempty"`
}

// Default values for TemplateDTO_CommBoughtProviderProp fields.
const (
	Default_TemplateDTO_CommBoughtProviderProp_IsOptional = bool(false)
)

func (x *TemplateDTO_CommBoughtProviderProp) Reset() {
	*x = TemplateDTO_CommBoughtProviderProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDTO_CommBoughtProviderProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDTO_CommBoughtProviderProp) ProtoMessage() {}

func (x *TemplateDTO_CommBoughtProviderProp) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDTO_CommBoughtProviderProp.ProtoReflect.Descriptor instead.
func (*TemplateDTO_CommBoughtProviderProp) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TemplateDTO_CommBoughtProviderProp) GetKey() *Provider {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TemplateDTO_CommBoughtProviderProp) GetValue() []*TemplateCommodity {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TemplateDTO_CommBoughtProviderProp) GetIsOptional() bool {
	if x != nil && x.IsOptional != nil {
		return *x.IsOptional
	}
	return Default_TemplateDTO_CommBoughtProviderProp_IsOptional
}

type TemplateDTO_ExternalEntityLinkProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *EntityDTO_EntityType `protobuf:"varint,1,req,name=key,enum=common_dto.EntityDTO_EntityType" json:"key,omitempty"`
	Value *ExternalEntityLink   `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *TemplateDTO_ExternalEntityLinkProp) Reset() {
	*x = TemplateDTO_ExternalEntityLinkProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateDTO_ExternalEntityLinkProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateDTO_ExternalEntityLinkProp) ProtoMessage() {}

func (x *TemplateDTO_ExternalEntityLinkProp) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateDTO_ExternalEntityLinkProp.ProtoReflect.Descriptor instead.
func (*TemplateDTO_ExternalEntityLinkProp) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TemplateDTO_ExternalEntityLinkProp) GetKey() EntityDTO_EntityType {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return EntityDTO_SWITCH
}

func (x *TemplateDTO_ExternalEntityLinkProp) GetValue() *ExternalEntityLink {
	if x != nil {
		return x.Value
	}
	return nil
}

type ExternalEntityLink_CommodityDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=type,enum=common_dto.CommodityDTO_CommodityType" json:"type,omitempty"`
	HasKey *bool                       `protobuf:"varint,2,opt,name=hasKey,def=0" json:"hasKey,omitempty"`
	// Flag indicating that this commodity is optional. If a commodity is defined as mandatory
	// it is a validation exception not to have this commodity set up
	Optional *bool `protobuf:"varint,3,opt,name=optional,def=0" json:"optional,omitempty"`
}

// Default values for ExternalEntityLink_CommodityDef fields.
const (
	Default_ExternalEntityLink_CommodityDef_HasKey   = bool(false)
	Default_ExternalEntityLink_CommodityDef_Optional = bool(false)
)

func (x *ExternalEntityLink_CommodityDef) Reset() {
	*x = ExternalEntityLink_CommodityDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEntityLink_CommodityDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEntityLink_CommodityDef) ProtoMessage() {}

func (x *ExternalEntityLink_CommodityDef) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEntityLink_CommodityDef.ProtoReflect.Descriptor instead.
func (*ExternalEntityLink_CommodityDef) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ExternalEntityLink_CommodityDef) GetType() CommodityDTO_CommodityType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CommodityDTO_CLUSTER
}

func (x *ExternalEntityLink_CommodityDef) GetHasKey() bool {
	if x != nil && x.HasKey != nil {
		return *x.HasKey
	}
	return Default_ExternalEntityLink_CommodityDef_HasKey
}

func (x *ExternalEntityLink_CommodityDef) GetOptional() bool {
	if x != nil && x.Optional != nil {
		return *x.Optional
	}
	return Default_ExternalEntityLink_CommodityDef_Optional
}

// Holds a property for the probe's discovered entity that Operations Manager can use to stitch the discovered entity
// into the Operations Manager topology. Each property contains a property name and a description.
//
// The property name specifies which property of the discovered entity you want to match. The discovered
// entity's DTO contains the list of properties and values for that entity. This link must include a property that matches a
// named property in the DTO. Note that the SDK includes builders for different types of entities.
// These builders add properties to the entity DTO, giving them names from the {@link SupplyChainConstants} enumeration.
// However, you can use arbitrary names for these properties, so long as the named property is declared in the
// entity DTO.
//
// The properties you create here match the property names in the target DTO.
// For example, the {link ApplicationBuilder} adds an IP address as a property named {@code SupplyChainConstants.IP_ADDRESS}.
// To match the application IP address in this link, add a property to the link with the same name. By doing that,
// the stitching process can access the value that is set in the discovered entity's DTO.
//
// The property description is an arbitrary string to describe the purpose of this property. This is useful
// when you print out the link via a {@code toString()} method.
type ExternalEntityLink_EntityPropertyDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entity property name
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// An arbitrary description
	Description *string `protobuf:"bytes,2,req,name=description" json:"description,omitempty"`
}

func (x *ExternalEntityLink_EntityPropertyDef) Reset() {
	*x = ExternalEntityLink_EntityPropertyDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalEntityLink_EntityPropertyDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalEntityLink_EntityPropertyDef) ProtoMessage() {}

func (x *ExternalEntityLink_EntityPropertyDef) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalEntityLink_EntityPropertyDef.ProtoReflect.Descriptor instead.
func (*ExternalEntityLink_EntityPropertyDef) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ExternalEntityLink_EntityPropertyDef) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExternalEntityLink_EntityPropertyDef) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type MergedEntityMetadata_MatchingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kept for backward compatibility. No longer needed.
	// Previously used for specifying stitching property type
	//
	// Deprecated: Do not use.
	ReturnType *MergedEntityMetadata_ReturnType `protobuf:"varint,1,opt,name=returnType,enum=common_dto.MergedEntityMetadata_ReturnType" json:"returnType,omitempty"`
	// This is the field/property or combination of fields and properties that we extract from
	// the internal entity for matching.  It is not repeated in most cases.  The only use case
	// for repeated fields here is if you want to merge multiple String fields and/or properties
	// into a single value for matching purposes.
	MatchingData []*MergedEntityMetadata_MatchingData `protobuf:"bytes,2,rep,name=matchingData" json:"matchingData,omitempty"`
	// Kept for backward compatibility. No longer needed.
	// Previously used for specifying external stitching property type
	//
	// Deprecated: Do not use.
	ExternalEntityReturnType *MergedEntityMetadata_ReturnType `protobuf:"varint,3,opt,name=externalEntityReturnType,enum=common_dto.MergedEntityMetadata_ReturnType" json:"externalEntityReturnType,omitempty"`
	// This defines fields and/or properties we will extract from server side to attempt to
	// match an external entity with the internal entity
	ExternalEntityMatchingProperty []*MergedEntityMetadata_MatchingData `protobuf:"bytes,4,rep,name=externalEntityMatchingProperty" json:"externalEntityMatchingProperty,omitempty"`
}

func (x *MergedEntityMetadata_MatchingMetadata) Reset() {
	*x = MergedEntityMetadata_MatchingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_MatchingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_MatchingMetadata) ProtoMessage() {}

func (x *MergedEntityMetadata_MatchingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_MatchingMetadata.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_MatchingMetadata) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 0}
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata_MatchingMetadata) GetReturnType() MergedEntityMetadata_ReturnType {
	if x != nil && x.ReturnType != nil {
		return *x.ReturnType
	}
	return MergedEntityMetadata_STRING
}

func (x *MergedEntityMetadata_MatchingMetadata) GetMatchingData() []*MergedEntityMetadata_MatchingData {
	if x != nil {
		return x.MatchingData
	}
	return nil
}

// Deprecated: Do not use.
func (x *MergedEntityMetadata_MatchingMetadata) GetExternalEntityReturnType() MergedEntityMetadata_ReturnType {
	if x != nil && x.ExternalEntityReturnType != nil {
		return *x.ExternalEntityReturnType
	}
	return MergedEntityMetadata_STRING
}

func (x *MergedEntityMetadata_MatchingMetadata) GetExternalEntityMatchingProperty() []*MergedEntityMetadata_MatchingData {
	if x != nil {
		return x.ExternalEntityMatchingProperty
	}
	return nil
}

// The kind of data we will extract for matching. It can be a property which is extracted from
// the entity property map, or it can be a field which is named within the entityDTO itself, or
// the entity OID in XL repository. In some cases, we encode a List of Strings as a single string.
// In that case, one can specify a delimiter that separates different strings in the value.
// For example, we have a PM_UUID_LIST property where we have a comma separated list of UUIDs
// in a single string.
type MergedEntityMetadata_MatchingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MatchingData:
	//	*MergedEntityMetadata_MatchingData_MatchingProperty
	//	*MergedEntityMetadata_MatchingData_MatchingField
	//	*MergedEntityMetadata_MatchingData_MatchingEntityOid
	MatchingData isMergedEntityMetadata_MatchingData_MatchingData `protobuf_oneof:"matching_data"`
	Delimiter    *string                                          `protobuf:"bytes,200,opt,name=delimiter" json:"delimiter,omitempty"`
}

func (x *MergedEntityMetadata_MatchingData) Reset() {
	*x = MergedEntityMetadata_MatchingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_MatchingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_MatchingData) ProtoMessage() {}

func (x *MergedEntityMetadata_MatchingData) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_MatchingData.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_MatchingData) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 1}
}

func (m *MergedEntityMetadata_MatchingData) GetMatchingData() isMergedEntityMetadata_MatchingData_MatchingData {
	if m != nil {
		return m.MatchingData
	}
	return nil
}

func (x *MergedEntityMetadata_MatchingData) GetMatchingProperty() *MergedEntityMetadata_EntityPropertyName {
	if x, ok := x.GetMatchingData().(*MergedEntityMetadata_MatchingData_MatchingProperty); ok {
		return x.MatchingProperty
	}
	return nil
}

func (x *MergedEntityMetadata_MatchingData) GetMatchingField() *MergedEntityMetadata_EntityField {
	if x, ok := x.GetMatchingData().(*MergedEntityMetadata_MatchingData_MatchingField); ok {
		return x.MatchingField
	}
	return nil
}

func (x *MergedEntityMetadata_MatchingData) GetMatchingEntityOid() *MergedEntityMetadata_EntityOid {
	if x, ok := x.GetMatchingData().(*MergedEntityMetadata_MatchingData_MatchingEntityOid); ok {
		return x.MatchingEntityOid
	}
	return nil
}

func (x *MergedEntityMetadata_MatchingData) GetDelimiter() string {
	if x != nil && x.Delimiter != nil {
		return *x.Delimiter
	}
	return ""
}

type isMergedEntityMetadata_MatchingData_MatchingData interface {
	isMergedEntityMetadata_MatchingData_MatchingData()
}

type MergedEntityMetadata_MatchingData_MatchingProperty struct {
	MatchingProperty *MergedEntityMetadata_EntityPropertyName `protobuf:"bytes,100,opt,name=matching_property,json=matchingProperty,oneof"`
}

type MergedEntityMetadata_MatchingData_MatchingField struct {
	MatchingField *MergedEntityMetadata_EntityField `protobuf:"bytes,101,opt,name=matching_field,json=matchingField,oneof"`
}

type MergedEntityMetadata_MatchingData_MatchingEntityOid struct {
	MatchingEntityOid *MergedEntityMetadata_EntityOid `protobuf:"bytes,102,opt,name=matching_entity_oid,json=matchingEntityOid,oneof"`
}

func (*MergedEntityMetadata_MatchingData_MatchingProperty) isMergedEntityMetadata_MatchingData_MatchingData() {
}

func (*MergedEntityMetadata_MatchingData_MatchingField) isMergedEntityMetadata_MatchingData_MatchingData() {
}

func (*MergedEntityMetadata_MatchingData_MatchingEntityOid) isMergedEntityMetadata_MatchingData_MatchingData() {
}

// The name of a property to extract from the entity property map.
type MergedEntityMetadata_EntityPropertyName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyName *string `protobuf:"bytes,1,req,name=propertyName" json:"propertyName,omitempty"`
}

func (x *MergedEntityMetadata_EntityPropertyName) Reset() {
	*x = MergedEntityMetadata_EntityPropertyName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_EntityPropertyName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_EntityPropertyName) ProtoMessage() {}

func (x *MergedEntityMetadata_EntityPropertyName) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_EntityPropertyName.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_EntityPropertyName) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 2}
}

func (x *MergedEntityMetadata_EntityPropertyName) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

// A string or ordered sequence of strings describing the field in the entity DTO to use.  For
// example, for storage stitching we use messagePath={"storage_data"}, fieldName="externalName".
type MergedEntityMetadata_EntityField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagePath []string `protobuf:"bytes,1,rep,name=messagePath" json:"messagePath,omitempty"`
	FieldName   *string  `protobuf:"bytes,2,req,name=fieldName" json:"fieldName,omitempty"`
	// When set to true, do not merge if the field already exists in the external entity.
	// For example: AWS GovCloud account RIs are discovered by both AWS Billing probe and AWS
	// probe. In AWS Billing probe, purchasingAccountId in ReservedInstanceData is defined as
	// ignoreIfPresent true. So when merging GovCloud RIs from AWS Billing probe to RIs from
	// AWS probe, purchasingAccountId from AWS Billing probe will overwrite only when the RI
	// from AWS probe doesn't have purchasingAccountId set.
	IgnoreIfPresent *bool `protobuf:"varint,3,opt,name=ignore_if_present,json=ignoreIfPresent,def=0" json:"ignore_if_present,omitempty"`
}

// Default values for MergedEntityMetadata_EntityField fields.
const (
	Default_MergedEntityMetadata_EntityField_IgnoreIfPresent = bool(false)
)

func (x *MergedEntityMetadata_EntityField) Reset() {
	*x = MergedEntityMetadata_EntityField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_EntityField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_EntityField) ProtoMessage() {}

func (x *MergedEntityMetadata_EntityField) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_EntityField.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_EntityField) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 3}
}

func (x *MergedEntityMetadata_EntityField) GetMessagePath() []string {
	if x != nil {
		return x.MessagePath
	}
	return nil
}

func (x *MergedEntityMetadata_EntityField) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *MergedEntityMetadata_EntityField) GetIgnoreIfPresent() bool {
	if x != nil && x.IgnoreIfPresent != nil {
		return *x.IgnoreIfPresent
	}
	return Default_MergedEntityMetadata_EntityField_IgnoreIfPresent
}

// Empty message representing the fact that TopologyEntity OID is used as the matching field.
type MergedEntityMetadata_EntityOid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergedEntityMetadata_EntityOid) Reset() {
	*x = MergedEntityMetadata_EntityOid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_EntityOid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_EntityOid) ProtoMessage() {}

func (x *MergedEntityMetadata_EntityOid) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_EntityOid.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_EntityOid) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 4}
}

type MergedEntityMetadata_CommodityBoughtMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType *EntityDTO_EntityType `protobuf:"varint,1,req,name=providerType,enum=common_dto.EntityDTO_EntityType" json:"providerType,omitempty"`
	// If specified, this provider will replace the provider of the replacesProvider EntityType
	// of the externalEntity
	ReplacesProvider  *EntityDTO_EntityType        `protobuf:"varint,2,opt,name=replacesProvider,enum=common_dto.EntityDTO_EntityType" json:"replacesProvider,omitempty"`
	CommodityMetadata []CommodityDTO_CommodityType `protobuf:"varint,3,rep,name=commodityMetadata,enum=common_dto.CommodityDTO_CommodityType" json:"commodityMetadata,omitempty"`
}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) Reset() {
	*x = MergedEntityMetadata_CommodityBoughtMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_CommodityBoughtMetadata) ProtoMessage() {}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_CommodityBoughtMetadata.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_CommodityBoughtMetadata) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 5}
}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) GetProviderType() EntityDTO_EntityType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return EntityDTO_SWITCH
}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) GetReplacesProvider() EntityDTO_EntityType {
	if x != nil && x.ReplacesProvider != nil {
		return *x.ReplacesProvider
	}
	return EntityDTO_SWITCH
}

func (x *MergedEntityMetadata_CommodityBoughtMetadata) GetCommodityMetadata() []CommodityDTO_CommodityType {
	if x != nil {
		return x.CommodityMetadata
	}
	return nil
}

type MergedEntityMetadata_CommoditySoldMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the sold commodity which should be merged during stitching
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	// do not merge if commodity of this type (ignoring key) already exists in the external
	// entity, this ONLY covers the case where it is a keyed commodity and the external entity
	// has the same commodity with a different key. It is used to ensure there is only one
	// commodity of this type on the final stitched entity.
	// For example: ACM probe discovers a proxy VM selling Application commodity with
	// key "key1", and VC probe discovers a real VM selling Application commodity with key
	// "key2" (the keys are different due to different info exposed in different probes),
	// we only want to keep one Application commodity after stitching. Probe writer can mark
	// this to be true so that the Application commodity from proxy VM is ignored
	IgnoreIfPresent *bool `protobuf:"varint,2,opt,name=ignore_if_present,json=ignoreIfPresent,def=0" json:"ignore_if_present,omitempty"`
	// if specified, it will only patch the provided fields, otherwise it will patch all.
	// For example: the "used" value is meaningful so it should be patched, but other fields
	// like "capacity" is less meaningful than that of the external entity
	PatchedFields []*MergedEntityMetadata_EntityField `protobuf:"bytes,3,rep,name=patched_fields,json=patchedFields" json:"patched_fields,omitempty"`
}

// Default values for MergedEntityMetadata_CommoditySoldMetadata fields.
const (
	Default_MergedEntityMetadata_CommoditySoldMetadata_IgnoreIfPresent = bool(false)
)

func (x *MergedEntityMetadata_CommoditySoldMetadata) Reset() {
	*x = MergedEntityMetadata_CommoditySoldMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_CommoditySoldMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_CommoditySoldMetadata) ProtoMessage() {}

func (x *MergedEntityMetadata_CommoditySoldMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_CommoditySoldMetadata.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_CommoditySoldMetadata) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 6}
}

func (x *MergedEntityMetadata_CommoditySoldMetadata) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *MergedEntityMetadata_CommoditySoldMetadata) GetIgnoreIfPresent() bool {
	if x != nil && x.IgnoreIfPresent != nil {
		return *x.IgnoreIfPresent
	}
	return Default_MergedEntityMetadata_CommoditySoldMetadata_IgnoreIfPresent
}

func (x *MergedEntityMetadata_CommoditySoldMetadata) GetPatchedFields() []*MergedEntityMetadata_EntityField {
	if x != nil {
		return x.PatchedFields
	}
	return nil
}

// Allows specification of scope for stitching.  If not specified we determine scope from
// stitching order defined in the topology processor.
type MergedEntityMetadata_StitchingScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// identifies the type of scope
	ScopeType *MergedEntityMetadata_StitchingScopeType `protobuf:"varint,1,opt,name=scope_type,json=scopeType,enum=common_dto.MergedEntityMetadata_StitchingScopeType" json:"scope_type,omitempty"`
	// lists parameters of the scope, if needed. For example, future scopes like PROBE_CATEGORY
	// would takes a list  of probe categories.
	ScopeParameters []string `protobuf:"bytes,2,rep,name=scope_parameters,json=scopeParameters" json:"scope_parameters,omitempty"`
}

func (x *MergedEntityMetadata_StitchingScope) Reset() {
	*x = MergedEntityMetadata_StitchingScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_SupplyChain_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergedEntityMetadata_StitchingScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergedEntityMetadata_StitchingScope) ProtoMessage() {}

func (x *MergedEntityMetadata_StitchingScope) ProtoReflect() protoreflect.Message {
	mi := &file_SupplyChain_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergedEntityMetadata_StitchingScope.ProtoReflect.Descriptor instead.
func (*MergedEntityMetadata_StitchingScope) Descriptor() ([]byte, []int) {
	return file_SupplyChain_proto_rawDescGZIP(), []int{4, 7}
}

func (x *MergedEntityMetadata_StitchingScope) GetScopeType() MergedEntityMetadata_StitchingScopeType {
	if x != nil && x.ScopeType != nil {
		return *x.ScopeType
	}
	return MergedEntityMetadata_PARENT
}

func (x *MergedEntityMetadata_StitchingScope) GetScopeParameters() []string {
	if x != nil {
		return x.ScopeParameters
	}
	return nil
}

var File_SupplyChain_proto protoreflect.FileDescriptor

var file_SupplyChain_proto_rawDesc = []byte{
	0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x1a,
	0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa7, 0x08, 0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f,
	0x12, 0x46, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x10, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53,
	0x6f, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x52, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x50,
	0x72, 0x6f, 0x70, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x59, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4f,
	0x72, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x14,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x69, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x4e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x42,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x1a, 0x9c, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0a, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0x82, 0x01, 0x0a,
	0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x27, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xcd, 0x02, 0x0a, 0x11, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x44, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x42, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x64, 0x42, 0x79, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x4d, 0x69, 0x6e, 0x22, 0x2d, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x01, 0x22, 0xdb, 0x06, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x66, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x68, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x12, 0x5f,
	0x0a, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70,
	0x44, 0x65, 0x66, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x73, 0x12,
	0x48, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x8c, 0x01, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0x49, 0x0a, 0x11, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x15, 0x0a, 0x14, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x11, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x0d,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x54, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53,
	0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x66, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x72,
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x6f,
	0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x6c,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x3a, 0x0d, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x52, 0x17, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x9a, 0x03, 0x0a, 0x10, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4f,
	0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x51, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x6b, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x75, 0x0a, 0x1e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x1a, 0xd7, 0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x5c, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x38, 0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x80, 0x01, 0x0a, 0x0b, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x49, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x0b, 0x0a,
	0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x69, 0x64, 0x1a, 0x83, 0x02, 0x0a, 0x17, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x10,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xee, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x6f,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x49, 0x66, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0e,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0x03, 0x22, 0x2d, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0x02, 0x18, 0x01, 0x22, 0x20, 0x0a, 0x12, 0x53, 0x74, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x42, 0x5c, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d, 0x74,
	0x75, 0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x74, 0x6f, 0x42, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75, 0x72,
	0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_SupplyChain_proto_rawDescOnce sync.Once
	file_SupplyChain_proto_rawDescData = file_SupplyChain_proto_rawDesc
)

func file_SupplyChain_proto_rawDescGZIP() []byte {
	file_SupplyChain_proto_rawDescOnce.Do(func() {
		file_SupplyChain_proto_rawDescData = protoimpl.X.CompressGZIP(file_SupplyChain_proto_rawDescData)
	})
	return file_SupplyChain_proto_rawDescData
}

var file_SupplyChain_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_SupplyChain_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_SupplyChain_proto_goTypes = []interface{}{
	(TemplateDTO_TemplateType)(0),                        // 0: common_dto.TemplateDTO.TemplateType
	(Provider_ProviderType)(0),                           // 1: common_dto.Provider.ProviderType
	(MergedEntityMetadata_MergePropertiesStrategy)(0),    // 2: common_dto.MergedEntityMetadata.MergePropertiesStrategy
	(MergedEntityMetadata_ReturnType)(0),                 // 3: common_dto.MergedEntityMetadata.ReturnType
	(MergedEntityMetadata_StitchingScopeType)(0),         // 4: common_dto.MergedEntityMetadata.StitchingScopeType
	(*TemplateDTO)(nil),                                  // 5: common_dto.TemplateDTO
	(*TemplateCommodity)(nil),                            // 6: common_dto.TemplateCommodity
	(*Provider)(nil),                                     // 7: common_dto.Provider
	(*ExternalEntityLink)(nil),                           // 8: common_dto.ExternalEntityLink
	(*MergedEntityMetadata)(nil),                         // 9: common_dto.MergedEntityMetadata
	(*TemplateDTO_CommBoughtProviderOrSet)(nil),          // 10: common_dto.TemplateDTO.CommBoughtProviderOrSet
	(*TemplateDTO_CommBoughtProviderProp)(nil),           // 11: common_dto.TemplateDTO.CommBoughtProviderProp
	(*TemplateDTO_ExternalEntityLinkProp)(nil),           // 12: common_dto.TemplateDTO.ExternalEntityLinkProp
	(*ExternalEntityLink_CommodityDef)(nil),              // 13: common_dto.ExternalEntityLink.CommodityDef
	(*ExternalEntityLink_EntityPropertyDef)(nil),         // 14: common_dto.ExternalEntityLink.EntityPropertyDef
	(*MergedEntityMetadata_MatchingMetadata)(nil),        // 15: common_dto.MergedEntityMetadata.MatchingMetadata
	(*MergedEntityMetadata_MatchingData)(nil),            // 16: common_dto.MergedEntityMetadata.MatchingData
	(*MergedEntityMetadata_EntityPropertyName)(nil),      // 17: common_dto.MergedEntityMetadata.EntityPropertyName
	(*MergedEntityMetadata_EntityField)(nil),             // 18: common_dto.MergedEntityMetadata.EntityField
	(*MergedEntityMetadata_EntityOid)(nil),               // 19: common_dto.MergedEntityMetadata.EntityOid
	(*MergedEntityMetadata_CommodityBoughtMetadata)(nil), // 20: common_dto.MergedEntityMetadata.CommodityBoughtMetadata
	(*MergedEntityMetadata_CommoditySoldMetadata)(nil),   // 21: common_dto.MergedEntityMetadata.CommoditySoldMetadata
	(*MergedEntityMetadata_StitchingScope)(nil),          // 22: common_dto.MergedEntityMetadata.StitchingScope
	(EntityDTO_EntityType)(0),                            // 23: common_dto.EntityDTO.EntityType
	(CommodityDTO_CommodityType)(0),                      // 24: common_dto.CommodityDTO.CommodityType
	(*ServerEntityPropDef)(nil),                          // 25: common_dto.ServerEntityPropDef
}
var file_SupplyChain_proto_depIdxs = []int32{
	23, // 0: common_dto.TemplateDTO.templateClass:type_name -> common_dto.EntityDTO.EntityType
	0,  // 1: common_dto.TemplateDTO.templateType:type_name -> common_dto.TemplateDTO.TemplateType
	6,  // 2: common_dto.TemplateDTO.commoditySold:type_name -> common_dto.TemplateCommodity
	11, // 3: common_dto.TemplateDTO.commodityBought:type_name -> common_dto.TemplateDTO.CommBoughtProviderProp
	12, // 4: common_dto.TemplateDTO.externalLink:type_name -> common_dto.TemplateDTO.ExternalEntityLinkProp
	10, // 5: common_dto.TemplateDTO.commBoughtOrSet:type_name -> common_dto.TemplateDTO.CommBoughtProviderOrSet
	9,  // 6: common_dto.TemplateDTO.mergedEntityMetaData:type_name -> common_dto.MergedEntityMetadata
	24, // 7: common_dto.TemplateCommodity.commodityType:type_name -> common_dto.CommodityDTO.CommodityType
	24, // 8: common_dto.TemplateCommodity.chargedBy:type_name -> common_dto.CommodityDTO.CommodityType
	24, // 9: common_dto.TemplateCommodity.chargedBySold:type_name -> common_dto.CommodityDTO.CommodityType
	23, // 10: common_dto.Provider.templateClass:type_name -> common_dto.EntityDTO.EntityType
	1,  // 11: common_dto.Provider.providerType:type_name -> common_dto.Provider.ProviderType
	23, // 12: common_dto.ExternalEntityLink.buyerRef:type_name -> common_dto.EntityDTO.EntityType
	23, // 13: common_dto.ExternalEntityLink.sellerRef:type_name -> common_dto.EntityDTO.EntityType
	1,  // 14: common_dto.ExternalEntityLink.relationship:type_name -> common_dto.Provider.ProviderType
	13, // 15: common_dto.ExternalEntityLink.commodityDefs:type_name -> common_dto.ExternalEntityLink.CommodityDef
	14, // 16: common_dto.ExternalEntityLink.probeEntityPropertyDef:type_name -> common_dto.ExternalEntityLink.EntityPropertyDef
	25, // 17: common_dto.ExternalEntityLink.externalEntityPropertyDefs:type_name -> common_dto.ServerEntityPropDef
	23, // 18: common_dto.ExternalEntityLink.replacesEntity:type_name -> common_dto.EntityDTO.EntityType
	15, // 19: common_dto.MergedEntityMetadata.matchingMetadata:type_name -> common_dto.MergedEntityMetadata.MatchingMetadata
	17, // 20: common_dto.MergedEntityMetadata.patchedProperties:type_name -> common_dto.MergedEntityMetadata.EntityPropertyName
	18, // 21: common_dto.MergedEntityMetadata.patchedFields:type_name -> common_dto.MergedEntityMetadata.EntityField
	24, // 22: common_dto.MergedEntityMetadata.commoditiesSold:type_name -> common_dto.CommodityDTO.CommodityType
	20, // 23: common_dto.MergedEntityMetadata.commoditiesBought:type_name -> common_dto.MergedEntityMetadata.CommodityBoughtMetadata
	21, // 24: common_dto.MergedEntityMetadata.commodities_sold_metadata:type_name -> common_dto.MergedEntityMetadata.CommoditySoldMetadata
	22, // 25: common_dto.MergedEntityMetadata.stitching_scope:type_name -> common_dto.MergedEntityMetadata.StitchingScope
	2,  // 26: common_dto.MergedEntityMetadata.merge_properties_strategy:type_name -> common_dto.MergedEntityMetadata.MergePropertiesStrategy
	11, // 27: common_dto.TemplateDTO.CommBoughtProviderOrSet.commBought:type_name -> common_dto.TemplateDTO.CommBoughtProviderProp
	7,  // 28: common_dto.TemplateDTO.CommBoughtProviderProp.key:type_name -> common_dto.Provider
	6,  // 29: common_dto.TemplateDTO.CommBoughtProviderProp.value:type_name -> common_dto.TemplateCommodity
	23, // 30: common_dto.TemplateDTO.ExternalEntityLinkProp.key:type_name -> common_dto.EntityDTO.EntityType
	8,  // 31: common_dto.TemplateDTO.ExternalEntityLinkProp.value:type_name -> common_dto.ExternalEntityLink
	24, // 32: common_dto.ExternalEntityLink.CommodityDef.type:type_name -> common_dto.CommodityDTO.CommodityType
	3,  // 33: common_dto.MergedEntityMetadata.MatchingMetadata.returnType:type_name -> common_dto.MergedEntityMetadata.ReturnType
	16, // 34: common_dto.MergedEntityMetadata.MatchingMetadata.matchingData:type_name -> common_dto.MergedEntityMetadata.MatchingData
	3,  // 35: common_dto.MergedEntityMetadata.MatchingMetadata.externalEntityReturnType:type_name -> common_dto.MergedEntityMetadata.ReturnType
	16, // 36: common_dto.MergedEntityMetadata.MatchingMetadata.externalEntityMatchingProperty:type_name -> common_dto.MergedEntityMetadata.MatchingData
	17, // 37: common_dto.MergedEntityMetadata.MatchingData.matching_property:type_name -> common_dto.MergedEntityMetadata.EntityPropertyName
	18, // 38: common_dto.MergedEntityMetadata.MatchingData.matching_field:type_name -> common_dto.MergedEntityMetadata.EntityField
	19, // 39: common_dto.MergedEntityMetadata.MatchingData.matching_entity_oid:type_name -> common_dto.MergedEntityMetadata.EntityOid
	23, // 40: common_dto.MergedEntityMetadata.CommodityBoughtMetadata.providerType:type_name -> common_dto.EntityDTO.EntityType
	23, // 41: common_dto.MergedEntityMetadata.CommodityBoughtMetadata.replacesProvider:type_name -> common_dto.EntityDTO.EntityType
	24, // 42: common_dto.MergedEntityMetadata.CommodityBoughtMetadata.commodityMetadata:type_name -> common_dto.CommodityDTO.CommodityType
	24, // 43: common_dto.MergedEntityMetadata.CommoditySoldMetadata.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	18, // 44: common_dto.MergedEntityMetadata.CommoditySoldMetadata.patched_fields:type_name -> common_dto.MergedEntityMetadata.EntityField
	4,  // 45: common_dto.MergedEntityMetadata.StitchingScope.scope_type:type_name -> common_dto.MergedEntityMetadata.StitchingScopeType
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_SupplyChain_proto_init() }
func file_SupplyChain_proto_init() {
	if File_SupplyChain_proto != nil {
		return
	}
	file_CommonDTO_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_SupplyChain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateCommodity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEntityLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDTO_CommBoughtProviderOrSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDTO_CommBoughtProviderProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateDTO_ExternalEntityLinkProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEntityLink_CommodityDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalEntityLink_EntityPropertyDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_MatchingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_MatchingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_EntityPropertyName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_EntityField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_EntityOid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_CommodityBoughtMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_CommoditySoldMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_SupplyChain_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergedEntityMetadata_StitchingScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_SupplyChain_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*MergedEntityMetadata_MatchingData_MatchingProperty)(nil),
		(*MergedEntityMetadata_MatchingData_MatchingField)(nil),
		(*MergedEntityMetadata_MatchingData_MatchingEntityOid)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_SupplyChain_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_SupplyChain_proto_goTypes,
		DependencyIndexes: file_SupplyChain_proto_depIdxs,
		EnumInfos:         file_SupplyChain_proto_enumTypes,
		MessageInfos:      file_SupplyChain_proto_msgTypes,
	}.Build()
	File_SupplyChain_proto = out.File
	file_SupplyChain_proto_rawDesc = nil
	file_SupplyChain_proto_goTypes = nil
	file_SupplyChain_proto_depIdxs = nil
}
