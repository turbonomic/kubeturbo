// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: PricingDTO.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The unit for the price.
// The unit affects how to use the price to calculate the cost for an entity,
// and is also useful when displaying information for UI purposes.
//
// TODO (roman, Jul 31 2018): Not all units are relevant for all types of cloud entities.
// In the future it may be worth it to have each type of cloud entity have its own unit,
// to avoid confusion.
type Price_Unit int32

const (
	// The price is calculated on an hourly basis.
	// One unit = one hour.
	Price_HOURS Price_Unit = 1
	// The price is calculated on a daily basis.
	// One unit = one day.
	Price_DAYS Price_Unit = 2
	// The price is calculated on a monthly basis.
	// One unit = one month.
	Price_MONTH Price_Unit = 3
	// The price is a total one-time cost.
	Price_TOTAL Price_Unit = 10
	// The price is calculated on a per-IOPS rate.
	// One unit = one million iops.
	Price_MILLION_IOPS Price_Unit = 20
	// The price is calculated on a GB-month.
	// One unit = one GB-month.
	// A GB-month is gigabytes averaged over the month. For example, if you store 30 GB
	// for 15 days of a 30-day month, that would add up to 15 GB-month.
	Price_GB_MONTH Price_Unit = 21
	// The price is calculated on a per-MiB/s of throughput basis per month.
	// One unit = one month of 1 MiB/s throughput.
	Price_MBPS_MONTH Price_Unit = 22
	// The price is calculate based on the number of I/O requests.
	// This is currently used by AWS Magnetic (Standard) storage tier.
	Price_IO_REQUESTS Price_Unit = 23
)

// Enum value maps for Price_Unit.
var (
	Price_Unit_name = map[int32]string{
		1:  "HOURS",
		2:  "DAYS",
		3:  "MONTH",
		10: "TOTAL",
		20: "MILLION_IOPS",
		21: "GB_MONTH",
		22: "MBPS_MONTH",
		23: "IO_REQUESTS",
	}
	Price_Unit_value = map[string]int32{
		"HOURS":        1,
		"DAYS":         2,
		"MONTH":        3,
		"TOTAL":        10,
		"MILLION_IOPS": 20,
		"GB_MONTH":     21,
		"MBPS_MONTH":   22,
		"IO_REQUESTS":  23,
	}
)

func (x Price_Unit) Enum() *Price_Unit {
	p := new(Price_Unit)
	*p = x
	return p
}

func (x Price_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Price_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_PricingDTO_proto_enumTypes[0].Descriptor()
}

func (Price_Unit) Type() protoreflect.EnumType {
	return &file_PricingDTO_proto_enumTypes[0]
}

func (x Price_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Price_Unit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Price_Unit(num)
	return nil
}

// Deprecated: Use Price_Unit.Descriptor instead.
func (Price_Unit) EnumDescriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{8, 0}
}

// The list of prices for a particular compute tier. In the cloud, a compute tier is
// the seller of CPU/memory (but not storage) to a VM. It is commonly referred to as an
// "instance" (e.g. Compute Instance in AWS). We use the tier terminology to be consistent
// across compute and storage, and because you can think of the compute instances as
// different available "tiers" of the Compute service.
//
// A single compute tier may have different available prices depending on other
// configuration option (for example, whether it's shared or a dedicated).
type ComputeTierPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base price is the price of the default - and usually cheapest - configuration.
	// For example, in AWS this would be a shared Linux machine (which has no extra license
	// or tenancy costs).
	BasePrice *ComputeTierPriceList_ComputeTierConfigPrice `protobuf:"bytes,1,opt,name=base_price,json=basePrice" json:"base_price,omitempty"`
	// There are the other configurations available for the tier, and the
	// prices for those configurations ON TOP of the base price. We track it this way
	// so that we can easily separate the compute cost from the license/tenancy cost.
	//
	// For example, if the base price is for a Linux machine that costs $1/hr, and a Windows OS
	// machine costs $1.50/hr, there would be a price adjustment for a Windows OS with price
	// "0.50/hr". To get the full price for a Windows insance you would need to find the
	// appropriate price adjustment, and add it to the base price.
	//
	// The configuration from the base price should not appear in this list.
	PerConfigurationPriceAdjustments []*ComputeTierPriceList_ComputeTierConfigPrice `protobuf:"bytes,2,rep,name=per_configuration_price_adjustments,json=perConfigurationPriceAdjustments" json:"per_configuration_price_adjustments,omitempty"`
}

func (x *ComputeTierPriceList) Reset() {
	*x = ComputeTierPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeTierPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeTierPriceList) ProtoMessage() {}

func (x *ComputeTierPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeTierPriceList.ProtoReflect.Descriptor instead.
func (*ComputeTierPriceList) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{0}
}

func (x *ComputeTierPriceList) GetBasePrice() *ComputeTierPriceList_ComputeTierConfigPrice {
	if x != nil {
		return x.BasePrice
	}
	return nil
}

func (x *ComputeTierPriceList) GetPerConfigurationPriceAdjustments() []*ComputeTierPriceList_ComputeTierConfigPrice {
	if x != nil {
		return x.PerConfigurationPriceAdjustments
	}
	return nil
}

// The price for a particular configuration of a database tier.
type DatabaseTierConfigPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database engine to use for this configuration of the tier.
	// Should be set.
	DbEngine *DatabaseEngine `protobuf:"varint,1,opt,name=db_engine,json=dbEngine,enum=common_dto.DatabaseEngine" json:"db_engine,omitempty"`
	// The edition of the engine to use for this configuration of the tier. Not to be confused
	// with "version", which doesn't affect the price.
	//
	// May be unset, because open-source database engines often don't have editions.
	DbEdition *DatabaseEdition `protobuf:"varint,2,opt,name=db_edition,json=dbEdition,enum=common_dto.DatabaseEdition" json:"db_edition,omitempty"`
	// LicenseModel describes all supported license models in cloud projects.
	DbLicenseModel *LicenseModel `protobuf:"varint,3,opt,name=db_license_model,json=dbLicenseModel,enum=common_dto.LicenseModel" json:"db_license_model,omitempty"`
	// // DeploymentType describes all supported deployment types by cloud probes.
	DbDeploymentType *DeploymentType `protobuf:"varint,4,opt,name=db_deployment_type,json=dbDeploymentType,enum=common_dto.DeploymentType" json:"db_deployment_type,omitempty"`
	// The available prices for this configuration of the database tier.
	// There may be different prices (e.g. an hourly price and a monthly price).
	Prices []*Price `protobuf:"bytes,20,rep,name=prices" json:"prices,omitempty"`
}

func (x *DatabaseTierConfigPrice) Reset() {
	*x = DatabaseTierConfigPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseTierConfigPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseTierConfigPrice) ProtoMessage() {}

func (x *DatabaseTierConfigPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseTierConfigPrice.ProtoReflect.Descriptor instead.
func (*DatabaseTierConfigPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseTierConfigPrice) GetDbEngine() DatabaseEngine {
	if x != nil && x.DbEngine != nil {
		return *x.DbEngine
	}
	return DatabaseEngine_UNKNOWN
}

func (x *DatabaseTierConfigPrice) GetDbEdition() DatabaseEdition {
	if x != nil && x.DbEdition != nil {
		return *x.DbEdition
	}
	return DatabaseEdition_NONE
}

func (x *DatabaseTierConfigPrice) GetDbLicenseModel() LicenseModel {
	if x != nil && x.DbLicenseModel != nil {
		return *x.DbLicenseModel
	}
	return LicenseModel_BRING_YOUR_OWN_LICENSE
}

func (x *DatabaseTierConfigPrice) GetDbDeploymentType() DeploymentType {
	if x != nil && x.DbDeploymentType != nil {
		return *x.DbDeploymentType
	}
	return DeploymentType_SINGLE_AZ
}

func (x *DatabaseTierConfigPrice) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

// The list of prices for a particular database tier. In the cloud, a database tier is
// a managed database solution (e.g. RDS in AWS). It is commonly referred to as an
// "instance" (e.g. Database Instance in AWS). We use the tier terminology to be consistent
// with compute and storage, and because you can think of the database instances as
// different available "tiers" of databases.
//
// A single database tier may have different available prices depending on other
// configuration options (for example, the database engine).
type DatabaseTierPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base price is the price of the default - and usually cheapest - configuration.
	// For example, in AWS this would be a shared Linux machine (which has no extra license
	// or tenancy costs).
	BasePrice *DatabaseTierConfigPrice `protobuf:"bytes,1,opt,name=base_price,json=basePrice" json:"base_price,omitempty"`
	// There are the other configurations available for the database instance, and the
	// prices for those configurations ON TOP of the base price. We track it this way
	// so that we can easily separate the compute cost from the license/tenancy cost.
	//
	// For example, if the base price is for a PostgreSQL machine that costs $1/hr, and an Oracle
	// machine costs $1.50/hr, there would be a price adjustment for Oracle with price
	// "0.50/hr". To get the full price for an Oracle instance you would need to find the
	// appropriate price adjustment, and add it to the base price.
	//
	// The configuration from the base price should not appear in this list.
	ConfigurationPriceAdjustments []*DatabaseTierConfigPrice `protobuf:"bytes,2,rep,name=configuration_price_adjustments,json=configurationPriceAdjustments" json:"configuration_price_adjustments,omitempty"`
	// different deployment types has different costs
	DeploymentType *DeploymentType `protobuf:"varint,3,opt,name=deployment_type,json=deploymentType,enum=common_dto.DeploymentType" json:"deployment_type,omitempty"`
	// List of DB storage prices.
	DependentPrices []*Price `protobuf:"bytes,4,rep,name=dependent_prices,json=dependentPrices" json:"dependent_prices,omitempty"`
}

func (x *DatabaseTierPriceList) Reset() {
	*x = DatabaseTierPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseTierPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseTierPriceList) ProtoMessage() {}

func (x *DatabaseTierPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseTierPriceList.ProtoReflect.Descriptor instead.
func (*DatabaseTierPriceList) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseTierPriceList) GetBasePrice() *DatabaseTierConfigPrice {
	if x != nil {
		return x.BasePrice
	}
	return nil
}

func (x *DatabaseTierPriceList) GetConfigurationPriceAdjustments() []*DatabaseTierConfigPrice {
	if x != nil {
		return x.ConfigurationPriceAdjustments
	}
	return nil
}

func (x *DatabaseTierPriceList) GetDeploymentType() DeploymentType {
	if x != nil && x.DeploymentType != nil {
		return *x.DeploymentType
	}
	return DeploymentType_SINGLE_AZ
}

func (x *DatabaseTierPriceList) GetDependentPrices() []*Price {
	if x != nil {
		return x.DependentPrices
	}
	return nil
}

type ResourceRatioDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseResourceType      *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=base_resource_type,json=baseResourceType,enum=common_dto.CommodityDTO_CommodityType" json:"base_resource_type,omitempty"`
	DependentResourceType *CommodityDTO_CommodityType `protobuf:"varint,2,opt,name=dependent_resource_type,json=dependentResourceType,enum=common_dto.CommodityDTO_CommodityType" json:"dependent_resource_type,omitempty"`
	MaxRatio              *float64                    `protobuf:"fixed64,3,opt,name=max_ratio,json=maxRatio" json:"max_ratio,omitempty"`
	MinRatio              *float64                    `protobuf:"fixed64,4,opt,name=min_ratio,json=minRatio" json:"min_ratio,omitempty"`
}

func (x *ResourceRatioDependency) Reset() {
	*x = ResourceRatioDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRatioDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRatioDependency) ProtoMessage() {}

func (x *ResourceRatioDependency) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRatioDependency.ProtoReflect.Descriptor instead.
func (*ResourceRatioDependency) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceRatioDependency) GetBaseResourceType() CommodityDTO_CommodityType {
	if x != nil && x.BaseResourceType != nil {
		return *x.BaseResourceType
	}
	return CommodityDTO_CLUSTER
}

func (x *ResourceRatioDependency) GetDependentResourceType() CommodityDTO_CommodityType {
	if x != nil && x.DependentResourceType != nil {
		return *x.DependentResourceType
	}
	return CommodityDTO_CLUSTER
}

func (x *ResourceRatioDependency) GetMaxRatio() float64 {
	if x != nil && x.MaxRatio != nil {
		return *x.MaxRatio
	}
	return 0
}

func (x *ResourceRatioDependency) GetMinRatio() float64 {
	if x != nil && x.MinRatio != nil {
		return *x.MinRatio
	}
	return 0
}

// The list of prices for a given DatabaseServer. Each DBS has an associated collection of
// DatabaseServerTierConfigPrice objects that identify the pricing associated with a unique DBS
// instanceType, along wiht a collection of dependentPrices associated with all possible storage
// options for the tier. These prices correspond to storageAmount and IOPS for the various
// combinations of dbEngine, dbEdition, deploymentType, and licenseModel permuted with each
// storage tier option (currently standard, gp2, io1).
type DatabaseServerTierPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigPrices []*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice `protobuf:"bytes,1,rep,name=config_prices,json=configPrices" json:"config_prices,omitempty"`
}

func (x *DatabaseServerTierPriceList) Reset() {
	*x = DatabaseServerTierPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseServerTierPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseServerTierPriceList) ProtoMessage() {}

func (x *DatabaseServerTierPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseServerTierPriceList.ProtoReflect.Descriptor instead.
func (*DatabaseServerTierPriceList) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{4}
}

func (x *DatabaseServerTierPriceList) GetConfigPrices() []*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice {
	if x != nil {
		return x.ConfigPrices
	}
	return nil
}

// The list of prices for a particular IP.
//
// TODO (roman, July 31 2018): It's unclear at the time of this writing what different kinds
// of IPs are available within a region, and whether this model is the best way to represent
// them.
//
// Also, the cost probes currently (July 31 2018) use the same name for all IP Addresses,
// meaning there will only be one IpPriceList per region if we dedupe based on name alone.
//
// However, in AWS there are different IP Address entries within a region. These have different
// group types - charges for IP remaps, charges for IPs attached to a running instance,
// charges for IPs NOT attached to a running instance - represented by different product SKU's.
// Right now the IP Price List is not flexible enough to express all of those options.
type IpPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of IP prices.
	IpPrice []*IpPriceList_IpConfigPrice `protobuf:"bytes,1,rep,name=ip_price,json=ipPrice" json:"ip_price,omitempty"`
}

func (x *IpPriceList) Reset() {
	*x = IpPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPriceList) ProtoMessage() {}

func (x *IpPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPriceList.ProtoReflect.Descriptor instead.
func (*IpPriceList) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{5}
}

func (x *IpPriceList) GetIpPrice() []*IpPriceList_IpConfigPrice {
	if x != nil {
		return x.IpPrice
	}
	return nil
}

// The list of storage prices for a particular cloud storage tier.
type StorageTierPriceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of prices.
	//
	// Note: Right now this could be replaced by "repeated Price", but using an extra
	// wrapper is more consistent with the other price lists, and more easily extensible
	// later down the road.
	CloudStoragePrice []*StorageTierPriceList_StorageTierPrice `protobuf:"bytes,1,rep,name=cloud_storage_price,json=cloudStoragePrice" json:"cloud_storage_price,omitempty"`
}

func (x *StorageTierPriceList) Reset() {
	*x = StorageTierPriceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageTierPriceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageTierPriceList) ProtoMessage() {}

func (x *StorageTierPriceList) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageTierPriceList.ProtoReflect.Descriptor instead.
func (*StorageTierPriceList) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{6}
}

func (x *StorageTierPriceList) GetCloudStoragePrice() []*StorageTierPriceList_StorageTierPrice {
	if x != nil {
		return x.CloudStoragePrice
	}
	return nil
}

// The pricing for reserved instances.
//
// Reserved instances are basically discounted on-demand instances with
// an upfront cost and a term. So instead of paying on-demand, you buy
// "in bulk".
//
// Note: AWS and Azure have reserved instance, and Google has a similar
// concept called "Committed Use Discounts".
type ReservedInstancePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total upfront price. May not be set if the payment option for the reserved
	// instance is NO_UPFRONT.
	//
	// TODO (roman, July 31 2019): This may need to be a list, to allow
	// different pricing options. For example, a different hourly vs monthly price.
	UpfrontPrice *Price `protobuf:"bytes,10,opt,name=upfront_price,json=upfrontPrice" json:"upfront_price,omitempty"`
	// The recurring price. This is the amount you have to pay regularly for the instance.
	//
	// TODO (roman, July 31 2019): This may need to be a list, to allow
	// different pricing options. For example, a different hourly vs monthly price.
	RecurringPrice *Price `protobuf:"bytes,11,opt,name=recurring_price,json=recurringPrice" json:"recurring_price,omitempty"`
	// This captures other costs for using the instance - for example, license costs.
	// May not be set, depending on the instance configuration (e.g. a Linux instance
	// will have no license costs).
	//
	// TODO (roman, July 31 2019): This may need to be a list, to allow
	// different pricing options. For example, a different hourly vs monthly price.
	UsagePrice *Price `protobuf:"bytes,12,opt,name=usage_price,json=usagePrice" json:"usage_price,omitempty"`
}

func (x *ReservedInstancePrice) Reset() {
	*x = ReservedInstancePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReservedInstancePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReservedInstancePrice) ProtoMessage() {}

func (x *ReservedInstancePrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReservedInstancePrice.ProtoReflect.Descriptor instead.
func (*ReservedInstancePrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{7}
}

func (x *ReservedInstancePrice) GetUpfrontPrice() *Price {
	if x != nil {
		return x.UpfrontPrice
	}
	return nil
}

func (x *ReservedInstancePrice) GetRecurringPrice() *Price {
	if x != nil {
		return x.RecurringPrice
	}
	return nil
}

func (x *ReservedInstancePrice) GetUsagePrice() *Price {
	if x != nil {
		return x.UsagePrice
	}
	return nil
}

// The price of a particular instance or cloud entity.
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unit in which the price is measured.
	// Not all units are valid for all types of cloud entities.
	Unit *Price_Unit `protobuf:"varint,1,opt,name=unit,enum=common_dto.Price_Unit" json:"unit,omitempty"`
	// The end range - in units. If not set, assume "infinite".
	// For example, if the price is $0 for the first 10 X, and $10 for the next 10 X, then
	// there should be two Prices, with an end_range of 10 for the first one, and
	// an end_range of 20 for the second. The end is inclusive.
	EndRangeInUnits *int64 `protobuf:"varint,6,opt,name=end_range_in_units,json=endRangeInUnits" json:"end_range_in_units,omitempty"`
	// This field defines increments allowed till the end_range_in_units is reached.
	// eg: if end_range_in_units = 500 and incrementInterval = 100, the allowed sizes are 100, 200, 300, 400, 500;
	IncrementInterval *int64          `protobuf:"varint,7,opt,name=increment_interval,json=incrementInterval" json:"increment_interval,omitempty"`
	PriceAmount       *CurrencyAmount `protobuf:"bytes,22,opt,name=price_amount,json=priceAmount" json:"price_amount,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{8}
}

func (x *Price) GetUnit() Price_Unit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return Price_HOURS
}

func (x *Price) GetEndRangeInUnits() int64 {
	if x != nil && x.EndRangeInUnits != nil {
		return *x.EndRangeInUnits
	}
	return 0
}

func (x *Price) GetIncrementInterval() int64 {
	if x != nil && x.IncrementInterval != nil {
		return *x.IncrementInterval
	}
	return 0
}

func (x *Price) GetPriceAmount() *CurrencyAmount {
	if x != nil {
		return x.PriceAmount
	}
	return nil
}

// A price based on the bought commodity quantity of a consumer.
type ConsumerCommodityPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	// The conversion factor from the bought quantity to the pricing unit, in which the
	// ammount contained within `price` represents the cost of a single whole pricing unit.
	PricingConversionFactor *float64 `protobuf:"fixed64,2,opt,name=pricing_conversion_factor,json=pricingConversionFactor,def=1" json:"pricing_conversion_factor,omitempty"`
	// The price of the commodity per whole unit bought. Note that currently the price unit and
	// bought commodity unit are expected to be the same.
	Price *Price `protobuf:"bytes,100,opt,name=price" json:"price,omitempty"`
}

// Default values for ConsumerCommodityPrice fields.
const (
	Default_ConsumerCommodityPrice_PricingConversionFactor = float64(1)
)

func (x *ConsumerCommodityPrice) Reset() {
	*x = ConsumerCommodityPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerCommodityPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerCommodityPrice) ProtoMessage() {}

func (x *ConsumerCommodityPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerCommodityPrice.ProtoReflect.Descriptor instead.
func (*ConsumerCommodityPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{9}
}

func (x *ConsumerCommodityPrice) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *ConsumerCommodityPrice) GetPricingConversionFactor() float64 {
	if x != nil && x.PricingConversionFactor != nil {
		return *x.PricingConversionFactor
	}
	return Default_ConsumerCommodityPrice_PricingConversionFactor
}

func (x *ConsumerCommodityPrice) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

// The prices for license related to a specific operating system
type LicensePriceEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The operating system which the license is associated with
	OsType *OSType `protobuf:"varint,1,opt,name=os_type,json=osType,enum=common_dto.OSType" json:"os_type,omitempty"`
	// The list of prices associated with licensing a particular Operating System.
	// Not all cloud providers have license price lists. In particular, Azure does and AWS doesn't.
	// In Azure, license is priced by the number of cores the vm it applies to is using.
	LicensePrices []*LicensePriceEntry_LicensePrice `protobuf:"bytes,2,rep,name=license_prices,json=licensePrices" json:"license_prices,omitempty"`
	//To distinguish burstable and non-burstable license rates.
	BurstableCPU *bool   `protobuf:"varint,3,opt,name=burstableCPU" json:"burstableCPU,omitempty"`
	BaseOsType   *OSType `protobuf:"varint,4,opt,name=base_os_type,json=baseOsType,enum=common_dto.OSType" json:"base_os_type,omitempty"`
}

func (x *LicensePriceEntry) Reset() {
	*x = LicensePriceEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensePriceEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensePriceEntry) ProtoMessage() {}

func (x *LicensePriceEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensePriceEntry.ProtoReflect.Descriptor instead.
func (*LicensePriceEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{10}
}

func (x *LicensePriceEntry) GetOsType() OSType {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return OSType_UNKNOWN_OS
}

func (x *LicensePriceEntry) GetLicensePrices() []*LicensePriceEntry_LicensePrice {
	if x != nil {
		return x.LicensePrices
	}
	return nil
}

func (x *LicensePriceEntry) GetBurstableCPU() bool {
	if x != nil && x.BurstableCPU != nil {
		return *x.BurstableCPU
	}
	return false
}

func (x *LicensePriceEntry) GetBaseOsType() OSType {
	if x != nil && x.BaseOsType != nil {
		return *x.BaseOsType
	}
	return OSType_UNKNOWN_OS
}

// A license override changes part of the license cost lookup (or rate itself) for
// sizes with custom license prices. In the case of Azure core constrained sizes, the override
// indicates each of the core constrained sizes should be priced based on a different number of
// cores than the size actually provides.
type LicenseOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsType        *OSType                               `protobuf:"varint,1,opt,name=os_type,json=osType,enum=common_dto.OSType" json:"os_type,omitempty"`
	OverrideValue *LicenseOverride_LicenseOverrideValue `protobuf:"bytes,2,opt,name=override_value,json=overrideValue" json:"override_value,omitempty"`
}

func (x *LicenseOverride) Reset() {
	*x = LicenseOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseOverride) ProtoMessage() {}

func (x *LicenseOverride) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseOverride.ProtoReflect.Descriptor instead.
func (*LicenseOverride) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{11}
}

func (x *LicenseOverride) GetOsType() OSType {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return OSType_UNKNOWN_OS
}

func (x *LicenseOverride) GetOverrideValue() *LicenseOverride_LicenseOverrideValue {
	if x != nil {
		return x.OverrideValue
	}
	return nil
}

type LicenseOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseOverride []*LicenseOverride `protobuf:"bytes,1,rep,name=license_override,json=licenseOverride" json:"license_override,omitempty"`
}

func (x *LicenseOverrides) Reset() {
	*x = LicenseOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseOverrides) ProtoMessage() {}

func (x *LicenseOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseOverrides.ProtoReflect.Descriptor instead.
func (*LicenseOverrides) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{12}
}

func (x *LicenseOverrides) GetLicenseOverride() []*LicenseOverride {
	if x != nil {
		return x.LicenseOverride
	}
	return nil
}

// The price table object contains the pricing information related to a specific cloud provider.
// The cloud provider has pricing for different products and offerings. This means that price for
// different services on the same cloud provider will be all merged together in this object (EC2,
// RDS, ..)
type PriceTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the price table retrieved from the cloud provider.
	// The version can come directly from the cloud provider itself (AWS has a version in its own
	// pricing, like: "version" : "20180809215656")
	// If the cloud provider is not providing a version directly, then the probe needs to generate one
	// on its own.
	// This field will be used by the server side to understand if the price table sent from probe
	// to server is the same one that the server already has. If the version that the server is
	// receiving is the same one that he already processed before, he is free to discard the data.
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Information used to uniquely associate this price table with a business account.
	PriceTableKeys []*PricingIdentifier `protobuf:"bytes,8,rep,name=price_table_keys,json=priceTableKeys" json:"price_table_keys,omitempty"`
	// Price table for on-demand instances. this is the "default" pay-per-use option for all cloud
	// providers.
	OnDemandPriceTable []*PriceTable_OnDemandPriceTableByRegionEntry `protobuf:"bytes,2,rep,name=on_demand_price_table,json=onDemandPriceTable" json:"on_demand_price_table,omitempty"`
	SpotPriceTable     []*PriceTable_SpotPriceByRegionEntry          `protobuf:"bytes,4,rep,name=spot_price_table,json=spotPriceTable" json:"spot_price_table,omitempty"`
	// RI price table
	ReservedInstancePriceTable []*PriceTable_ReservedInstancePriceTableByRegionEntry `protobuf:"bytes,5,rep,name=reserved_instance_price_table,json=reservedInstancePriceTable" json:"reserved_instance_price_table,omitempty"`
	// On-Demand License price table by Os type. A table entry represents the list of prices associated
	// with licensing a particular Operating System.
	OnDemandLicensePriceTable []*LicensePriceEntry `protobuf:"bytes,6,rep,name=on_demand_license_price_table,json=onDemandLicensePriceTable" json:"on_demand_license_price_table,omitempty"`
	// Reserved License price table by OS type
	ReservedLicensePriceTable []*LicensePriceEntry `protobuf:"bytes,7,rep,name=reserved_license_price_table,json=reservedLicensePriceTable" json:"reserved_license_price_table,omitempty"`
	// The service provider id of the pricing info.
	ServiceProviderId *string `protobuf:"bytes,9,opt,name=serviceProviderId" json:"serviceProviderId,omitempty"`
	// The license overrides used in resolving license prices from on_demand_license_price_table
	OnDemandLicenseOverrides map[string]*LicenseOverrides `protobuf:"bytes,10,rep,name=on_demand_license_overrides,json=onDemandLicenseOverrides" json:"on_demand_license_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The license overrides used in resolving license prices from reserved_license_price_table
	ReservedLicenseOverrides map[string]*LicenseOverrides `protobuf:"bytes,11,rep,name=reserved_license_overrides,json=reservedLicenseOverrides" json:"reserved_license_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *PriceTable) Reset() {
	*x = PriceTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable) ProtoMessage() {}

func (x *PriceTable) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable.ProtoReflect.Descriptor instead.
func (*PriceTable) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13}
}

func (x *PriceTable) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *PriceTable) GetPriceTableKeys() []*PricingIdentifier {
	if x != nil {
		return x.PriceTableKeys
	}
	return nil
}

func (x *PriceTable) GetOnDemandPriceTable() []*PriceTable_OnDemandPriceTableByRegionEntry {
	if x != nil {
		return x.OnDemandPriceTable
	}
	return nil
}

func (x *PriceTable) GetSpotPriceTable() []*PriceTable_SpotPriceByRegionEntry {
	if x != nil {
		return x.SpotPriceTable
	}
	return nil
}

func (x *PriceTable) GetReservedInstancePriceTable() []*PriceTable_ReservedInstancePriceTableByRegionEntry {
	if x != nil {
		return x.ReservedInstancePriceTable
	}
	return nil
}

func (x *PriceTable) GetOnDemandLicensePriceTable() []*LicensePriceEntry {
	if x != nil {
		return x.OnDemandLicensePriceTable
	}
	return nil
}

func (x *PriceTable) GetReservedLicensePriceTable() []*LicensePriceEntry {
	if x != nil {
		return x.ReservedLicensePriceTable
	}
	return nil
}

func (x *PriceTable) GetServiceProviderId() string {
	if x != nil && x.ServiceProviderId != nil {
		return *x.ServiceProviderId
	}
	return ""
}

func (x *PriceTable) GetOnDemandLicenseOverrides() map[string]*LicenseOverrides {
	if x != nil {
		return x.OnDemandLicenseOverrides
	}
	return nil
}

func (x *PriceTable) GetReservedLicenseOverrides() map[string]*LicenseOverrides {
	if x != nil {
		return x.ReservedLicenseOverrides
	}
	return nil
}

// The price for a particular configuration of a compute tier.
type ComputeTierPriceList_ComputeTierConfigPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The guest operating system.
	GuestOsType *OSType `protobuf:"varint,1,opt,name=guest_os_type,json=guestOsType,enum=common_dto.OSType" json:"guest_os_type,omitempty"`
	// The tenancy for this configuration of the tier.
	// A single tier may have different tenancy options that will be priced differently
	// (e.g. dedicated tenancy is more expensive than shared).
	Tenancy *Tenancy `protobuf:"varint,2,opt,name=tenancy,enum=common_dto.Tenancy" json:"tenancy,omitempty"`
	// The available prices for this configuration of the tier. There may be multiple
	// prices (e.g. an hourly price and a monthly price).
	Prices                  []*Price                  `protobuf:"bytes,10,rep,name=prices" json:"prices,omitempty"`
	ConsumerCommodityPrices []*ConsumerCommodityPrice `protobuf:"bytes,11,rep,name=consumer_commodity_prices,json=consumerCommodityPrices" json:"consumer_commodity_prices,omitempty"`
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) Reset() {
	*x = ComputeTierPriceList_ComputeTierConfigPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeTierPriceList_ComputeTierConfigPrice) ProtoMessage() {}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeTierPriceList_ComputeTierConfigPrice.ProtoReflect.Descriptor instead.
func (*ComputeTierPriceList_ComputeTierConfigPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) GetGuestOsType() OSType {
	if x != nil && x.GuestOsType != nil {
		return *x.GuestOsType
	}
	return OSType_UNKNOWN_OS
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) GetTenancy() Tenancy {
	if x != nil && x.Tenancy != nil {
		return *x.Tenancy
	}
	return Tenancy_DEFAULT
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *ComputeTierPriceList_ComputeTierConfigPrice) GetConsumerCommodityPrices() []*ConsumerCommodityPrice {
	if x != nil {
		return x.ConsumerCommodityPrices
	}
	return nil
}

type DatabaseServerTierPriceList_DatabaseServerTierConfigPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The price of a specific database configuration
	DatabaseTierConfigPrice *DatabaseTierConfigPrice `protobuf:"bytes,1,opt,name=database_tier_config_price,json=databaseTierConfigPrice" json:"database_tier_config_price,omitempty"`
	// List of DB storage prices.
	DependentPrices []*Price                   `protobuf:"bytes,2,rep,name=dependent_prices,json=dependentPrices" json:"dependent_prices,omitempty"`
	RatioDependecy  []*ResourceRatioDependency `protobuf:"bytes,3,rep,name=ratio_dependecy,json=ratioDependecy" json:"ratio_dependecy,omitempty"`
}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) Reset() {
	*x = DatabaseServerTierPriceList_DatabaseServerTierConfigPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) ProtoMessage() {}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseServerTierPriceList_DatabaseServerTierConfigPrice.ProtoReflect.Descriptor instead.
func (*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) GetDatabaseTierConfigPrice() *DatabaseTierConfigPrice {
	if x != nil {
		return x.DatabaseTierConfigPrice
	}
	return nil
}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) GetDependentPrices() []*Price {
	if x != nil {
		return x.DependentPrices
	}
	return nil
}

func (x *DatabaseServerTierPriceList_DatabaseServerTierConfigPrice) GetRatioDependecy() []*ResourceRatioDependency {
	if x != nil {
		return x.RatioDependecy
	}
	return nil
}

// The price for a particular IP configuration.
type IpPriceList_IpConfigPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of IPs you get for free for an instance.
	// This seems to only be relevant in AWS.
	FreeIpCount *int32 `protobuf:"varint,2,opt,name=free_ip_count,json=freeIpCount" json:"free_ip_count,omitempty"`
	// The prices available for this IP Price. There may be different prices (e.g. an hourly
	// price and a monthly price).
	Prices []*Price `protobuf:"bytes,10,rep,name=prices" json:"prices,omitempty"`
	// Type is used to know if it's a static/ non static.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (x *IpPriceList_IpConfigPrice) Reset() {
	*x = IpPriceList_IpConfigPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpPriceList_IpConfigPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPriceList_IpConfigPrice) ProtoMessage() {}

func (x *IpPriceList_IpConfigPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPriceList_IpConfigPrice.ProtoReflect.Descriptor instead.
func (*IpPriceList_IpConfigPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{5, 0}
}

func (x *IpPriceList_IpConfigPrice) GetFreeIpCount() int32 {
	if x != nil && x.FreeIpCount != nil {
		return *x.FreeIpCount
	}
	return 0
}

func (x *IpPriceList_IpConfigPrice) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *IpPriceList_IpConfigPrice) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type StorageTierPriceList_StorageTierPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prices []*Price `protobuf:"bytes,10,rep,name=prices" json:"prices,omitempty"`
	// The redundancy type for which the prices are being represented.
	RedundancyType *EntityDTO_VirtualVolumeData_RedundancyType `protobuf:"varint,11,opt,name=redundancy_type,json=redundancyType,enum=common_dto.EntityDTO_VirtualVolumeData_RedundancyType" json:"redundancy_type,omitempty"`
}

func (x *StorageTierPriceList_StorageTierPrice) Reset() {
	*x = StorageTierPriceList_StorageTierPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageTierPriceList_StorageTierPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageTierPriceList_StorageTierPrice) ProtoMessage() {}

func (x *StorageTierPriceList_StorageTierPrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageTierPriceList_StorageTierPrice.ProtoReflect.Descriptor instead.
func (*StorageTierPriceList_StorageTierPrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{6, 0}
}

func (x *StorageTierPriceList_StorageTierPrice) GetPrices() []*Price {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *StorageTierPriceList_StorageTierPrice) GetRedundancyType() EntityDTO_VirtualVolumeData_RedundancyType {
	if x != nil && x.RedundancyType != nil {
		return *x.RedundancyType
	}
	return EntityDTO_VirtualVolumeData_LRS
}

type LicensePriceEntry_LicensePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the upper bound of the number of cores this price applies to. E.g. if there are
	// three license prices with pricing for 1-2 cores, 3-4 cores, and 5+ cores, there
	// will be entries with number_of_cores = 2, 4, and MAX_INTEGER.
	NumberOfCores *int32 `protobuf:"varint,1,opt,name=number_of_cores,json=numberOfCores" json:"number_of_cores,omitempty"`
	IsPerCoreRate *bool  `protobuf:"varint,2,opt,name=is_per_core_rate,json=isPerCoreRate,def=0" json:"is_per_core_rate,omitempty"`
	// The price associated with the number of core and the OS
	Price *Price `protobuf:"bytes,10,opt,name=price" json:"price,omitempty"`
}

// Default values for LicensePriceEntry_LicensePrice fields.
const (
	Default_LicensePriceEntry_LicensePrice_IsPerCoreRate = bool(false)
)

func (x *LicensePriceEntry_LicensePrice) Reset() {
	*x = LicensePriceEntry_LicensePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicensePriceEntry_LicensePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicensePriceEntry_LicensePrice) ProtoMessage() {}

func (x *LicensePriceEntry_LicensePrice) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicensePriceEntry_LicensePrice.ProtoReflect.Descriptor instead.
func (*LicensePriceEntry_LicensePrice) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{10, 0}
}

func (x *LicensePriceEntry_LicensePrice) GetNumberOfCores() int32 {
	if x != nil && x.NumberOfCores != nil {
		return *x.NumberOfCores
	}
	return 0
}

func (x *LicensePriceEntry_LicensePrice) GetIsPerCoreRate() bool {
	if x != nil && x.IsPerCoreRate != nil {
		return *x.IsPerCoreRate
	}
	return Default_LicensePriceEntry_LicensePrice_IsPerCoreRate
}

func (x *LicensePriceEntry_LicensePrice) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

type LicenseOverride_LicenseOverrideValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	NumCores   *int32   `protobuf:"varint,1,opt,name=num_cores,json=numCores" json:"num_cores,omitempty"`
	NumOfCores *float64 `protobuf:"fixed64,2,opt,name=num_of_cores,json=numOfCores" json:"num_of_cores,omitempty"`
}

func (x *LicenseOverride_LicenseOverrideValue) Reset() {
	*x = LicenseOverride_LicenseOverrideValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseOverride_LicenseOverrideValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseOverride_LicenseOverrideValue) ProtoMessage() {}

func (x *LicenseOverride_LicenseOverrideValue) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseOverride_LicenseOverrideValue.ProtoReflect.Descriptor instead.
func (*LicenseOverride_LicenseOverrideValue) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{11, 0}
}

// Deprecated: Do not use.
func (x *LicenseOverride_LicenseOverrideValue) GetNumCores() int32 {
	if x != nil && x.NumCores != nil {
		return *x.NumCores
	}
	return 0
}

func (x *LicenseOverride_LicenseOverrideValue) GetNumOfCores() float64 {
	if x != nil && x.NumOfCores != nil {
		return *x.NumOfCores
	}
	return 0
}

// Spot prices for availability zones in this region
type PriceTable_SpotPriceByRegionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region
	RelatedRegion *EntityDTO `protobuf:"bytes,1,opt,name=related_region,json=relatedRegion" json:"related_region,omitempty"`
	// Availability Zone
	RelatedZone *EntityDTO `protobuf:"bytes,2,opt,name=related_zone,json=relatedZone" json:"related_zone,omitempty"`
	// What Compute Tier
	RelatedComputeTier *EntityDTO `protobuf:"bytes,3,opt,name=related_compute_tier,json=relatedComputeTier" json:"related_compute_tier,omitempty"`
	GuestOsType        *OSType    `protobuf:"varint,4,opt,name=guest_os_type,json=guestOsType,enum=common_dto.OSType" json:"guest_os_type,omitempty"`
	// Spot Price For most recent period
	Price *Price `protobuf:"bytes,10,opt,name=price" json:"price,omitempty"`
}

func (x *PriceTable_SpotPriceByRegionEntry) Reset() {
	*x = PriceTable_SpotPriceByRegionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_SpotPriceByRegionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_SpotPriceByRegionEntry) ProtoMessage() {}

func (x *PriceTable_SpotPriceByRegionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_SpotPriceByRegionEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_SpotPriceByRegionEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 0}
}

func (x *PriceTable_SpotPriceByRegionEntry) GetRelatedRegion() *EntityDTO {
	if x != nil {
		return x.RelatedRegion
	}
	return nil
}

func (x *PriceTable_SpotPriceByRegionEntry) GetRelatedZone() *EntityDTO {
	if x != nil {
		return x.RelatedZone
	}
	return nil
}

func (x *PriceTable_SpotPriceByRegionEntry) GetRelatedComputeTier() *EntityDTO {
	if x != nil {
		return x.RelatedComputeTier
	}
	return nil
}

func (x *PriceTable_SpotPriceByRegionEntry) GetGuestOsType() OSType {
	if x != nil && x.GuestOsType != nil {
		return *x.GuestOsType
	}
	return OSType_UNKNOWN_OS
}

func (x *PriceTable_SpotPriceByRegionEntry) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

// The on-demand prices in a specific region.
type PriceTable_OnDemandPriceTableByRegionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Region for which those prices are relevant.
	RelatedRegion *EntityDTO `protobuf:"bytes,1,opt,name=related_region,json=relatedRegion" json:"related_region,omitempty"`
	// The prices for compute tiers in this region
	ComputePriceTable []*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry `protobuf:"bytes,2,rep,name=compute_price_table,json=computePriceTable" json:"compute_price_table,omitempty"`
	// The prices for database tiers in this region
	DatabasePriceTable []*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry `protobuf:"bytes,3,rep,name=database_price_table,json=databasePriceTable" json:"database_price_table,omitempty"`
	// The prices for cloud storage tiers in this region
	StoragePriceTable []*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry `protobuf:"bytes,4,rep,name=storage_price_table,json=storagePriceTable" json:"storage_price_table,omitempty"`
	// The prices for IP addresses in this region
	IpPrices *IpPriceList `protobuf:"bytes,5,opt,name=ip_prices,json=ipPrices" json:"ip_prices,omitempty"`
	// The prices for database server tiers in this region
	DatabaseServerPriceTable []*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry `protobuf:"bytes,6,rep,name=database_server_price_table,json=databaseServerPriceTable" json:"database_server_price_table,omitempty"`
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) Reset() {
	*x = PriceTable_OnDemandPriceTableByRegionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_OnDemandPriceTableByRegionEntry) ProtoMessage() {}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_OnDemandPriceTableByRegionEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_OnDemandPriceTableByRegionEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 3}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetRelatedRegion() *EntityDTO {
	if x != nil {
		return x.RelatedRegion
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetComputePriceTable() []*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry {
	if x != nil {
		return x.ComputePriceTable
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetDatabasePriceTable() []*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry {
	if x != nil {
		return x.DatabasePriceTable
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetStoragePriceTable() []*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry {
	if x != nil {
		return x.StoragePriceTable
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetIpPrices() *IpPriceList {
	if x != nil {
		return x.IpPrices
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry) GetDatabaseServerPriceTable() []*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry {
	if x != nil {
		return x.DatabaseServerPriceTable
	}
	return nil
}

// The reserved instance prices in a specific region.
type PriceTable_ReservedInstancePriceTableByRegionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cloud Region for which those prices are relevant.
	RelatedRegion *EntityDTO `protobuf:"bytes,1,opt,name=related_region,json=relatedRegion" json:"related_region,omitempty"`
	// This map contains the RI specs in this region, with its price associated.
	// The RI spec should be considered as a key in a map, so each spec should only be present once
	// in this whole map.
	ReservedInstancePriceMap []*PriceTable_ReservedInstancePriceEntry `protobuf:"bytes,2,rep,name=reserved_instance_price_map,json=reservedInstancePriceMap" json:"reserved_instance_price_map,omitempty"`
}

func (x *PriceTable_ReservedInstancePriceTableByRegionEntry) Reset() {
	*x = PriceTable_ReservedInstancePriceTableByRegionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_ReservedInstancePriceTableByRegionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_ReservedInstancePriceTableByRegionEntry) ProtoMessage() {}

func (x *PriceTable_ReservedInstancePriceTableByRegionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_ReservedInstancePriceTableByRegionEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_ReservedInstancePriceTableByRegionEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 4}
}

func (x *PriceTable_ReservedInstancePriceTableByRegionEntry) GetRelatedRegion() *EntityDTO {
	if x != nil {
		return x.RelatedRegion
	}
	return nil
}

func (x *PriceTable_ReservedInstancePriceTableByRegionEntry) GetReservedInstancePriceMap() []*PriceTable_ReservedInstancePriceEntry {
	if x != nil {
		return x.ReservedInstancePriceMap
	}
	return nil
}

// This entry contains an RISpec with the associated price.
type PriceTable_ReservedInstancePriceEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the RI spec associated with the price
	ReservedInstanceSpec *ReservedInstanceSpec `protobuf:"bytes,1,opt,name=reserved_instance_spec,json=reservedInstanceSpec" json:"reserved_instance_spec,omitempty"`
	// the price of the RI spec
	ReservedInstancePrice *ReservedInstancePrice `protobuf:"bytes,2,opt,name=reserved_instance_price,json=reservedInstancePrice" json:"reserved_instance_price,omitempty"`
}

func (x *PriceTable_ReservedInstancePriceEntry) Reset() {
	*x = PriceTable_ReservedInstancePriceEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_ReservedInstancePriceEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_ReservedInstancePriceEntry) ProtoMessage() {}

func (x *PriceTable_ReservedInstancePriceEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_ReservedInstancePriceEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_ReservedInstancePriceEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 5}
}

func (x *PriceTable_ReservedInstancePriceEntry) GetReservedInstanceSpec() *ReservedInstanceSpec {
	if x != nil {
		return x.ReservedInstanceSpec
	}
	return nil
}

func (x *PriceTable_ReservedInstancePriceEntry) GetReservedInstancePrice() *ReservedInstancePrice {
	if x != nil {
		return x.ReservedInstancePrice
	}
	return nil
}

// The prices for compute related to a specific compute tier
type PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Compute tier for which those prices are relevant.
	RelatedComputeTier   *EntityDTO            `protobuf:"bytes,1,opt,name=related_compute_tier,json=relatedComputeTier" json:"related_compute_tier,omitempty"`
	ComputeTierPriceList *ComputeTierPriceList `protobuf:"bytes,2,opt,name=compute_tier_price_list,json=computeTierPriceList" json:"compute_tier_price_list,omitempty"`
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) Reset() {
	*x = PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) ProtoMessage() {}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 3, 0}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) GetRelatedComputeTier() *EntityDTO {
	if x != nil {
		return x.RelatedComputeTier
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry) GetComputeTierPriceList() *ComputeTierPriceList {
	if x != nil {
		return x.ComputeTierPriceList
	}
	return nil
}

// The prices for database related to a specific database tier
type PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database tier for which those prices are relevant.
	RelatedDatabaseTier   *EntityDTO               `protobuf:"bytes,1,opt,name=related_database_tier,json=relatedDatabaseTier" json:"related_database_tier,omitempty"`
	DatabaseTierPriceList []*DatabaseTierPriceList `protobuf:"bytes,2,rep,name=database_tier_price_list,json=databaseTierPriceList" json:"database_tier_price_list,omitempty"`
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) Reset() {
	*x = PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) ProtoMessage() {}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 3, 1}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) GetRelatedDatabaseTier() *EntityDTO {
	if x != nil {
		return x.RelatedDatabaseTier
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry) GetDatabaseTierPriceList() []*DatabaseTierPriceList {
	if x != nil {
		return x.DatabaseTierPriceList
	}
	return nil
}

// The prices for database related to a specific database server tier
type PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Database tier for which those prices are relevant.
	RelatedDatabaseServerTier   *EntityDTO                   `protobuf:"bytes,1,opt,name=related_database_server_tier,json=relatedDatabaseServerTier" json:"related_database_server_tier,omitempty"`
	DatabaseServerTierPriceList *DatabaseServerTierPriceList `protobuf:"bytes,2,opt,name=database_server_tier_price_list,json=databaseServerTierPriceList" json:"database_server_tier_price_list,omitempty"`
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) Reset() {
	*x = PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) ProtoMessage() {
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 3, 2}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) GetRelatedDatabaseServerTier() *EntityDTO {
	if x != nil {
		return x.RelatedDatabaseServerTier
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry) GetDatabaseServerTierPriceList() *DatabaseServerTierPriceList {
	if x != nil {
		return x.DatabaseServerTierPriceList
	}
	return nil
}

// The prices for storage related to a specific storage tier
type PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Storage tier for which those prices are relevant.
	RelatedStorageTier   *EntityDTO            `protobuf:"bytes,1,opt,name=related_storage_tier,json=relatedStorageTier" json:"related_storage_tier,omitempty"`
	StorageTierPriceList *StorageTierPriceList `protobuf:"bytes,2,opt,name=storage_tier_price_list,json=storageTierPriceList" json:"storage_tier_price_list,omitempty"`
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) Reset() {
	*x = PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_PricingDTO_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) ProtoMessage() {}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) ProtoReflect() protoreflect.Message {
	mi := &file_PricingDTO_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry.ProtoReflect.Descriptor instead.
func (*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) Descriptor() ([]byte, []int) {
	return file_PricingDTO_proto_rawDescGZIP(), []int{13, 3, 3}
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) GetRelatedStorageTier() *EntityDTO {
	if x != nil {
		return x.RelatedStorageTier
	}
	return nil
}

func (x *PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry) GetStorageTierPriceList() *StorageTierPriceList {
	if x != nil {
		return x.StorageTierPriceList
	}
	return nil
}

var File_PricingDTO_proto protoreflect.FileDescriptor

var file_PricingDTO_proto_rawDesc = []byte{
	0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x1a, 0x12,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x56,
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x23, 0x70, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x20, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0x8a, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x67, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4f,
	0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x79, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x19,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc7, 0x02, 0x0a,
	0x17, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x62, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x64, 0x62, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x62, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x10, 0x64, 0x62, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x0e, 0x64, 0x62, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x48, 0x0a, 0x12, 0x64, 0x62, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x62, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x43, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x54, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x15, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x22, 0x99, 0x03, 0x0a, 0x1b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x6a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x8d, 0x02, 0x0a,
	0x1d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x60,
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x3c, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x4c,
	0x0a, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0e, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x63, 0x79, 0x22, 0xc3, 0x01, 0x0a,
	0x0b, 0x49, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x49, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x49, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x07, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x72,
	0x0a, 0x0d, 0x49, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x49, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x13, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x9e,
	0x01, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x5f,
	0x0a, 0x0f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x75, 0x70, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x0c, 0x75, 0x70, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0xc2, 0x02, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x72, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f,
	0x55, 0x52, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x59, 0x53, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4f, 0x50, 0x53, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x42, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x42, 0x50, 0x53, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x10, 0x17, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x17, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x50, 0x55, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x50, 0x55, 0x12, 0x34, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4f, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x22,
	0x5a, 0x0a, 0x10, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xd7, 0x1a, 0x0a, 0x0a,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x69, 0x0a,
	0x15, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x81, 0x01, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x6f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x1b, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x18, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x1a, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0xba, 0x02,
	0x0a, 0x16, 0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x47, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0d, 0x67, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4f, 0x53,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x1a, 0x69, 0x0a, 0x1d, 0x4f, 0x6e,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x84, 0x0c, 0x0a, 0x1f, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x53, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x99, 0x01,
	0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x18, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xc0, 0x01, 0x0a, 0x1c, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x79, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x14, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52,
	0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc6, 0x01, 0x0a,
	0x1d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x49,
	0x0a, 0x15, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x18, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x23, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x56, 0x0a,
	0x1c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc0, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x69, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xd9, 0x01, 0x0a, 0x27, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x70, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x1a, 0xcf, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x56, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x15,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x4f, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d, 0x74,
	0x75, 0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f,
	0x74, 0x75, 0x72, 0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_PricingDTO_proto_rawDescOnce sync.Once
	file_PricingDTO_proto_rawDescData = file_PricingDTO_proto_rawDesc
)

func file_PricingDTO_proto_rawDescGZIP() []byte {
	file_PricingDTO_proto_rawDescOnce.Do(func() {
		file_PricingDTO_proto_rawDescData = protoimpl.X.CompressGZIP(file_PricingDTO_proto_rawDescData)
	})
	return file_PricingDTO_proto_rawDescData
}

var file_PricingDTO_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_PricingDTO_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_PricingDTO_proto_goTypes = []interface{}{
	(Price_Unit)(0),                                     // 0: common_dto.Price.Unit
	(*ComputeTierPriceList)(nil),                        // 1: common_dto.ComputeTierPriceList
	(*DatabaseTierConfigPrice)(nil),                     // 2: common_dto.DatabaseTierConfigPrice
	(*DatabaseTierPriceList)(nil),                       // 3: common_dto.DatabaseTierPriceList
	(*ResourceRatioDependency)(nil),                     // 4: common_dto.ResourceRatioDependency
	(*DatabaseServerTierPriceList)(nil),                 // 5: common_dto.DatabaseServerTierPriceList
	(*IpPriceList)(nil),                                 // 6: common_dto.IpPriceList
	(*StorageTierPriceList)(nil),                        // 7: common_dto.StorageTierPriceList
	(*ReservedInstancePrice)(nil),                       // 8: common_dto.ReservedInstancePrice
	(*Price)(nil),                                       // 9: common_dto.Price
	(*ConsumerCommodityPrice)(nil),                      // 10: common_dto.ConsumerCommodityPrice
	(*LicensePriceEntry)(nil),                           // 11: common_dto.LicensePriceEntry
	(*LicenseOverride)(nil),                             // 12: common_dto.LicenseOverride
	(*LicenseOverrides)(nil),                            // 13: common_dto.LicenseOverrides
	(*PriceTable)(nil),                                  // 14: common_dto.PriceTable
	(*ComputeTierPriceList_ComputeTierConfigPrice)(nil), // 15: common_dto.ComputeTierPriceList.ComputeTierConfigPrice
	(*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice)(nil), // 16: common_dto.DatabaseServerTierPriceList.DatabaseServerTierConfigPrice
	(*IpPriceList_IpConfigPrice)(nil),                                 // 17: common_dto.IpPriceList.IpConfigPrice
	(*StorageTierPriceList_StorageTierPrice)(nil),                     // 18: common_dto.StorageTierPriceList.StorageTierPrice
	(*LicensePriceEntry_LicensePrice)(nil),                            // 19: common_dto.LicensePriceEntry.LicensePrice
	(*LicenseOverride_LicenseOverrideValue)(nil),                      // 20: common_dto.LicenseOverride.LicenseOverrideValue
	(*PriceTable_SpotPriceByRegionEntry)(nil),                         // 21: common_dto.PriceTable.SpotPriceByRegionEntry
	nil, // 22: common_dto.PriceTable.OnDemandLicenseOverridesEntry
	nil, // 23: common_dto.PriceTable.ReservedLicenseOverridesEntry
	(*PriceTable_OnDemandPriceTableByRegionEntry)(nil),                                     // 24: common_dto.PriceTable.OnDemandPriceTableByRegionEntry
	(*PriceTable_ReservedInstancePriceTableByRegionEntry)(nil),                             // 25: common_dto.PriceTable.ReservedInstancePriceTableByRegionEntry
	(*PriceTable_ReservedInstancePriceEntry)(nil),                                          // 26: common_dto.PriceTable.ReservedInstancePriceEntry
	(*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry)(nil),        // 27: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.ComputePriceTableByTierEntry
	(*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry)(nil),       // 28: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabasePriceTableByTierEntry
	(*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry)(nil), // 29: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabaseServerPriceTableByTierEntry
	(*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry)(nil),        // 30: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.StoragePriceTableByTierEntry
	(DatabaseEngine)(0),             // 31: common_dto.DatabaseEngine
	(DatabaseEdition)(0),            // 32: common_dto.DatabaseEdition
	(LicenseModel)(0),               // 33: common_dto.LicenseModel
	(DeploymentType)(0),             // 34: common_dto.DeploymentType
	(CommodityDTO_CommodityType)(0), // 35: common_dto.CommodityDTO.CommodityType
	(*CurrencyAmount)(nil),          // 36: common_dto.CurrencyAmount
	(OSType)(0),                     // 37: common_dto.OSType
	(*PricingIdentifier)(nil),       // 38: common_dto.PricingIdentifier
	(Tenancy)(0),                    // 39: common_dto.Tenancy
	(EntityDTO_VirtualVolumeData_RedundancyType)(0), // 40: common_dto.EntityDTO.VirtualVolumeData.RedundancyType
	(*EntityDTO)(nil),            // 41: common_dto.EntityDTO
	(*ReservedInstanceSpec)(nil), // 42: common_dto.ReservedInstanceSpec
}
var file_PricingDTO_proto_depIdxs = []int32{
	15, // 0: common_dto.ComputeTierPriceList.base_price:type_name -> common_dto.ComputeTierPriceList.ComputeTierConfigPrice
	15, // 1: common_dto.ComputeTierPriceList.per_configuration_price_adjustments:type_name -> common_dto.ComputeTierPriceList.ComputeTierConfigPrice
	31, // 2: common_dto.DatabaseTierConfigPrice.db_engine:type_name -> common_dto.DatabaseEngine
	32, // 3: common_dto.DatabaseTierConfigPrice.db_edition:type_name -> common_dto.DatabaseEdition
	33, // 4: common_dto.DatabaseTierConfigPrice.db_license_model:type_name -> common_dto.LicenseModel
	34, // 5: common_dto.DatabaseTierConfigPrice.db_deployment_type:type_name -> common_dto.DeploymentType
	9,  // 6: common_dto.DatabaseTierConfigPrice.prices:type_name -> common_dto.Price
	2,  // 7: common_dto.DatabaseTierPriceList.base_price:type_name -> common_dto.DatabaseTierConfigPrice
	2,  // 8: common_dto.DatabaseTierPriceList.configuration_price_adjustments:type_name -> common_dto.DatabaseTierConfigPrice
	34, // 9: common_dto.DatabaseTierPriceList.deployment_type:type_name -> common_dto.DeploymentType
	9,  // 10: common_dto.DatabaseTierPriceList.dependent_prices:type_name -> common_dto.Price
	35, // 11: common_dto.ResourceRatioDependency.base_resource_type:type_name -> common_dto.CommodityDTO.CommodityType
	35, // 12: common_dto.ResourceRatioDependency.dependent_resource_type:type_name -> common_dto.CommodityDTO.CommodityType
	16, // 13: common_dto.DatabaseServerTierPriceList.config_prices:type_name -> common_dto.DatabaseServerTierPriceList.DatabaseServerTierConfigPrice
	17, // 14: common_dto.IpPriceList.ip_price:type_name -> common_dto.IpPriceList.IpConfigPrice
	18, // 15: common_dto.StorageTierPriceList.cloud_storage_price:type_name -> common_dto.StorageTierPriceList.StorageTierPrice
	9,  // 16: common_dto.ReservedInstancePrice.upfront_price:type_name -> common_dto.Price
	9,  // 17: common_dto.ReservedInstancePrice.recurring_price:type_name -> common_dto.Price
	9,  // 18: common_dto.ReservedInstancePrice.usage_price:type_name -> common_dto.Price
	0,  // 19: common_dto.Price.unit:type_name -> common_dto.Price.Unit
	36, // 20: common_dto.Price.price_amount:type_name -> common_dto.CurrencyAmount
	35, // 21: common_dto.ConsumerCommodityPrice.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	9,  // 22: common_dto.ConsumerCommodityPrice.price:type_name -> common_dto.Price
	37, // 23: common_dto.LicensePriceEntry.os_type:type_name -> common_dto.OSType
	19, // 24: common_dto.LicensePriceEntry.license_prices:type_name -> common_dto.LicensePriceEntry.LicensePrice
	37, // 25: common_dto.LicensePriceEntry.base_os_type:type_name -> common_dto.OSType
	37, // 26: common_dto.LicenseOverride.os_type:type_name -> common_dto.OSType
	20, // 27: common_dto.LicenseOverride.override_value:type_name -> common_dto.LicenseOverride.LicenseOverrideValue
	12, // 28: common_dto.LicenseOverrides.license_override:type_name -> common_dto.LicenseOverride
	38, // 29: common_dto.PriceTable.price_table_keys:type_name -> common_dto.PricingIdentifier
	24, // 30: common_dto.PriceTable.on_demand_price_table:type_name -> common_dto.PriceTable.OnDemandPriceTableByRegionEntry
	21, // 31: common_dto.PriceTable.spot_price_table:type_name -> common_dto.PriceTable.SpotPriceByRegionEntry
	25, // 32: common_dto.PriceTable.reserved_instance_price_table:type_name -> common_dto.PriceTable.ReservedInstancePriceTableByRegionEntry
	11, // 33: common_dto.PriceTable.on_demand_license_price_table:type_name -> common_dto.LicensePriceEntry
	11, // 34: common_dto.PriceTable.reserved_license_price_table:type_name -> common_dto.LicensePriceEntry
	22, // 35: common_dto.PriceTable.on_demand_license_overrides:type_name -> common_dto.PriceTable.OnDemandLicenseOverridesEntry
	23, // 36: common_dto.PriceTable.reserved_license_overrides:type_name -> common_dto.PriceTable.ReservedLicenseOverridesEntry
	37, // 37: common_dto.ComputeTierPriceList.ComputeTierConfigPrice.guest_os_type:type_name -> common_dto.OSType
	39, // 38: common_dto.ComputeTierPriceList.ComputeTierConfigPrice.tenancy:type_name -> common_dto.Tenancy
	9,  // 39: common_dto.ComputeTierPriceList.ComputeTierConfigPrice.prices:type_name -> common_dto.Price
	10, // 40: common_dto.ComputeTierPriceList.ComputeTierConfigPrice.consumer_commodity_prices:type_name -> common_dto.ConsumerCommodityPrice
	2,  // 41: common_dto.DatabaseServerTierPriceList.DatabaseServerTierConfigPrice.database_tier_config_price:type_name -> common_dto.DatabaseTierConfigPrice
	9,  // 42: common_dto.DatabaseServerTierPriceList.DatabaseServerTierConfigPrice.dependent_prices:type_name -> common_dto.Price
	4,  // 43: common_dto.DatabaseServerTierPriceList.DatabaseServerTierConfigPrice.ratio_dependecy:type_name -> common_dto.ResourceRatioDependency
	9,  // 44: common_dto.IpPriceList.IpConfigPrice.prices:type_name -> common_dto.Price
	9,  // 45: common_dto.StorageTierPriceList.StorageTierPrice.prices:type_name -> common_dto.Price
	40, // 46: common_dto.StorageTierPriceList.StorageTierPrice.redundancy_type:type_name -> common_dto.EntityDTO.VirtualVolumeData.RedundancyType
	9,  // 47: common_dto.LicensePriceEntry.LicensePrice.price:type_name -> common_dto.Price
	41, // 48: common_dto.PriceTable.SpotPriceByRegionEntry.related_region:type_name -> common_dto.EntityDTO
	41, // 49: common_dto.PriceTable.SpotPriceByRegionEntry.related_zone:type_name -> common_dto.EntityDTO
	41, // 50: common_dto.PriceTable.SpotPriceByRegionEntry.related_compute_tier:type_name -> common_dto.EntityDTO
	37, // 51: common_dto.PriceTable.SpotPriceByRegionEntry.guest_os_type:type_name -> common_dto.OSType
	9,  // 52: common_dto.PriceTable.SpotPriceByRegionEntry.price:type_name -> common_dto.Price
	13, // 53: common_dto.PriceTable.OnDemandLicenseOverridesEntry.value:type_name -> common_dto.LicenseOverrides
	13, // 54: common_dto.PriceTable.ReservedLicenseOverridesEntry.value:type_name -> common_dto.LicenseOverrides
	41, // 55: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.related_region:type_name -> common_dto.EntityDTO
	27, // 56: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.compute_price_table:type_name -> common_dto.PriceTable.OnDemandPriceTableByRegionEntry.ComputePriceTableByTierEntry
	28, // 57: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.database_price_table:type_name -> common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabasePriceTableByTierEntry
	30, // 58: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.storage_price_table:type_name -> common_dto.PriceTable.OnDemandPriceTableByRegionEntry.StoragePriceTableByTierEntry
	6,  // 59: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.ip_prices:type_name -> common_dto.IpPriceList
	29, // 60: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.database_server_price_table:type_name -> common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabaseServerPriceTableByTierEntry
	41, // 61: common_dto.PriceTable.ReservedInstancePriceTableByRegionEntry.related_region:type_name -> common_dto.EntityDTO
	26, // 62: common_dto.PriceTable.ReservedInstancePriceTableByRegionEntry.reserved_instance_price_map:type_name -> common_dto.PriceTable.ReservedInstancePriceEntry
	42, // 63: common_dto.PriceTable.ReservedInstancePriceEntry.reserved_instance_spec:type_name -> common_dto.ReservedInstanceSpec
	8,  // 64: common_dto.PriceTable.ReservedInstancePriceEntry.reserved_instance_price:type_name -> common_dto.ReservedInstancePrice
	41, // 65: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.ComputePriceTableByTierEntry.related_compute_tier:type_name -> common_dto.EntityDTO
	1,  // 66: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.ComputePriceTableByTierEntry.compute_tier_price_list:type_name -> common_dto.ComputeTierPriceList
	41, // 67: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabasePriceTableByTierEntry.related_database_tier:type_name -> common_dto.EntityDTO
	3,  // 68: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabasePriceTableByTierEntry.database_tier_price_list:type_name -> common_dto.DatabaseTierPriceList
	41, // 69: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabaseServerPriceTableByTierEntry.related_database_server_tier:type_name -> common_dto.EntityDTO
	5,  // 70: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.DatabaseServerPriceTableByTierEntry.database_server_tier_price_list:type_name -> common_dto.DatabaseServerTierPriceList
	41, // 71: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.StoragePriceTableByTierEntry.related_storage_tier:type_name -> common_dto.EntityDTO
	7,  // 72: common_dto.PriceTable.OnDemandPriceTableByRegionEntry.StoragePriceTableByTierEntry.storage_tier_price_list:type_name -> common_dto.StorageTierPriceList
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_PricingDTO_proto_init() }
func file_PricingDTO_proto_init() {
	if File_PricingDTO_proto != nil {
		return
	}
	file_CloudCostDTO_proto_init()
	file_CommonDTO_proto_init()
	file_CommonCost_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_PricingDTO_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeTierPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseTierConfigPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseTierPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRatioDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseServerTierPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageTierPriceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReservedInstancePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerCommodityPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensePriceEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeTierPriceList_ComputeTierConfigPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseServerTierPriceList_DatabaseServerTierConfigPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpPriceList_IpConfigPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageTierPriceList_StorageTierPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicensePriceEntry_LicensePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseOverride_LicenseOverrideValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_SpotPriceByRegionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_OnDemandPriceTableByRegionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_ReservedInstancePriceTableByRegionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_ReservedInstancePriceEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_OnDemandPriceTableByRegionEntry_ComputePriceTableByTierEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_OnDemandPriceTableByRegionEntry_DatabasePriceTableByTierEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_OnDemandPriceTableByRegionEntry_DatabaseServerPriceTableByTierEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_PricingDTO_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceTable_OnDemandPriceTableByRegionEntry_StoragePriceTableByTierEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PricingDTO_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PricingDTO_proto_goTypes,
		DependencyIndexes: file_PricingDTO_proto_depIdxs,
		EnumInfos:         file_PricingDTO_proto_enumTypes,
		MessageInfos:      file_PricingDTO_proto_msgTypes,
	}.Build()
	File_PricingDTO_proto = out.File
	file_PricingDTO_proto_rawDesc = nil
	file_PricingDTO_proto_goTypes = nil
	file_PricingDTO_proto_depIdxs = nil
}
