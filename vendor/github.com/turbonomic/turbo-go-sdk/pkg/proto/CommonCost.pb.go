// Code generated by protoc-gen-go. DO NOT EDIT.
// source: CommonCost.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PaymentOption int32

const (
	// The user must pay the entire price of this instance upfront. There is no recurring
	// cost.
	// (e.g. $10000.00 upfront for the year)
	PaymentOption_ALL_UPFRONT PaymentOption = 1
	// The user must pay some part of the instance price upfront, and the rest over time.
	// (e.g. $1000.00 upfront, and $0.5 per instance-hour afterwards).
	PaymentOption_PARTIAL_UPFRONT PaymentOption = 2
	// The entire price of the instance is recurring
	// (e.g. $0.7 per instance-hour)
	PaymentOption_NO_UPFRONT PaymentOption = 3
)

var PaymentOption_name = map[int32]string{
	1: "ALL_UPFRONT",
	2: "PARTIAL_UPFRONT",
	3: "NO_UPFRONT",
}

var PaymentOption_value = map[string]int32{
	"ALL_UPFRONT":     1,
	"PARTIAL_UPFRONT": 2,
	"NO_UPFRONT":      3,
}

func (x PaymentOption) Enum() *PaymentOption {
	p := new(PaymentOption)
	*p = x
	return p
}

func (x PaymentOption) String() string {
	return proto.EnumName(PaymentOption_name, int32(x))
}

func (x *PaymentOption) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaymentOption_value, data, "PaymentOption")
	if err != nil {
		return err
	}
	*x = PaymentOption(value)
	return nil
}

func (PaymentOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_365fcdce97b4aba3, []int{0}
}

// An amount of money, expressed in some currency.
type CurrencyAmount struct {
	// The currency in which the amount is expressed.
	// This is the ISO 4217 numeric code.
	// The default (840) is the USD currency code.
	//
	// We use the ISO 4217 standard so that in the future it would be easier to integrate
	// with JSR 354: Money and Currency API.
	Currency *int32 `protobuf:"varint,1,opt,name=currency,def=840" json:"currency,omitempty"`
	// The value, in the currency.
	// This should be non-negative, with 0 representing "free".
	Amount               *float64 `protobuf:"fixed64,2,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CurrencyAmount) Reset()         { *m = CurrencyAmount{} }
func (m *CurrencyAmount) String() string { return proto.CompactTextString(m) }
func (*CurrencyAmount) ProtoMessage()    {}
func (*CurrencyAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_365fcdce97b4aba3, []int{0}
}

func (m *CurrencyAmount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CurrencyAmount.Unmarshal(m, b)
}
func (m *CurrencyAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CurrencyAmount.Marshal(b, m, deterministic)
}
func (m *CurrencyAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrencyAmount.Merge(m, src)
}
func (m *CurrencyAmount) XXX_Size() int {
	return xxx_messageInfo_CurrencyAmount.Size(m)
}
func (m *CurrencyAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrencyAmount.DiscardUnknown(m)
}

var xxx_messageInfo_CurrencyAmount proto.InternalMessageInfo

const Default_CurrencyAmount_Currency int32 = 840

func (m *CurrencyAmount) GetCurrency() int32 {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return Default_CurrencyAmount_Currency
}

func (m *CurrencyAmount) GetAmount() float64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func init() {
	proto.RegisterEnum("common_dto.PaymentOption", PaymentOption_name, PaymentOption_value)
	proto.RegisterType((*CurrencyAmount)(nil), "common_dto.CurrencyAmount")
}

func init() { proto.RegisterFile("CommonCost.proto", fileDescriptor_365fcdce97b4aba3) }

var fileDescriptor_365fcdce97b4aba3 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x46, 0xd9, 0x16, 0x45, 0x46, 0x6c, 0xcb, 0x0a, 0xd2, 0x5b, 0x8b, 0xa7, 0x22, 0x76, 0xe3,
	0xc1, 0x83, 0x78, 0x8b, 0x41, 0xa1, 0x50, 0x9a, 0xb0, 0xd4, 0x8b, 0x97, 0x92, 0x6e, 0x6a, 0x0c,
	0x71, 0x76, 0x96, 0xcd, 0xac, 0xd0, 0x7f, 0x2f, 0x6e, 0x4b, 0xbd, 0xcd, 0x7b, 0xbc, 0xc3, 0x7c,
	0x30, 0xca, 0x08, 0x91, 0x6c, 0x46, 0x1d, 0x2b, 0xe7, 0x89, 0x49, 0x82, 0x89, 0x66, 0x53, 0x31,
	0xdd, 0x2e, 0x60, 0x90, 0x05, 0xef, 0x77, 0xd6, 0xec, 0x53, 0xa4, 0x60, 0x59, 0x4e, 0xe0, 0xc2,
	0x1c, 0xcd, 0x58, 0x4c, 0xc5, 0xec, 0xec, 0xb9, 0xff, 0xf4, 0xf8, 0xa0, 0x4f, 0x52, 0xde, 0xc0,
	0x79, 0x19, 0xd3, 0x71, 0x6f, 0x2a, 0x66, 0x42, 0x1f, 0xe9, 0xee, 0x15, 0xae, 0x8a, 0x72, 0x8f,
	0x3b, 0xcb, 0xb9, 0xe3, 0x86, 0xac, 0x1c, 0xc2, 0x65, 0xba, 0x5c, 0x6e, 0xde, 0x8b, 0x37, 0x9d,
	0xaf, 0xd6, 0x23, 0x21, 0xaf, 0x61, 0x58, 0xa4, 0x7a, 0xbd, 0x48, 0xff, 0x65, 0x4f, 0x0e, 0x00,
	0x56, 0xf9, 0x89, 0xfb, 0x2f, 0x39, 0x4c, 0x0c, 0xa1, 0xfa, 0x41, 0x0e, 0x7e, 0x4b, 0xca, 0x7d,
	0x97, 0xfc, 0x49, 0x1e, 0x55, 0x57, 0xb5, 0xea, 0xf0, 0xf8, 0xc7, 0x7d, 0xdd, 0xf0, 0x57, 0xd8,
	0xfe, 0x61, 0x12, 0x2b, 0x4b, 0xd8, 0x98, 0xc3, 0x39, 0xaf, 0x69, 0xde, 0x55, 0x6d, 0xe2, 0xda,
	0x3a, 0x89, 0x73, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x97, 0x68, 0x98, 0xbc, 0x01, 0x01, 0x00,
	0x00,
}
