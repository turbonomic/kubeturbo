// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: MediationMessage.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContainerResourceUsage_ContainerResourceType int32

const (
	ContainerResourceUsage_JAVA_HEAP ContainerResourceUsage_ContainerResourceType = 0
)

// Enum value maps for ContainerResourceUsage_ContainerResourceType.
var (
	ContainerResourceUsage_ContainerResourceType_name = map[int32]string{
		0: "JAVA_HEAP",
	}
	ContainerResourceUsage_ContainerResourceType_value = map[string]int32{
		"JAVA_HEAP": 0,
	}
)

func (x ContainerResourceUsage_ContainerResourceType) Enum() *ContainerResourceUsage_ContainerResourceType {
	p := new(ContainerResourceUsage_ContainerResourceType)
	*p = x
	return p
}

func (x ContainerResourceUsage_ContainerResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerResourceUsage_ContainerResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_MediationMessage_proto_enumTypes[0].Descriptor()
}

func (ContainerResourceUsage_ContainerResourceType) Type() protoreflect.EnumType {
	return &file_MediationMessage_proto_enumTypes[0]
}

func (x ContainerResourceUsage_ContainerResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerResourceUsage_ContainerResourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerResourceUsage_ContainerResourceType(num)
	return nil
}

// Deprecated: Use ContainerResourceUsage_ContainerResourceType.Descriptor instead.
func (ContainerResourceUsage_ContainerResourceType) EnumDescriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{27, 0}
}

type ProbeInfo_CreationMode int32

const (
	// Probe created as a stand alone
	ProbeInfo_STAND_ALONE ProbeInfo_CreationMode = 0
	// Probe created as derived to another probe
	ProbeInfo_DERIVED ProbeInfo_CreationMode = 1
	// Probe that can be created in either way
	ProbeInfo_ANY ProbeInfo_CreationMode = 2
	// Probe that created inside the Topology-Processor
	ProbeInfo_INTERNAL ProbeInfo_CreationMode = 3
	// Probe that can be created in any other way
	ProbeInfo_OTHER ProbeInfo_CreationMode = 1000
)

// Enum value maps for ProbeInfo_CreationMode.
var (
	ProbeInfo_CreationMode_name = map[int32]string{
		0:    "STAND_ALONE",
		1:    "DERIVED",
		2:    "ANY",
		3:    "INTERNAL",
		1000: "OTHER",
	}
	ProbeInfo_CreationMode_value = map[string]int32{
		"STAND_ALONE": 0,
		"DERIVED":     1,
		"ANY":         2,
		"INTERNAL":    3,
		"OTHER":       1000,
	}
)

func (x ProbeInfo_CreationMode) Enum() *ProbeInfo_CreationMode {
	p := new(ProbeInfo_CreationMode)
	*p = x
	return p
}

func (x ProbeInfo_CreationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeInfo_CreationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_MediationMessage_proto_enumTypes[1].Descriptor()
}

func (ProbeInfo_CreationMode) Type() protoreflect.EnumType {
	return &file_MediationMessage_proto_enumTypes[1]
}

func (x ProbeInfo_CreationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProbeInfo_CreationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProbeInfo_CreationMode(num)
	return nil
}

// Deprecated: Use ProbeInfo_CreationMode.Descriptor instead.
func (ProbeInfo_CreationMode) EnumDescriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{28, 0}
}

// Messages, sent from client to server
type MediationClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MediationClientMessage:
	//	*MediationClientMessage_ValidationResponse
	//	*MediationClientMessage_DiscoveryResponse
	//	*MediationClientMessage_KeepAlive
	//	*MediationClientMessage_ActionProgress
	//	*MediationClientMessage_ActionResponse
	//	*MediationClientMessage_TargetUpdateResponse
	//	*MediationClientMessage_ActionErrorsResponse
	//	*MediationClientMessage_ActionStatesResponse
	//	*MediationClientMessage_ActionApprovalResponse
	//	*MediationClientMessage_PlanExportProgress
	//	*MediationClientMessage_PlanExportResult
	//	*MediationClientMessage_TargetOperationError
	//	*MediationClientMessage_ContainerResourceUsage
	//	*MediationClientMessage_ActionListResponse
	MediationClientMessage isMediationClientMessage_MediationClientMessage `protobuf_oneof:"mediation_client_message"`
	// this is always required in reality. it's optional here because
	// we don't know if in the future, with embedded targets, we will
	// still use it or not
	MessageID *int32 `protobuf:"varint,15,opt,name=messageID" json:"messageID,omitempty"`
}

func (x *MediationClientMessage) Reset() {
	*x = MediationClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediationClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediationClientMessage) ProtoMessage() {}

func (x *MediationClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediationClientMessage.ProtoReflect.Descriptor instead.
func (*MediationClientMessage) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{0}
}

func (m *MediationClientMessage) GetMediationClientMessage() isMediationClientMessage_MediationClientMessage {
	if m != nil {
		return m.MediationClientMessage
	}
	return nil
}

func (x *MediationClientMessage) GetValidationResponse() *ValidationResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ValidationResponse); ok {
		return x.ValidationResponse
	}
	return nil
}

func (x *MediationClientMessage) GetDiscoveryResponse() *DiscoveryResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_DiscoveryResponse); ok {
		return x.DiscoveryResponse
	}
	return nil
}

func (x *MediationClientMessage) GetKeepAlive() *KeepAlive {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_KeepAlive); ok {
		return x.KeepAlive
	}
	return nil
}

func (x *MediationClientMessage) GetActionProgress() *ActionProgress {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionProgress); ok {
		return x.ActionProgress
	}
	return nil
}

// Deprecated: Do not use.
func (x *MediationClientMessage) GetActionResponse() *ActionResult {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionResponse); ok {
		return x.ActionResponse
	}
	return nil
}

func (x *MediationClientMessage) GetTargetUpdateResponse() *TargetUpdateResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_TargetUpdateResponse); ok {
		return x.TargetUpdateResponse
	}
	return nil
}

func (x *MediationClientMessage) GetActionErrorsResponse() *ActionErrorsResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionErrorsResponse); ok {
		return x.ActionErrorsResponse
	}
	return nil
}

func (x *MediationClientMessage) GetActionStatesResponse() *GetActionStateResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionStatesResponse); ok {
		return x.ActionStatesResponse
	}
	return nil
}

func (x *MediationClientMessage) GetActionApprovalResponse() *ActionApprovalResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionApprovalResponse); ok {
		return x.ActionApprovalResponse
	}
	return nil
}

func (x *MediationClientMessage) GetPlanExportProgress() *PlanExportProgress {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_PlanExportProgress); ok {
		return x.PlanExportProgress
	}
	return nil
}

func (x *MediationClientMessage) GetPlanExportResult() *PlanExportResult {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_PlanExportResult); ok {
		return x.PlanExportResult
	}
	return nil
}

func (x *MediationClientMessage) GetTargetOperationError() string {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_TargetOperationError); ok {
		return x.TargetOperationError
	}
	return ""
}

func (x *MediationClientMessage) GetContainerResourceUsage() *ContainerResourceUsage {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ContainerResourceUsage); ok {
		return x.ContainerResourceUsage
	}
	return nil
}

func (x *MediationClientMessage) GetActionListResponse() *ActionListResponse {
	if x, ok := x.GetMediationClientMessage().(*MediationClientMessage_ActionListResponse); ok {
		return x.ActionListResponse
	}
	return nil
}

func (x *MediationClientMessage) GetMessageID() int32 {
	if x != nil && x.MessageID != nil {
		return *x.MessageID
	}
	return 0
}

type isMediationClientMessage_MediationClientMessage interface {
	isMediationClientMessage_MediationClientMessage()
}

type MediationClientMessage_ValidationResponse struct {
	ValidationResponse *ValidationResponse `protobuf:"bytes,2,opt,name=validationResponse,oneof"`
}

type MediationClientMessage_DiscoveryResponse struct {
	DiscoveryResponse *DiscoveryResponse `protobuf:"bytes,3,opt,name=discoveryResponse,oneof"`
}

type MediationClientMessage_KeepAlive struct {
	KeepAlive *KeepAlive `protobuf:"bytes,4,opt,name=keepAlive,oneof"`
}

type MediationClientMessage_ActionProgress struct {
	ActionProgress *ActionProgress `protobuf:"bytes,5,opt,name=actionProgress,oneof"`
}

type MediationClientMessage_ActionResponse struct {
	// Single action execution is deprecated in favour of ActionListResponse.
	//
	// Deprecated: Do not use.
	ActionResponse *ActionResult `protobuf:"bytes,6,opt,name=actionResponse,oneof"`
}

type MediationClientMessage_TargetUpdateResponse struct {
	TargetUpdateResponse *TargetUpdateResponse `protobuf:"bytes,7,opt,name=targetUpdateResponse,oneof"`
}

type MediationClientMessage_ActionErrorsResponse struct {
	ActionErrorsResponse *ActionErrorsResponse `protobuf:"bytes,8,opt,name=actionErrorsResponse,oneof"`
}

type MediationClientMessage_ActionStatesResponse struct {
	ActionStatesResponse *GetActionStateResponse `protobuf:"bytes,9,opt,name=actionStatesResponse,oneof"`
}

type MediationClientMessage_ActionApprovalResponse struct {
	ActionApprovalResponse *ActionApprovalResponse `protobuf:"bytes,10,opt,name=actionApprovalResponse,oneof"`
}

type MediationClientMessage_PlanExportProgress struct {
	PlanExportProgress *PlanExportProgress `protobuf:"bytes,11,opt,name=planExportProgress,oneof"`
}

type MediationClientMessage_PlanExportResult struct {
	PlanExportResult *PlanExportResult `protobuf:"bytes,12,opt,name=planExportResult,oneof"`
}

type MediationClientMessage_TargetOperationError struct {
	// Target-wide operation failure. Operation is completely failing
	TargetOperationError string `protobuf:"bytes,13,opt,name=targetOperationError,oneof"`
}

type MediationClientMessage_ContainerResourceUsage struct {
	ContainerResourceUsage *ContainerResourceUsage `protobuf:"bytes,14,opt,name=containerResourceUsage,oneof"`
}

type MediationClientMessage_ActionListResponse struct {
	ActionListResponse *ActionListResponse `protobuf:"bytes,17,opt,name=actionListResponse,oneof"`
}

func (*MediationClientMessage_ValidationResponse) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_DiscoveryResponse) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_KeepAlive) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_ActionProgress) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_ActionResponse) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_TargetUpdateResponse) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_ActionErrorsResponse) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_ActionStatesResponse) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_ActionApprovalResponse) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_PlanExportProgress) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_PlanExportResult) isMediationClientMessage_MediationClientMessage() {}

func (*MediationClientMessage_TargetOperationError) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_ContainerResourceUsage) isMediationClientMessage_MediationClientMessage() {
}

func (*MediationClientMessage_ActionListResponse) isMediationClientMessage_MediationClientMessage() {}

// Messages, sent from server to client
type MediationServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MediationServerMessage:
	//	*MediationServerMessage_ValidationRequest
	//	*MediationServerMessage_DiscoveryRequest
	//	*MediationServerMessage_ActionRequest
	//	*MediationServerMessage_InterruptOperation
	//	*MediationServerMessage_Properties
	//	*MediationServerMessage_TargetUpdateRequest
	//	*MediationServerMessage_ActionApproval
	//	*MediationServerMessage_ActionUpdateState
	//	*MediationServerMessage_GetActionState
	//	*MediationServerMessage_ActionAudit
	//	*MediationServerMessage_PlanExportRequest
	//	*MediationServerMessage_ActionListRequest
	MediationServerMessage isMediationServerMessage_MediationServerMessage `protobuf_oneof:"mediation_server_message"`
	// this is always required in reality. it's optional here because
	// we don't know if in the future, with embedded targets, we will
	// still use it or not
	MessageID *int32 `protobuf:"varint,15,opt,name=messageID" json:"messageID,omitempty"`
}

func (x *MediationServerMessage) Reset() {
	*x = MediationServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediationServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediationServerMessage) ProtoMessage() {}

func (x *MediationServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediationServerMessage.ProtoReflect.Descriptor instead.
func (*MediationServerMessage) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{1}
}

func (m *MediationServerMessage) GetMediationServerMessage() isMediationServerMessage_MediationServerMessage {
	if m != nil {
		return m.MediationServerMessage
	}
	return nil
}

func (x *MediationServerMessage) GetValidationRequest() *ValidationRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ValidationRequest); ok {
		return x.ValidationRequest
	}
	return nil
}

func (x *MediationServerMessage) GetDiscoveryRequest() *DiscoveryRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_DiscoveryRequest); ok {
		return x.DiscoveryRequest
	}
	return nil
}

// Deprecated: Do not use.
func (x *MediationServerMessage) GetActionRequest() *ActionRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ActionRequest); ok {
		return x.ActionRequest
	}
	return nil
}

func (x *MediationServerMessage) GetInterruptOperation() int32 {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_InterruptOperation); ok {
		return x.InterruptOperation
	}
	return 0
}

func (x *MediationServerMessage) GetProperties() *SetProperties {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_Properties); ok {
		return x.Properties
	}
	return nil
}

func (x *MediationServerMessage) GetTargetUpdateRequest() *TargetUpdateRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_TargetUpdateRequest); ok {
		return x.TargetUpdateRequest
	}
	return nil
}

func (x *MediationServerMessage) GetActionApproval() *ActionApprovalRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ActionApproval); ok {
		return x.ActionApproval
	}
	return nil
}

func (x *MediationServerMessage) GetActionUpdateState() *ActionUpdateStateRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ActionUpdateState); ok {
		return x.ActionUpdateState
	}
	return nil
}

func (x *MediationServerMessage) GetGetActionState() *GetActionStateRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_GetActionState); ok {
		return x.GetActionState
	}
	return nil
}

func (x *MediationServerMessage) GetActionAudit() *ActionAuditRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ActionAudit); ok {
		return x.ActionAudit
	}
	return nil
}

func (x *MediationServerMessage) GetPlanExportRequest() *PlanExportRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_PlanExportRequest); ok {
		return x.PlanExportRequest
	}
	return nil
}

func (x *MediationServerMessage) GetActionListRequest() *ActionListRequest {
	if x, ok := x.GetMediationServerMessage().(*MediationServerMessage_ActionListRequest); ok {
		return x.ActionListRequest
	}
	return nil
}

func (x *MediationServerMessage) GetMessageID() int32 {
	if x != nil && x.MessageID != nil {
		return *x.MessageID
	}
	return 0
}

type isMediationServerMessage_MediationServerMessage interface {
	isMediationServerMessage_MediationServerMessage()
}

type MediationServerMessage_ValidationRequest struct {
	ValidationRequest *ValidationRequest `protobuf:"bytes,2,opt,name=validationRequest,oneof"`
}

type MediationServerMessage_DiscoveryRequest struct {
	DiscoveryRequest *DiscoveryRequest `protobuf:"bytes,3,opt,name=discoveryRequest,oneof"`
}

type MediationServerMessage_ActionRequest struct {
	// Single action execution is deprecated in favour of ActionListRequest.
	//
	// Deprecated: Do not use.
	ActionRequest *ActionRequest `protobuf:"bytes,4,opt,name=actionRequest,oneof"`
}

type MediationServerMessage_InterruptOperation struct {
	// Interrupt the specified operation, running on the client side
	// The value is a message id of the server request, that triggered
	// the operation (discovery Request, validationRequest and so on)
	InterruptOperation int32 `protobuf:"varint,5,opt,name=interruptOperation,oneof"`
}

type MediationServerMessage_Properties struct {
	// Modify the properties at the container side
	Properties *SetProperties `protobuf:"bytes,6,opt,name=properties,oneof"`
}

type MediationServerMessage_TargetUpdateRequest struct {
	TargetUpdateRequest *TargetUpdateRequest `protobuf:"bytes,7,opt,name=targetUpdateRequest,oneof"`
}

type MediationServerMessage_ActionApproval struct {
	// Request for action approval.
	// Can respond with actionApprovalResponse, keepAlive, targetOperationError.
	ActionApproval *ActionApprovalRequest `protobuf:"bytes,8,opt,name=actionApproval,oneof"`
}

type MediationServerMessage_ActionUpdateState struct {
	// Request for action state updates
	// Can respond with actionErrorsResponse, keepAlive, targetOperationError.
	ActionUpdateState *ActionUpdateStateRequest `protobuf:"bytes,9,opt,name=actionUpdateState,oneof"`
}

type MediationServerMessage_GetActionState struct {
	// Request for retrieving action state updates
	// Can respond with actionStatesResponse, keepAlive, targetOperationError.
	GetActionState *GetActionStateRequest `protobuf:"bytes,10,opt,name=getActionState,oneof"`
}

type MediationServerMessage_ActionAudit struct {
	// Request for submitting action events to external log
	// Can respond with actionErrorsResponse, keepAlive, targetOperationError.
	ActionAudit *ActionAuditRequest `protobuf:"bytes,11,opt,name=actionAudit,oneof"`
}

type MediationServerMessage_PlanExportRequest struct {
	PlanExportRequest *PlanExportRequest `protobuf:"bytes,12,opt,name=planExportRequest,oneof"`
}

type MediationServerMessage_ActionListRequest struct {
	// List of actions for execution.
	ActionListRequest *ActionListRequest `protobuf:"bytes,13,opt,name=actionListRequest,oneof"`
}

func (*MediationServerMessage_ValidationRequest) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_DiscoveryRequest) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_ActionRequest) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_InterruptOperation) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_Properties) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_TargetUpdateRequest) isMediationServerMessage_MediationServerMessage() {
}

func (*MediationServerMessage_ActionApproval) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_ActionUpdateState) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_GetActionState) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_ActionAudit) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_PlanExportRequest) isMediationServerMessage_MediationServerMessage() {}

func (*MediationServerMessage_ActionListRequest) isMediationServerMessage_MediationServerMessage() {}

type RequestTargetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Probe type
	ProbeType *string `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	// Account values provide data to allow the probe to allow it to connect
	// to the probe
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
}

func (x *RequestTargetId) Reset() {
	*x = RequestTargetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTargetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTargetId) ProtoMessage() {}

func (x *RequestTargetId) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTargetId.ProtoReflect.Descriptor instead.
func (*RequestTargetId) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{2}
}

func (x *RequestTargetId) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *RequestTargetId) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

// Request for action to be performed in probe
type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeType *string `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	// Account values provide data to allow the probe to allow it to connect
	// to the probe
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
	// An action execution DTO contains one or more action items
	ActionExecutionDTO *ActionExecutionDTO `protobuf:"bytes,3,req,name=actionExecutionDTO" json:"actionExecutionDTO,omitempty"`
	// For Cross Destination actions (from one target to another) 2 sets of account
	// values are needed
	SecondaryAccountValue []*AccountValue `protobuf:"bytes,4,rep,name=secondaryAccountValue" json:"secondaryAccountValue,omitempty"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{3}
}

func (x *ActionRequest) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *ActionRequest) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

func (x *ActionRequest) GetActionExecutionDTO() *ActionExecutionDTO {
	if x != nil {
		return x.ActionExecutionDTO
	}
	return nil
}

func (x *ActionRequest) GetSecondaryAccountValue() []*AccountValue {
	if x != nil {
		return x.SecondaryAccountValue
	}
	return nil
}

// Request for a list of related actions to be executed by probe. Actions in the list must be
// related. If probe receives unrelated actions in the same request execution will fail. Unrelated
// actions must be sent as separate requests.
// Example of related actions: Azure Volume Scale actions. Azure Volume Scale actions are
// disruptive, that is VM shutdown is required before scaling a Volume. If multiple Volumes are
// attached to the same VM the VM should be shut down only once before scaling all attached
// Volumes. In this case Volume Scale actions should be sent as a list rather than as separate
// requests.
type ActionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeType    *string         `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
	// A list of action execution DTOs.
	ActionExecution []*ActionExecutionDTO `protobuf:"bytes,3,rep,name=actionExecution" json:"actionExecution,omitempty"`
	// For Cross Destination actions (from one target to another) 2 sets of account
	// values are needed.
	SecondaryAccountValue []*AccountValue `protobuf:"bytes,4,rep,name=secondaryAccountValue" json:"secondaryAccountValue,omitempty"`
}

func (x *ActionListRequest) Reset() {
	*x = ActionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListRequest) ProtoMessage() {}

func (x *ActionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListRequest.ProtoReflect.Descriptor instead.
func (*ActionListRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{4}
}

func (x *ActionListRequest) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *ActionListRequest) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

func (x *ActionListRequest) GetActionExecution() []*ActionExecutionDTO {
	if x != nil {
		return x.ActionExecution
	}
	return nil
}

func (x *ActionListRequest) GetSecondaryAccountValue() []*AccountValue {
	if x != nil {
		return x.SecondaryAccountValue
	}
	return nil
}

// Result of the action execution. It is translated only once
// after action execution is either completed or failed
type ActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ActionResponse `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
}

func (x *ActionResult) Reset() {
	*x = ActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResult) ProtoMessage() {}

func (x *ActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResult.ProtoReflect.Descriptor instead.
func (*ActionResult) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{5}
}

func (x *ActionResult) GetResponse() *ActionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Action list execution result. It is translated only once after all action executions are either
// completed or failed.
type ActionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*ActionResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
}

func (x *ActionListResponse) Reset() {
	*x = ActionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionListResponse) ProtoMessage() {}

func (x *ActionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionListResponse.ProtoReflect.Descriptor instead.
func (*ActionListResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{6}
}

func (x *ActionListResponse) GetResponse() []*ActionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Progress of the currently executed action. Can be send multiple times
// for each action
type ActionProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ActionResponse `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
}

func (x *ActionProgress) Reset() {
	*x = ActionProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionProgress) ProtoMessage() {}

func (x *ActionProgress) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionProgress.ProtoReflect.Descriptor instead.
func (*ActionProgress) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{7}
}

func (x *ActionProgress) GetResponse() *ActionResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// This class holds response information about executing action. It contains: response: the
// ActionResponseState code representing the state of executing action responseDescription: the
// description message notifying detailed information about current status of executing action
type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current action state
	ActionResponseState *ActionResponseState `protobuf:"varint,1,req,name=actionResponseState,enum=common_dto.ActionResponseState" json:"actionResponseState,omitempty"`
	// current action progress (0..100)
	Progress *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	// action state description, for example ("Moving VM...")
	ResponseDescription *string `protobuf:"bytes,3,req,name=responseDescription" json:"responseDescription,omitempty"`
	// optional actionOid, if any specific action is associated with this message
	ActionOid *int64 `protobuf:"varint,4,opt,name=actionOid" json:"actionOid,omitempty"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{8}
}

func (x *ActionResponse) GetActionResponseState() ActionResponseState {
	if x != nil && x.ActionResponseState != nil {
		return *x.ActionResponseState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (x *ActionResponse) GetProgress() int32 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *ActionResponse) GetResponseDescription() string {
	if x != nil && x.ResponseDescription != nil {
		return *x.ResponseDescription
	}
	return ""
}

func (x *ActionResponse) GetActionOid() int64 {
	if x != nil && x.ActionOid != nil {
		return *x.ActionOid
	}
	return 0
}

// TargetUpdateResponse is the response of a TargetUpdateRequest message.
// It contains the response, and any errors encountered during the target update attempt.
type TargetUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Errors, discovered during external probe operation
	ErrorDTO []*ErrorDTO `protobuf:"bytes,1,rep,name=errorDTO" json:"errorDTO,omitempty"`
}

func (x *TargetUpdateResponse) Reset() {
	*x = TargetUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetUpdateResponse) ProtoMessage() {}

func (x *TargetUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetUpdateResponse.ProtoReflect.Descriptor instead.
func (*TargetUpdateResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{9}
}

func (x *TargetUpdateResponse) GetErrorDTO() []*ErrorDTO {
	if x != nil {
		return x.ErrorDTO
	}
	return nil
}

// Response for getActionStates request
type GetActionStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action states from the backend
	ActionState map[int64]ActionResponseState `protobuf:"bytes,1,rep,name=actionState" json:"actionState,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=common_dto.ActionResponseState"`
	// Error messages. Must have records for every action that failed processing
	Errors []*ActionErrorDTO `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (x *GetActionStateResponse) Reset() {
	*x = GetActionStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionStateResponse) ProtoMessage() {}

func (x *GetActionStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionStateResponse.ProtoReflect.Descriptor instead.
func (*GetActionStateResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{10}
}

func (x *GetActionStateResponse) GetActionState() map[int64]ActionResponseState {
	if x != nil {
		return x.ActionState
	}
	return nil
}

func (x *GetActionStateResponse) GetErrors() []*ActionErrorDTO {
	if x != nil {
		return x.Errors
	}
	return nil
}

// ContainerInfo message to the Operations Manager server.
// This message passes probe descriptions to the server.
type ContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of ProbeInfo objects, each one will carry information about one of the probe
	// that the container has loaded internally.
	Probes []*ProbeInfo `protobuf:"bytes,1,rep,name=probes" json:"probes,omitempty"`
	// These will be the target ids that the probe instances inside this container will have a
	// connection with. This is needed to be sent during registration time to the TP in case it
	// restarted while the probes still had some open listeners. In this way TP will be able to
	// rebuild a mapping of which container is connected to which targets.
	//
	// Deprecated: Do not use.
	PersistentTargetIds []string `protobuf:"bytes,2,rep,name=persistentTargetIds" json:"persistentTargetIds,omitempty"`
	// Map of probe type to the set of persistent targets for that probe type. Previous, deprecated,
	// implementation only gave a set of target IDs, which is not sufficient given that
	// target IDs are not unique across probe types.
	PersistentTargetIdMap map[string]*ContainerInfo_TargetIdSet `protobuf:"bytes,3,rep,name=persistentTargetIdMap" json:"persistentTargetIdMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Name of the communication channel on which this container can operate. Expressed as
	// an arbitrary string. Targets with a specified channel can only be discovered by probe
	// containers with the same channel. This doesn't apply to the opposite scenario: a container
	// with a communication channel can discover any target without a channel. The same goes for a
	// container without a communication channel, that can discover any target without a channel
	CommunicationBindingChannel *string `protobuf:"bytes,4,opt,name=communicationBindingChannel" json:"communicationBindingChannel,omitempty"`
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{11}
}

func (x *ContainerInfo) GetProbes() []*ProbeInfo {
	if x != nil {
		return x.Probes
	}
	return nil
}

// Deprecated: Do not use.
func (x *ContainerInfo) GetPersistentTargetIds() []string {
	if x != nil {
		return x.PersistentTargetIds
	}
	return nil
}

func (x *ContainerInfo) GetPersistentTargetIdMap() map[string]*ContainerInfo_TargetIdSet {
	if x != nil {
		return x.PersistentTargetIdMap
	}
	return nil
}

func (x *ContainerInfo) GetCommunicationBindingChannel() string {
	if x != nil && x.CommunicationBindingChannel != nil {
		return *x.CommunicationBindingChannel
	}
	return ""
}

type KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{12}
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{13}
}

// This message is sent from the server to the client when the client is successfully registered
// and contains important initialization information.  For the time being, this message ensures
// that, if probe properties are available at the server site, then they can be transferred to the
// client site at least once.
// Later, this message may contain more initialization information that a client must obtain at
// least once.
type InitializationContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeProperties *SetProperties `protobuf:"bytes,1,req,name=probeProperties" json:"probeProperties,omitempty"`
}

func (x *InitializationContent) Reset() {
	*x = InitializationContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializationContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializationContent) ProtoMessage() {}

func (x *InitializationContent) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializationContent.ProtoReflect.Descriptor instead.
func (*InitializationContent) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{14}
}

func (x *InitializationContent) GetProbeProperties() *SetProperties {
	if x != nil {
		return x.ProbeProperties
	}
	return nil
}

type ValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeType    *string         `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
}

func (x *ValidationRequest) Reset() {
	*x = ValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationRequest) ProtoMessage() {}

func (x *ValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationRequest.ProtoReflect.Descriptor instead.
func (*ValidationRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{15}
}

func (x *ValidationRequest) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *ValidationRequest) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

type DiscoveryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeType    *string         `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
	// the type of discovery defined by this request
	DiscoveryType *DiscoveryType `protobuf:"varint,3,req,name=discoveryType,enum=common_dto.DiscoveryType" json:"discoveryType,omitempty"`
	// Discovery context contains data that was sent by the probe to the server in the previous
	// discovery response.
	DiscoveryContext *DiscoveryContextDTO `protobuf:"bytes,4,opt,name=discoveryContext" json:"discoveryContext,omitempty"`
}

func (x *DiscoveryRequest) Reset() {
	*x = DiscoveryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryRequest) ProtoMessage() {}

func (x *DiscoveryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryRequest.ProtoReflect.Descriptor instead.
func (*DiscoveryRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{16}
}

func (x *DiscoveryRequest) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *DiscoveryRequest) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

func (x *DiscoveryRequest) GetDiscoveryType() DiscoveryType {
	if x != nil && x.DiscoveryType != nil {
		return *x.DiscoveryType
	}
	return DiscoveryType_FULL
}

func (x *DiscoveryRequest) GetDiscoveryContext() *DiscoveryContextDTO {
	if x != nil {
		return x.DiscoveryContext
	}
	return nil
}

// This message is sent from server to the client that notify to update or delete
// remote probe instance.
type TargetUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeType    *string         `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	AccountValue []*AccountValue `protobuf:"bytes,2,rep,name=accountValue" json:"accountValue,omitempty"`
	// the type of update defined by this request
	UpdateType *UpdateType `protobuf:"varint,3,req,name=updateType,enum=common_dto.UpdateType" json:"updateType,omitempty"`
}

func (x *TargetUpdateRequest) Reset() {
	*x = TargetUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetUpdateRequest) ProtoMessage() {}

func (x *TargetUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetUpdateRequest.ProtoReflect.Descriptor instead.
func (*TargetUpdateRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{17}
}

func (x *TargetUpdateRequest) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *TargetUpdateRequest) GetAccountValue() []*AccountValue {
	if x != nil {
		return x.AccountValue
	}
	return nil
}

func (x *TargetUpdateRequest) GetUpdateType() UpdateType {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return UpdateType_UPDATED
}

// Request to approve actions in the action approval backend.
type ActionApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target to execute request on
	Target *RequestTargetId `protobuf:"bytes,1,req,name=target" json:"target,omitempty"`
	// Actinos to request approval for
	Action []*ActionExecutionDTO `protobuf:"bytes,2,rep,name=action" json:"action,omitempty"`
}

func (x *ActionApprovalRequest) Reset() {
	*x = ActionApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionApprovalRequest) ProtoMessage() {}

func (x *ActionApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionApprovalRequest.ProtoReflect.Descriptor instead.
func (*ActionApprovalRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{18}
}

func (x *ActionApprovalRequest) GetTarget() *RequestTargetId {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ActionApprovalRequest) GetAction() []*ActionExecutionDTO {
	if x != nil {
		return x.Action
	}
	return nil
}

// Response for getActionApprovalResponse request
type ActionApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action states from the thirdParty integration
	ActionState map[int64]*ExternalActionInfo `protobuf:"bytes,1,rep,name=actionState" json:"actionState,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Errors, if any.
	Errors []*ActionErrorDTO `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (x *ActionApprovalResponse) Reset() {
	*x = ActionApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionApprovalResponse) ProtoMessage() {}

func (x *ActionApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionApprovalResponse.ProtoReflect.Descriptor instead.
func (*ActionApprovalResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{19}
}

func (x *ActionApprovalResponse) GetActionState() map[int64]*ExternalActionInfo {
	if x != nil {
		return x.ActionState
	}
	return nil
}

func (x *ActionApprovalResponse) GetErrors() []*ActionErrorDTO {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Response for action state updates request.
type ActionErrorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of errors, if any
	Errors []*ActionErrorDTO `protobuf:"bytes,1,rep,name=errors" json:"errors,omitempty"`
}

func (x *ActionErrorsResponse) Reset() {
	*x = ActionErrorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionErrorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionErrorsResponse) ProtoMessage() {}

func (x *ActionErrorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionErrorsResponse.ProtoReflect.Descriptor instead.
func (*ActionErrorsResponse) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{20}
}

func (x *ActionErrorsResponse) GetErrors() []*ActionErrorDTO {
	if x != nil {
		return x.Errors
	}
	return nil
}

// Request sent to action approval backend to update action states at the backend
type ActionUpdateStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target to execute request on
	Target *RequestTargetId `protobuf:"bytes,1,req,name=target" json:"target,omitempty"`
	// Action states to update
	ActionState []*ActionResponse `protobuf:"bytes,2,rep,name=actionState" json:"actionState,omitempty"`
}

func (x *ActionUpdateStateRequest) Reset() {
	*x = ActionUpdateStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionUpdateStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionUpdateStateRequest) ProtoMessage() {}

func (x *ActionUpdateStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionUpdateStateRequest.ProtoReflect.Descriptor instead.
func (*ActionUpdateStateRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{21}
}

func (x *ActionUpdateStateRequest) GetTarget() *RequestTargetId {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ActionUpdateStateRequest) GetActionState() []*ActionResponse {
	if x != nil {
		return x.ActionState
	}
	return nil
}

// Response message for requesting action states
type GetActionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target to execute request on
	Target *RequestTargetId `protobuf:"bytes,1,req,name=target" json:"target,omitempty"`
	// Collection of action ids to request states of
	ActionOid []int64 `protobuf:"varint,2,rep,name=actionOid" json:"actionOid,omitempty"`
	// Whether to add all the unclosed approval requests to the response
	// All the action states except PENDING_APPROVAL, MISSED, FAILED, SUCCCEEDED are treated
	// as in-transition states
	IncludeAllActionsInTransition *bool `protobuf:"varint,3,req,name=includeAllActionsInTransition" json:"includeAllActionsInTransition,omitempty"`
}

func (x *GetActionStateRequest) Reset() {
	*x = GetActionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActionStateRequest) ProtoMessage() {}

func (x *GetActionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActionStateRequest.ProtoReflect.Descriptor instead.
func (*GetActionStateRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{22}
}

func (x *GetActionStateRequest) GetTarget() *RequestTargetId {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *GetActionStateRequest) GetActionOid() []int64 {
	if x != nil {
		return x.ActionOid
	}
	return nil
}

func (x *GetActionStateRequest) GetIncludeAllActionsInTransition() bool {
	if x != nil && x.IncludeAllActionsInTransition != nil {
		return *x.IncludeAllActionsInTransition
	}
	return false
}

// Request to approve actions in the action approval backend.
type ActionAuditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target to execute request on
	Target *RequestTargetId `protobuf:"bytes,1,req,name=target" json:"target,omitempty"`
	// Collection of action events to audit
	Action []*ActionEventDTO `protobuf:"bytes,2,rep,name=action" json:"action,omitempty"`
}

func (x *ActionAuditRequest) Reset() {
	*x = ActionAuditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAuditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAuditRequest) ProtoMessage() {}

func (x *ActionAuditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAuditRequest.ProtoReflect.Descriptor instead.
func (*ActionAuditRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{23}
}

func (x *ActionAuditRequest) GetTarget() *RequestTargetId {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ActionAuditRequest) GetAction() []*ActionEventDTO {
	if x != nil {
		return x.Action
	}
	return nil
}

// Request to export the results of a plan to a destination defined by the probe.
type PlanExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target to execute request on
	Target *RequestTargetId `protobuf:"bytes,1,req,name=target" json:"target,omitempty"`
	// The data to be exported
	PlanData *PlanExportDTO `protobuf:"bytes,2,req,name=planData" json:"planData,omitempty"`
	// The destination for the data -- must be of type PLAN_DESTINATION
	PlanDestination *NonMarketEntityDTO `protobuf:"bytes,3,req,name=planDestination" json:"planDestination,omitempty"`
}

func (x *PlanExportRequest) Reset() {
	*x = PlanExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanExportRequest) ProtoMessage() {}

func (x *PlanExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanExportRequest.ProtoReflect.Descriptor instead.
func (*PlanExportRequest) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{24}
}

func (x *PlanExportRequest) GetTarget() *RequestTargetId {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PlanExportRequest) GetPlanData() *PlanExportDTO {
	if x != nil {
		return x.PlanData
	}
	return nil
}

func (x *PlanExportRequest) GetPlanDestination() *NonMarketEntityDTO {
	if x != nil {
		return x.PlanDestination
	}
	return nil
}

// Progress of a plan export operation. Can be send multiple times
// for each export operation.
type PlanExportProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *PlanExportResponse `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
}

func (x *PlanExportProgress) Reset() {
	*x = PlanExportProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanExportProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanExportProgress) ProtoMessage() {}

func (x *PlanExportProgress) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanExportProgress.ProtoReflect.Descriptor instead.
func (*PlanExportProgress) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{25}
}

func (x *PlanExportProgress) GetResponse() *PlanExportResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Result of the plan export operation. It is transmitted only once
// after action execution is either completed or failed
type PlanExportResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *PlanExportResponse `protobuf:"bytes,1,req,name=response" json:"response,omitempty"`
}

func (x *PlanExportResult) Reset() {
	*x = PlanExportResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanExportResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanExportResult) ProtoMessage() {}

func (x *PlanExportResult) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanExportResult.ProtoReflect.Descriptor instead.
func (*PlanExportResult) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{26}
}

func (x *PlanExportResult) GetResponse() *PlanExportResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// Information about resource usage by the container
type ContainerResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerResource []*ContainerResourceUsage_ContainerResource `protobuf:"bytes,1,rep,name=containerResource" json:"containerResource,omitempty"`
}

func (x *ContainerResourceUsage) Reset() {
	*x = ContainerResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceUsage) ProtoMessage() {}

func (x *ContainerResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceUsage.ProtoReflect.Descriptor instead.
func (*ContainerResourceUsage) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{27}
}

func (x *ContainerResourceUsage) GetContainerResource() []*ContainerResourceUsage_ContainerResource {
	if x != nil {
		return x.ContainerResource
	}
	return nil
}

// The ProbeInfo class provides a description of the probe that enables users to
// attach Operations Manager to a target, and enables the probe to add entities to the
// Operations Manager market as valid members of the supply chain.
//
// To enable users to use this probe, the ProbeInfo includes a probe type and
// the set of fields a user must give to provide credentials and other data necessary to
// attach to a target. The probe type is an arbitrary string, but REST API calls that
// invoke this probe must refer to it by the same type.
//
// To enable adding entities to the Operations Manager market, the ProbeInfo includes a
// set of {@link TemplateDTO} objects called the supplyChainDefinitionSet.
// Each template object describes an entity type that
// the probe can discover and add to the market. This description includes an EntityDTO object
// and its corresponding lists of bought and sold {@code CommodityDTO} objects. As the probe
// discovers entities, it must create instances that map to members of the supplyChainDefinitionSet.
type ProbeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// probeType is a string identifier to define the type of the probe. You specify the value for this string in the
	// {@code probe-conf.xml} file for your probe. Note that for a given instance of Operations Manager,
	// every probe communicating with the server must have a unique type.
	//
	// The probe you create must include a type
	// to display in the user interface. The string you provide for the probe type appears
	// in the Target Configuration form as one of the choices for the category that you set for the probe.
	//
	// For example, in the standard targets, Hypervisor is a category. If your probe
	// category is also {@code Hypervisor} and you specify a type of 'MyProbe', then MyProbe
	// will appear in the user interface as an additional Hypervisor choice.
	// On the other hand, if the category you provide does not match one of the standard categories,
	// MyProbe will appear as a choice in the CUSTOM category.
	ProbeType *string `protobuf:"bytes,1,req,name=probeType" json:"probeType,omitempty"`
	// String identifier to define the functional category of the probe. You specify the value for
	// this string in the configuration file for your probe. It implies stitching and actions
	// in Topology Processor.
	//
	// The set of standard categories is defined in the 'ProbeCategory' enumeration.
	ProbeCategory *string `protobuf:"bytes,2,req,name=probeCategory" json:"probeCategory,omitempty"`
	// Set of TemplateDTO objects that defines the types of entities the probe discovers, and
	// what their bought and sold commodities are. Any entity instances the probe creates must match
	// members of this set.
	SupplyChainDefinitionSet []*TemplateDTO `protobuf:"bytes,3,rep,name=supplyChainDefinitionSet" json:"supplyChainDefinitionSet,omitempty"`
	// List of AccountDefEntry objects that describe the fields users provide as
	// input (i.e. ip, user, pass, ...). These fields appear in the Operations Manager user interface
	// when users add targets of this probe's type. REST API calls to add targets also provide data
	// for these fields (i.e. ip, user, password, ...).
	//
	// Order of elements in the list specifyes the order they appear in the UI.
	// List must not contain entries with equal "name" field. This is up to client to ensure this.
	AccountDefinition []*AccountDefEntry `protobuf:"bytes,4,rep,name=accountDefinition" json:"accountDefinition,omitempty"`
	// The field name, that should be treated as target identifier. There must be at least 1 value
	TargetIdentifierField []string `protobuf:"bytes,5,rep,name=targetIdentifierField" json:"targetIdentifierField,omitempty"`
	// Specifies the interval at which discoveries will be executed for this probe.
	// The value is specified in seconds. If no value is provided for rediscoveryIntervalSeconds
	// a default of 600 seconds (10 minutes) will be used. The minimum value allowed for this
	// field is 60 seconds (1 minute).
	FullRediscoveryIntervalSeconds *int32 `protobuf:"varint,6,opt,name=fullRediscoveryIntervalSeconds" json:"fullRediscoveryIntervalSeconds,omitempty"`
	// EntityIdentityMetadata supplies meta information describing the properties used to identify
	// all of the entities that a probe may discover. There should be one EntityIdentityMetadata
	// for each type of entity that a probe may discover.
	EntityMetadata []*EntityIdentityMetadata `protobuf:"bytes,7,rep,name=entityMetadata" json:"entityMetadata,omitempty"`
	// Action policy provides data about entity types and actions that can be applied to them
	ActionPolicy []*ActionPolicyDTO `protobuf:"bytes,8,rep,name=actionPolicy" json:"actionPolicy,omitempty"`
	// Indicates whether the probe discovers ServiceEntities and thus has a SupplyChain and
	// identity meta data.
	DiscoversSupplyChain *bool `protobuf:"varint,9,opt,name=discoversSupplyChain,def=1" json:"discoversSupplyChain,omitempty"`
	// Specifies the interval at which incremental discoveries will be executed for this probe.
	// The value is specified in seconds. If no value is provided for incrementalRediscoveryIntervalSeconds
	// a default of -1 will be used, which means the probe doesn't support incremental discovery
	IncrementalRediscoveryIntervalSeconds *int32 `protobuf:"varint,10,opt,name=incrementalRediscoveryIntervalSeconds" json:"incrementalRediscoveryIntervalSeconds,omitempty"`
	// Specifies the interval at which performance discoveries will be executed for this probe.
	// The value is specified in seconds. If no value is provided for performanceRediscoveryIntervalSeconds
	// a default of -1 will be used, which means the probe doesn't support performance discovery
	//
	// Deprecated: Do not use.
	PerformanceRediscoveryIntervalSeconds *int32 `protobuf:"varint,11,opt,name=performanceRediscoveryIntervalSeconds" json:"performanceRediscoveryIntervalSeconds,omitempty"`
	// If action approval is supported by the probe, this field will hold parameters for the feature
	ActionApproval *ActionApprovalFeature `protobuf:"bytes,12,opt,name=actionApproval" json:"actionApproval,omitempty"`
	// If action audit is supported by the probe, this field will hold parameters for the feature
	ActionAudit *ActionAuditFeature `protobuf:"bytes,13,opt,name=actionAudit" json:"actionAudit,omitempty"`
	// If plan export is supported by the probe, this field will hold parameters for the feature
	PlanExport *PlanExportFeature `protobuf:"bytes,14,opt,name=planExport" json:"planExport,omitempty"`
	// Indicates how targets that use this probe are created,
	// this information will be used to show/hide the probe from the "Add Targets" section in the UI.
	CreationMode *ProbeInfo_CreationMode `protobuf:"varint,15,opt,name=creationMode,enum=common_dto.ProbeInfo_CreationMode" json:"creationMode,omitempty"`
	// String identifier to define the UI category of the probe. You specify the value for this
	// string in the 'probe-conf.xml' file for your probe.
	//
	// The probe you create should include a UI category.
	// If the category you provide matches one of the standard categories, then your probe will appear
	// as a choice in the Target Configuration form alongside the other members of that category.
	// For example, in the standard targets, 'Hypervisor' is a category. If your probe
	// category is also 'Hypervisor' and you specify a type of 'MyProbe', then MyProbe
	// will appear in the user interface as an additional 'Hypervisor' choice.
	// On the other hand, if the category you provide does not match one of the standard categories,
	// MyProbe will appear as a choice in the 'CUSTOM' category.
	//
	// The set of standard categories is defined in the 'ProbeCategory' enumeration.
	UiProbeCategory *string `protobuf:"bytes,16,opt,name=uiProbeCategory" json:"uiProbeCategory,omitempty"`
	// License of the probe. The probe could have a specific license restriction.
	// If a license is specified, this probe is only enabled if the uploaded license contains this
	// feature. The probe license can be empty which means that there is no restrictions on using
	// the probe.
	License *string `protobuf:"bytes,17,opt,name=license" json:"license,omitempty"`
	//The list of action merge policy sent by  a probe.
	ActionMergePolicy []*ActionMergePolicyDTO `protobuf:"bytes,18,rep,name=actionMergePolicy" json:"actionMergePolicy,omitempty"`
	// If we support the V2 of action types where the action type is consistent with what is seen
	// in API
	SupportsV2ActionTypes *bool `protobuf:"varint,19,opt,name=supportsV2ActionTypes" json:"supportsV2ActionTypes,omitempty"`
	// The version of the probe; this can be different for different probes of the same type.
	Version *string `protobuf:"bytes,20,opt,name=version" json:"version,omitempty"`
	// The display name of the probe; this can/should be different for different probes of the
	// same type.  If not specified, the system will generate one.
	DisplayName *string `protobuf:"bytes,21,opt,name=displayName" json:"displayName,omitempty"`
}

// Default values for ProbeInfo fields.
const (
	Default_ProbeInfo_DiscoversSupplyChain = bool(true)
)

func (x *ProbeInfo) Reset() {
	*x = ProbeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProbeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeInfo) ProtoMessage() {}

func (x *ProbeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeInfo.ProtoReflect.Descriptor instead.
func (*ProbeInfo) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{28}
}

func (x *ProbeInfo) GetProbeType() string {
	if x != nil && x.ProbeType != nil {
		return *x.ProbeType
	}
	return ""
}

func (x *ProbeInfo) GetProbeCategory() string {
	if x != nil && x.ProbeCategory != nil {
		return *x.ProbeCategory
	}
	return ""
}

func (x *ProbeInfo) GetSupplyChainDefinitionSet() []*TemplateDTO {
	if x != nil {
		return x.SupplyChainDefinitionSet
	}
	return nil
}

func (x *ProbeInfo) GetAccountDefinition() []*AccountDefEntry {
	if x != nil {
		return x.AccountDefinition
	}
	return nil
}

func (x *ProbeInfo) GetTargetIdentifierField() []string {
	if x != nil {
		return x.TargetIdentifierField
	}
	return nil
}

func (x *ProbeInfo) GetFullRediscoveryIntervalSeconds() int32 {
	if x != nil && x.FullRediscoveryIntervalSeconds != nil {
		return *x.FullRediscoveryIntervalSeconds
	}
	return 0
}

func (x *ProbeInfo) GetEntityMetadata() []*EntityIdentityMetadata {
	if x != nil {
		return x.EntityMetadata
	}
	return nil
}

func (x *ProbeInfo) GetActionPolicy() []*ActionPolicyDTO {
	if x != nil {
		return x.ActionPolicy
	}
	return nil
}

func (x *ProbeInfo) GetDiscoversSupplyChain() bool {
	if x != nil && x.DiscoversSupplyChain != nil {
		return *x.DiscoversSupplyChain
	}
	return Default_ProbeInfo_DiscoversSupplyChain
}

func (x *ProbeInfo) GetIncrementalRediscoveryIntervalSeconds() int32 {
	if x != nil && x.IncrementalRediscoveryIntervalSeconds != nil {
		return *x.IncrementalRediscoveryIntervalSeconds
	}
	return 0
}

// Deprecated: Do not use.
func (x *ProbeInfo) GetPerformanceRediscoveryIntervalSeconds() int32 {
	if x != nil && x.PerformanceRediscoveryIntervalSeconds != nil {
		return *x.PerformanceRediscoveryIntervalSeconds
	}
	return 0
}

func (x *ProbeInfo) GetActionApproval() *ActionApprovalFeature {
	if x != nil {
		return x.ActionApproval
	}
	return nil
}

func (x *ProbeInfo) GetActionAudit() *ActionAuditFeature {
	if x != nil {
		return x.ActionAudit
	}
	return nil
}

func (x *ProbeInfo) GetPlanExport() *PlanExportFeature {
	if x != nil {
		return x.PlanExport
	}
	return nil
}

func (x *ProbeInfo) GetCreationMode() ProbeInfo_CreationMode {
	if x != nil && x.CreationMode != nil {
		return *x.CreationMode
	}
	return ProbeInfo_STAND_ALONE
}

func (x *ProbeInfo) GetUiProbeCategory() string {
	if x != nil && x.UiProbeCategory != nil {
		return *x.UiProbeCategory
	}
	return ""
}

func (x *ProbeInfo) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *ProbeInfo) GetActionMergePolicy() []*ActionMergePolicyDTO {
	if x != nil {
		return x.ActionMergePolicy
	}
	return nil
}

func (x *ProbeInfo) GetSupportsV2ActionTypes() bool {
	if x != nil && x.SupportsV2ActionTypes != nil {
		return *x.SupportsV2ActionTypes
	}
	return false
}

func (x *ProbeInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ProbeInfo) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

// Action approval feature parameters.
type ActionApprovalFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionApprovalFeature) Reset() {
	*x = ActionApprovalFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionApprovalFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionApprovalFeature) ProtoMessage() {}

func (x *ActionApprovalFeature) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionApprovalFeature.ProtoReflect.Descriptor instead.
func (*ActionApprovalFeature) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{29}
}

// Action audit feature parameters.
type ActionAuditFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionAuditFeature) Reset() {
	*x = ActionAuditFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAuditFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAuditFeature) ProtoMessage() {}

func (x *ActionAuditFeature) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAuditFeature.ProtoReflect.Descriptor instead.
func (*ActionAuditFeature) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{30}
}

// Plan export feature parameters.
type PlanExportFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlanExportFeature) Reset() {
	*x = PlanExportFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanExportFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanExportFeature) ProtoMessage() {}

func (x *PlanExportFeature) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanExportFeature.ProtoReflect.Descriptor instead.
func (*PlanExportFeature) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{31}
}

// The {@code SetProperties} message sends a collection of properties to a target in the form
// of a map from string to string.
type SetProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties map[string]string `protobuf:"bytes,4,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *SetProperties) Reset() {
	*x = SetProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProperties) ProtoMessage() {}

func (x *SetProperties) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProperties.ProtoReflect.Descriptor instead.
func (*SetProperties) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{32}
}

func (x *SetProperties) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Set of target identifying fields each representing a persistent target that the container is
// connected to
type ContainerInfo_TargetIdSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetId []string `protobuf:"bytes,1,rep,name=targetId" json:"targetId,omitempty"`
}

func (x *ContainerInfo_TargetIdSet) Reset() {
	*x = ContainerInfo_TargetIdSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_TargetIdSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_TargetIdSet) ProtoMessage() {}

func (x *ContainerInfo_TargetIdSet) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_TargetIdSet.ProtoReflect.Descriptor instead.
func (*ContainerInfo_TargetIdSet) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ContainerInfo_TargetIdSet) GetTargetId() []string {
	if x != nil {
		return x.TargetId
	}
	return nil
}

// One resource of the container along with its max value and current value
type ContainerResourceUsage_ContainerResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource     *ContainerResourceUsage_ContainerResourceType `protobuf:"varint,1,opt,name=resource,enum=common_dto.ContainerResourceUsage_ContainerResourceType" json:"resource,omitempty"`
	CurrentValue *int64                                        `protobuf:"varint,2,opt,name=currentValue" json:"currentValue,omitempty"`
	MaxValue     *int64                                        `protobuf:"varint,3,opt,name=maxValue" json:"maxValue,omitempty"`
}

func (x *ContainerResourceUsage_ContainerResource) Reset() {
	*x = ContainerResourceUsage_ContainerResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MediationMessage_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceUsage_ContainerResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceUsage_ContainerResource) ProtoMessage() {}

func (x *ContainerResourceUsage_ContainerResource) ProtoReflect() protoreflect.Message {
	mi := &file_MediationMessage_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceUsage_ContainerResource.ProtoReflect.Descriptor instead.
func (*ContainerResourceUsage_ContainerResource) Descriptor() ([]byte, []int) {
	return file_MediationMessage_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ContainerResourceUsage_ContainerResource) GetResource() ContainerResourceUsage_ContainerResourceType {
	if x != nil && x.Resource != nil {
		return *x.Resource
	}
	return ContainerResourceUsage_JAVA_HEAP
}

func (x *ContainerResourceUsage_ContainerResource) GetCurrentValue() int64 {
	if x != nil && x.CurrentValue != nil {
		return *x.CurrentValue
	}
	return 0
}

func (x *ContainerResourceUsage_ContainerResource) GetMaxValue() int64 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

var File_MediationMessage_proto protoreflect.FileDescriptor

var file_MediationMessage_proto_rawDesc = []byte{
	0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x1a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x4e, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x09, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x6c, 0x61,
	0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x14, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x5c, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x42,
	0x1a, 0x0a, 0x18, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xca, 0x07, 0x0a, 0x16,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x12, 0x4d, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x6c,
	0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x42, 0x1a, 0x0a, 0x18,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54,
	0x4f, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x46, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x54, 0x4f, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x22, 0x84, 0x02,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x1a, 0x5f, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x6f, 0x0a, 0x1a, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x53, 0x65, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x29, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x53, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x0b, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x22, 0x05, 0x0a, 0x03, 0x41, 0x63, 0x6b, 0x22, 0x5c, 0x0a, 0x15, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x54, 0x4f, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x02, 0x0a, 0x16, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x5e, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4a, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a,
	0x18, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3c,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x08,
	0x52, 0x1d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7d, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9,
	0x01, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49,
	0x64, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x12, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x02, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa9, 0x01, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x41, 0x56, 0x41, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10, 0x00, 0x22,
	0xcf, 0x0a, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x53, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x54, 0x4f, 0x52, 0x18, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x66, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x4a, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x14,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x25,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x25, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x69,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x11, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56, 0x32, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56, 0x32, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xe8,
	0x07, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x13, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x61, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d, 0x74, 0x75, 0x72, 0x62, 0x6f,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75,
	0x72, 0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_MediationMessage_proto_rawDescOnce sync.Once
	file_MediationMessage_proto_rawDescData = file_MediationMessage_proto_rawDesc
)

func file_MediationMessage_proto_rawDescGZIP() []byte {
	file_MediationMessage_proto_rawDescOnce.Do(func() {
		file_MediationMessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_MediationMessage_proto_rawDescData)
	})
	return file_MediationMessage_proto_rawDescData
}

var file_MediationMessage_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_MediationMessage_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_MediationMessage_proto_goTypes = []interface{}{
	(ContainerResourceUsage_ContainerResourceType)(0), // 0: common_dto.ContainerResourceUsage.ContainerResourceType
	(ProbeInfo_CreationMode)(0),                       // 1: common_dto.ProbeInfo.CreationMode
	(*MediationClientMessage)(nil),                    // 2: common_dto.MediationClientMessage
	(*MediationServerMessage)(nil),                    // 3: common_dto.MediationServerMessage
	(*RequestTargetId)(nil),                           // 4: common_dto.RequestTargetId
	(*ActionRequest)(nil),                             // 5: common_dto.ActionRequest
	(*ActionListRequest)(nil),                         // 6: common_dto.ActionListRequest
	(*ActionResult)(nil),                              // 7: common_dto.ActionResult
	(*ActionListResponse)(nil),                        // 8: common_dto.ActionListResponse
	(*ActionProgress)(nil),                            // 9: common_dto.ActionProgress
	(*ActionResponse)(nil),                            // 10: common_dto.ActionResponse
	(*TargetUpdateResponse)(nil),                      // 11: common_dto.TargetUpdateResponse
	(*GetActionStateResponse)(nil),                    // 12: common_dto.GetActionStateResponse
	(*ContainerInfo)(nil),                             // 13: common_dto.ContainerInfo
	(*KeepAlive)(nil),                                 // 14: common_dto.KeepAlive
	(*Ack)(nil),                                       // 15: common_dto.Ack
	(*InitializationContent)(nil),                     // 16: common_dto.InitializationContent
	(*ValidationRequest)(nil),                         // 17: common_dto.ValidationRequest
	(*DiscoveryRequest)(nil),                          // 18: common_dto.DiscoveryRequest
	(*TargetUpdateRequest)(nil),                       // 19: common_dto.TargetUpdateRequest
	(*ActionApprovalRequest)(nil),                     // 20: common_dto.ActionApprovalRequest
	(*ActionApprovalResponse)(nil),                    // 21: common_dto.ActionApprovalResponse
	(*ActionErrorsResponse)(nil),                      // 22: common_dto.ActionErrorsResponse
	(*ActionUpdateStateRequest)(nil),                  // 23: common_dto.ActionUpdateStateRequest
	(*GetActionStateRequest)(nil),                     // 24: common_dto.GetActionStateRequest
	(*ActionAuditRequest)(nil),                        // 25: common_dto.ActionAuditRequest
	(*PlanExportRequest)(nil),                         // 26: common_dto.PlanExportRequest
	(*PlanExportProgress)(nil),                        // 27: common_dto.PlanExportProgress
	(*PlanExportResult)(nil),                          // 28: common_dto.PlanExportResult
	(*ContainerResourceUsage)(nil),                    // 29: common_dto.ContainerResourceUsage
	(*ProbeInfo)(nil),                                 // 30: common_dto.ProbeInfo
	(*ActionApprovalFeature)(nil),                     // 31: common_dto.ActionApprovalFeature
	(*ActionAuditFeature)(nil),                        // 32: common_dto.ActionAuditFeature
	(*PlanExportFeature)(nil),                         // 33: common_dto.PlanExportFeature
	(*SetProperties)(nil),                             // 34: common_dto.SetProperties
	nil,                                               // 35: common_dto.GetActionStateResponse.ActionStateEntry
	nil,                                               // 36: common_dto.ContainerInfo.PersistentTargetIdMapEntry
	(*ContainerInfo_TargetIdSet)(nil),                 // 37: common_dto.ContainerInfo.TargetIdSet
	nil,                                               // 38: common_dto.ActionApprovalResponse.ActionStateEntry
	(*ContainerResourceUsage_ContainerResource)(nil),  // 39: common_dto.ContainerResourceUsage.ContainerResource
	nil,                            // 40: common_dto.SetProperties.PropertiesEntry
	(*ValidationResponse)(nil),     // 41: common_dto.ValidationResponse
	(*DiscoveryResponse)(nil),      // 42: common_dto.DiscoveryResponse
	(*AccountValue)(nil),           // 43: common_dto.AccountValue
	(*ActionExecutionDTO)(nil),     // 44: common_dto.ActionExecutionDTO
	(ActionResponseState)(0),       // 45: common_dto.ActionResponseState
	(*ErrorDTO)(nil),               // 46: common_dto.ErrorDTO
	(*ActionErrorDTO)(nil),         // 47: common_dto.ActionErrorDTO
	(DiscoveryType)(0),             // 48: common_dto.DiscoveryType
	(*DiscoveryContextDTO)(nil),    // 49: common_dto.DiscoveryContextDTO
	(UpdateType)(0),                // 50: common_dto.UpdateType
	(*ActionEventDTO)(nil),         // 51: common_dto.ActionEventDTO
	(*PlanExportDTO)(nil),          // 52: common_dto.PlanExportDTO
	(*NonMarketEntityDTO)(nil),     // 53: common_dto.NonMarketEntityDTO
	(*PlanExportResponse)(nil),     // 54: common_dto.PlanExportResponse
	(*TemplateDTO)(nil),            // 55: common_dto.TemplateDTO
	(*AccountDefEntry)(nil),        // 56: common_dto.AccountDefEntry
	(*EntityIdentityMetadata)(nil), // 57: common_dto.EntityIdentityMetadata
	(*ActionPolicyDTO)(nil),        // 58: common_dto.ActionPolicyDTO
	(*ActionMergePolicyDTO)(nil),   // 59: common_dto.ActionMergePolicyDTO
	(*ExternalActionInfo)(nil),     // 60: common_dto.ExternalActionInfo
}
var file_MediationMessage_proto_depIdxs = []int32{
	41, // 0: common_dto.MediationClientMessage.validationResponse:type_name -> common_dto.ValidationResponse
	42, // 1: common_dto.MediationClientMessage.discoveryResponse:type_name -> common_dto.DiscoveryResponse
	14, // 2: common_dto.MediationClientMessage.keepAlive:type_name -> common_dto.KeepAlive
	9,  // 3: common_dto.MediationClientMessage.actionProgress:type_name -> common_dto.ActionProgress
	7,  // 4: common_dto.MediationClientMessage.actionResponse:type_name -> common_dto.ActionResult
	11, // 5: common_dto.MediationClientMessage.targetUpdateResponse:type_name -> common_dto.TargetUpdateResponse
	22, // 6: common_dto.MediationClientMessage.actionErrorsResponse:type_name -> common_dto.ActionErrorsResponse
	12, // 7: common_dto.MediationClientMessage.actionStatesResponse:type_name -> common_dto.GetActionStateResponse
	21, // 8: common_dto.MediationClientMessage.actionApprovalResponse:type_name -> common_dto.ActionApprovalResponse
	27, // 9: common_dto.MediationClientMessage.planExportProgress:type_name -> common_dto.PlanExportProgress
	28, // 10: common_dto.MediationClientMessage.planExportResult:type_name -> common_dto.PlanExportResult
	29, // 11: common_dto.MediationClientMessage.containerResourceUsage:type_name -> common_dto.ContainerResourceUsage
	8,  // 12: common_dto.MediationClientMessage.actionListResponse:type_name -> common_dto.ActionListResponse
	17, // 13: common_dto.MediationServerMessage.validationRequest:type_name -> common_dto.ValidationRequest
	18, // 14: common_dto.MediationServerMessage.discoveryRequest:type_name -> common_dto.DiscoveryRequest
	5,  // 15: common_dto.MediationServerMessage.actionRequest:type_name -> common_dto.ActionRequest
	34, // 16: common_dto.MediationServerMessage.properties:type_name -> common_dto.SetProperties
	19, // 17: common_dto.MediationServerMessage.targetUpdateRequest:type_name -> common_dto.TargetUpdateRequest
	20, // 18: common_dto.MediationServerMessage.actionApproval:type_name -> common_dto.ActionApprovalRequest
	23, // 19: common_dto.MediationServerMessage.actionUpdateState:type_name -> common_dto.ActionUpdateStateRequest
	24, // 20: common_dto.MediationServerMessage.getActionState:type_name -> common_dto.GetActionStateRequest
	25, // 21: common_dto.MediationServerMessage.actionAudit:type_name -> common_dto.ActionAuditRequest
	26, // 22: common_dto.MediationServerMessage.planExportRequest:type_name -> common_dto.PlanExportRequest
	6,  // 23: common_dto.MediationServerMessage.actionListRequest:type_name -> common_dto.ActionListRequest
	43, // 24: common_dto.RequestTargetId.accountValue:type_name -> common_dto.AccountValue
	43, // 25: common_dto.ActionRequest.accountValue:type_name -> common_dto.AccountValue
	44, // 26: common_dto.ActionRequest.actionExecutionDTO:type_name -> common_dto.ActionExecutionDTO
	43, // 27: common_dto.ActionRequest.secondaryAccountValue:type_name -> common_dto.AccountValue
	43, // 28: common_dto.ActionListRequest.accountValue:type_name -> common_dto.AccountValue
	44, // 29: common_dto.ActionListRequest.actionExecution:type_name -> common_dto.ActionExecutionDTO
	43, // 30: common_dto.ActionListRequest.secondaryAccountValue:type_name -> common_dto.AccountValue
	10, // 31: common_dto.ActionResult.response:type_name -> common_dto.ActionResponse
	10, // 32: common_dto.ActionListResponse.response:type_name -> common_dto.ActionResponse
	10, // 33: common_dto.ActionProgress.response:type_name -> common_dto.ActionResponse
	45, // 34: common_dto.ActionResponse.actionResponseState:type_name -> common_dto.ActionResponseState
	46, // 35: common_dto.TargetUpdateResponse.errorDTO:type_name -> common_dto.ErrorDTO
	35, // 36: common_dto.GetActionStateResponse.actionState:type_name -> common_dto.GetActionStateResponse.ActionStateEntry
	47, // 37: common_dto.GetActionStateResponse.errors:type_name -> common_dto.ActionErrorDTO
	30, // 38: common_dto.ContainerInfo.probes:type_name -> common_dto.ProbeInfo
	36, // 39: common_dto.ContainerInfo.persistentTargetIdMap:type_name -> common_dto.ContainerInfo.PersistentTargetIdMapEntry
	34, // 40: common_dto.InitializationContent.probeProperties:type_name -> common_dto.SetProperties
	43, // 41: common_dto.ValidationRequest.accountValue:type_name -> common_dto.AccountValue
	43, // 42: common_dto.DiscoveryRequest.accountValue:type_name -> common_dto.AccountValue
	48, // 43: common_dto.DiscoveryRequest.discoveryType:type_name -> common_dto.DiscoveryType
	49, // 44: common_dto.DiscoveryRequest.discoveryContext:type_name -> common_dto.DiscoveryContextDTO
	43, // 45: common_dto.TargetUpdateRequest.accountValue:type_name -> common_dto.AccountValue
	50, // 46: common_dto.TargetUpdateRequest.updateType:type_name -> common_dto.UpdateType
	4,  // 47: common_dto.ActionApprovalRequest.target:type_name -> common_dto.RequestTargetId
	44, // 48: common_dto.ActionApprovalRequest.action:type_name -> common_dto.ActionExecutionDTO
	38, // 49: common_dto.ActionApprovalResponse.actionState:type_name -> common_dto.ActionApprovalResponse.ActionStateEntry
	47, // 50: common_dto.ActionApprovalResponse.errors:type_name -> common_dto.ActionErrorDTO
	47, // 51: common_dto.ActionErrorsResponse.errors:type_name -> common_dto.ActionErrorDTO
	4,  // 52: common_dto.ActionUpdateStateRequest.target:type_name -> common_dto.RequestTargetId
	10, // 53: common_dto.ActionUpdateStateRequest.actionState:type_name -> common_dto.ActionResponse
	4,  // 54: common_dto.GetActionStateRequest.target:type_name -> common_dto.RequestTargetId
	4,  // 55: common_dto.ActionAuditRequest.target:type_name -> common_dto.RequestTargetId
	51, // 56: common_dto.ActionAuditRequest.action:type_name -> common_dto.ActionEventDTO
	4,  // 57: common_dto.PlanExportRequest.target:type_name -> common_dto.RequestTargetId
	52, // 58: common_dto.PlanExportRequest.planData:type_name -> common_dto.PlanExportDTO
	53, // 59: common_dto.PlanExportRequest.planDestination:type_name -> common_dto.NonMarketEntityDTO
	54, // 60: common_dto.PlanExportProgress.response:type_name -> common_dto.PlanExportResponse
	54, // 61: common_dto.PlanExportResult.response:type_name -> common_dto.PlanExportResponse
	39, // 62: common_dto.ContainerResourceUsage.containerResource:type_name -> common_dto.ContainerResourceUsage.ContainerResource
	55, // 63: common_dto.ProbeInfo.supplyChainDefinitionSet:type_name -> common_dto.TemplateDTO
	56, // 64: common_dto.ProbeInfo.accountDefinition:type_name -> common_dto.AccountDefEntry
	57, // 65: common_dto.ProbeInfo.entityMetadata:type_name -> common_dto.EntityIdentityMetadata
	58, // 66: common_dto.ProbeInfo.actionPolicy:type_name -> common_dto.ActionPolicyDTO
	31, // 67: common_dto.ProbeInfo.actionApproval:type_name -> common_dto.ActionApprovalFeature
	32, // 68: common_dto.ProbeInfo.actionAudit:type_name -> common_dto.ActionAuditFeature
	33, // 69: common_dto.ProbeInfo.planExport:type_name -> common_dto.PlanExportFeature
	1,  // 70: common_dto.ProbeInfo.creationMode:type_name -> common_dto.ProbeInfo.CreationMode
	59, // 71: common_dto.ProbeInfo.actionMergePolicy:type_name -> common_dto.ActionMergePolicyDTO
	40, // 72: common_dto.SetProperties.properties:type_name -> common_dto.SetProperties.PropertiesEntry
	45, // 73: common_dto.GetActionStateResponse.ActionStateEntry.value:type_name -> common_dto.ActionResponseState
	37, // 74: common_dto.ContainerInfo.PersistentTargetIdMapEntry.value:type_name -> common_dto.ContainerInfo.TargetIdSet
	60, // 75: common_dto.ActionApprovalResponse.ActionStateEntry.value:type_name -> common_dto.ExternalActionInfo
	0,  // 76: common_dto.ContainerResourceUsage.ContainerResource.resource:type_name -> common_dto.ContainerResourceUsage.ContainerResourceType
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_MediationMessage_proto_init() }
func file_MediationMessage_proto_init() {
	if File_MediationMessage_proto != nil {
		return
	}
	file_ActionExecution_proto_init()
	file_CommonDTO_proto_init()
	file_NonMarketEntityDTO_proto_init()
	file_Discovery_proto_init()
	file_SupplyChain_proto_init()
	file_IdentityMetadata_proto_init()
	file_PlanExport_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_MediationMessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediationClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediationServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTargetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializationContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionErrorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionUpdateStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAuditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanExportProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanExportResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProbeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionApprovalFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAuditFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanExportFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_TargetIdSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MediationMessage_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceUsage_ContainerResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_MediationMessage_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MediationClientMessage_ValidationResponse)(nil),
		(*MediationClientMessage_DiscoveryResponse)(nil),
		(*MediationClientMessage_KeepAlive)(nil),
		(*MediationClientMessage_ActionProgress)(nil),
		(*MediationClientMessage_ActionResponse)(nil),
		(*MediationClientMessage_TargetUpdateResponse)(nil),
		(*MediationClientMessage_ActionErrorsResponse)(nil),
		(*MediationClientMessage_ActionStatesResponse)(nil),
		(*MediationClientMessage_ActionApprovalResponse)(nil),
		(*MediationClientMessage_PlanExportProgress)(nil),
		(*MediationClientMessage_PlanExportResult)(nil),
		(*MediationClientMessage_TargetOperationError)(nil),
		(*MediationClientMessage_ContainerResourceUsage)(nil),
		(*MediationClientMessage_ActionListResponse)(nil),
	}
	file_MediationMessage_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MediationServerMessage_ValidationRequest)(nil),
		(*MediationServerMessage_DiscoveryRequest)(nil),
		(*MediationServerMessage_ActionRequest)(nil),
		(*MediationServerMessage_InterruptOperation)(nil),
		(*MediationServerMessage_Properties)(nil),
		(*MediationServerMessage_TargetUpdateRequest)(nil),
		(*MediationServerMessage_ActionApproval)(nil),
		(*MediationServerMessage_ActionUpdateState)(nil),
		(*MediationServerMessage_GetActionState)(nil),
		(*MediationServerMessage_ActionAudit)(nil),
		(*MediationServerMessage_PlanExportRequest)(nil),
		(*MediationServerMessage_ActionListRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MediationMessage_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_MediationMessage_proto_goTypes,
		DependencyIndexes: file_MediationMessage_proto_depIdxs,
		EnumInfos:         file_MediationMessage_proto_enumTypes,
		MessageInfos:      file_MediationMessage_proto_msgTypes,
	}.Build()
	File_MediationMessage_proto = out.File
	file_MediationMessage_proto_rawDesc = nil
	file_MediationMessage_proto_goTypes = nil
	file_MediationMessage_proto_depIdxs = nil
}
