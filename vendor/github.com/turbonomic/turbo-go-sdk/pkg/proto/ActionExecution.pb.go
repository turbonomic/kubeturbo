// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: ActionExecution.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionResponseState int32

const (
	ActionResponseState_PENDING_ACCEPT ActionResponseState = 0
	ActionResponseState_ACCEPTED       ActionResponseState = 1
	ActionResponseState_REJECTED       ActionResponseState = 2
	ActionResponseState_IN_PROGRESS    ActionResponseState = 3
	ActionResponseState_SUCCEEDED      ActionResponseState = 4
	ActionResponseState_FAILED         ActionResponseState = 5
	ActionResponseState_RECOMMENDED    ActionResponseState = 6
	ActionResponseState_DISABLED       ActionResponseState = 7
	ActionResponseState_QUEUED         ActionResponseState = 8
	ActionResponseState_CLEARED        ActionResponseState = 9
	ActionResponseState_FAILING        ActionResponseState = 10
)

// Enum value maps for ActionResponseState.
var (
	ActionResponseState_name = map[int32]string{
		0:  "PENDING_ACCEPT",
		1:  "ACCEPTED",
		2:  "REJECTED",
		3:  "IN_PROGRESS",
		4:  "SUCCEEDED",
		5:  "FAILED",
		6:  "RECOMMENDED",
		7:  "DISABLED",
		8:  "QUEUED",
		9:  "CLEARED",
		10: "FAILING",
	}
	ActionResponseState_value = map[string]int32{
		"PENDING_ACCEPT": 0,
		"ACCEPTED":       1,
		"REJECTED":       2,
		"IN_PROGRESS":    3,
		"SUCCEEDED":      4,
		"FAILED":         5,
		"RECOMMENDED":    6,
		"DISABLED":       7,
		"QUEUED":         8,
		"CLEARED":        9,
		"FAILING":        10,
	}
)

func (x ActionResponseState) Enum() *ActionResponseState {
	p := new(ActionResponseState)
	*p = x
	return p
}

func (x ActionResponseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionResponseState) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[0].Descriptor()
}

func (ActionResponseState) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[0]
}

func (x ActionResponseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionResponseState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionResponseState(num)
	return nil
}

// Deprecated: Use ActionResponseState.Descriptor instead.
func (ActionResponseState) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0}
}

// Defines how action can be executed by the probe
type ActionPolicyDTO_ActionCapability int32

const (
	// The action does not make sense for the probe. Actions of this type should not be shown
	// to the user.
	ActionPolicyDTO_NOT_SUPPORTED ActionPolicyDTO_ActionCapability = 1
	// The probe does not support executing the action, but it may still make sense to display
	// actions of this type to the user. For example, VSTORAGE resize is not supported in VCenter,
	// but many users still wish to see actions of this type.
	ActionPolicyDTO_NOT_EXECUTABLE ActionPolicyDTO_ActionCapability = 2
	// The probe supports execution of the action. Actions of this type are displayed to the user.
	ActionPolicyDTO_SUPPORTED ActionPolicyDTO_ActionCapability = 3
)

// Enum value maps for ActionPolicyDTO_ActionCapability.
var (
	ActionPolicyDTO_ActionCapability_name = map[int32]string{
		1: "NOT_SUPPORTED",
		2: "NOT_EXECUTABLE",
		3: "SUPPORTED",
	}
	ActionPolicyDTO_ActionCapability_value = map[string]int32{
		"NOT_SUPPORTED":  1,
		"NOT_EXECUTABLE": 2,
		"SUPPORTED":      3,
	}
)

func (x ActionPolicyDTO_ActionCapability) Enum() *ActionPolicyDTO_ActionCapability {
	p := new(ActionPolicyDTO_ActionCapability)
	*p = x
	return p
}

func (x ActionPolicyDTO_ActionCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionPolicyDTO_ActionCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[1].Descriptor()
}

func (ActionPolicyDTO_ActionCapability) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[1]
}

func (x ActionPolicyDTO_ActionCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionPolicyDTO_ActionCapability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionPolicyDTO_ActionCapability(num)
	return nil
}

// Deprecated: Use ActionPolicyDTO_ActionCapability.Descriptor instead.
func (ActionPolicyDTO_ActionCapability) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0, 0}
}

type ActionItemDTO_ActionType int32

const (
	ActionItemDTO_NONE              ActionItemDTO_ActionType = 0
	ActionItemDTO_START             ActionItemDTO_ActionType = 1
	ActionItemDTO_MOVE              ActionItemDTO_ActionType = 2
	ActionItemDTO_SUSPEND           ActionItemDTO_ActionType = 3
	ActionItemDTO_TERMINATE         ActionItemDTO_ActionType = 4
	ActionItemDTO_ADD_PROVIDER      ActionItemDTO_ActionType = 6
	ActionItemDTO_CHANGE            ActionItemDTO_ActionType = 7
	ActionItemDTO_PROVISION         ActionItemDTO_ActionType = 9
	ActionItemDTO_RECONFIGURE       ActionItemDTO_ActionType = 10
	ActionItemDTO_RESIZE            ActionItemDTO_ActionType = 11
	ActionItemDTO_RESIZE_CAPACITY   ActionItemDTO_ActionType = 12
	ActionItemDTO_DELETE            ActionItemDTO_ActionType = 15
	ActionItemDTO_RIGHT_SIZE        ActionItemDTO_ActionType = 16
	ActionItemDTO_CROSS_TARGET_MOVE ActionItemDTO_ActionType = 21
	ActionItemDTO_MOVE_TOGETHER     ActionItemDTO_ActionType = 22
	// Scale a workload. Currently this action type is used to represent Cloud Move actions
	// for workloads when they are moved from one template to another. Market doesn't generate
	// Scale actions but Action Orchestrator translates Cloud Moves to Scale actions. Cloud
	// Probes expect Scale type for moving VMs between compute tiers.
	ActionItemDTO_SCALE ActionItemDTO_ActionType = 24
)

// Enum value maps for ActionItemDTO_ActionType.
var (
	ActionItemDTO_ActionType_name = map[int32]string{
		0:  "NONE",
		1:  "START",
		2:  "MOVE",
		3:  "SUSPEND",
		4:  "TERMINATE",
		6:  "ADD_PROVIDER",
		7:  "CHANGE",
		9:  "PROVISION",
		10: "RECONFIGURE",
		11: "RESIZE",
		12: "RESIZE_CAPACITY",
		15: "DELETE",
		16: "RIGHT_SIZE",
		21: "CROSS_TARGET_MOVE",
		22: "MOVE_TOGETHER",
		24: "SCALE",
	}
	ActionItemDTO_ActionType_value = map[string]int32{
		"NONE":              0,
		"START":             1,
		"MOVE":              2,
		"SUSPEND":           3,
		"TERMINATE":         4,
		"ADD_PROVIDER":      6,
		"CHANGE":            7,
		"PROVISION":         9,
		"RECONFIGURE":       10,
		"RESIZE":            11,
		"RESIZE_CAPACITY":   12,
		"DELETE":            15,
		"RIGHT_SIZE":        16,
		"CROSS_TARGET_MOVE": 21,
		"MOVE_TOGETHER":     22,
		"SCALE":             24,
	}
)

func (x ActionItemDTO_ActionType) Enum() *ActionItemDTO_ActionType {
	p := new(ActionItemDTO_ActionType)
	*p = x
	return p
}

func (x ActionItemDTO_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionItemDTO_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[2].Descriptor()
}

func (ActionItemDTO_ActionType) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[2]
}

func (x ActionItemDTO_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionItemDTO_ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionItemDTO_ActionType(num)
	return nil
}

// Deprecated: Use ActionItemDTO_ActionType.Descriptor instead.
func (ActionItemDTO_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 0}
}

type ActionItemDTO_CommodityAttribute int32

const (
	ActionItemDTO_Capacity    ActionItemDTO_CommodityAttribute = 0
	ActionItemDTO_Limit       ActionItemDTO_CommodityAttribute = 1
	ActionItemDTO_Reservation ActionItemDTO_CommodityAttribute = 2
)

// Enum value maps for ActionItemDTO_CommodityAttribute.
var (
	ActionItemDTO_CommodityAttribute_name = map[int32]string{
		0: "Capacity",
		1: "Limit",
		2: "Reservation",
	}
	ActionItemDTO_CommodityAttribute_value = map[string]int32{
		"Capacity":    0,
		"Limit":       1,
		"Reservation": 2,
	}
)

func (x ActionItemDTO_CommodityAttribute) Enum() *ActionItemDTO_CommodityAttribute {
	p := new(ActionItemDTO_CommodityAttribute)
	*p = x
	return p
}

func (x ActionItemDTO_CommodityAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionItemDTO_CommodityAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[3].Descriptor()
}

func (ActionItemDTO_CommodityAttribute) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[3]
}

func (x ActionItemDTO_CommodityAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionItemDTO_CommodityAttribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionItemDTO_CommodityAttribute(num)
	return nil
}

// Deprecated: Use ActionItemDTO_CommodityAttribute.Descriptor instead.
func (ActionItemDTO_CommodityAttribute) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 1}
}

// the category of risk
type ActionItemDTO_Risk_Category int32

const (
	ActionItemDTO_Risk_PERFORMANCE_ASSURANCE  ActionItemDTO_Risk_Category = 1
	ActionItemDTO_Risk_EFFICIENCY_IMPROVEMENT ActionItemDTO_Risk_Category = 2
	ActionItemDTO_Risk_PREVENTION             ActionItemDTO_Risk_Category = 3
	ActionItemDTO_Risk_COMPLIANCE             ActionItemDTO_Risk_Category = 4
)

// Enum value maps for ActionItemDTO_Risk_Category.
var (
	ActionItemDTO_Risk_Category_name = map[int32]string{
		1: "PERFORMANCE_ASSURANCE",
		2: "EFFICIENCY_IMPROVEMENT",
		3: "PREVENTION",
		4: "COMPLIANCE",
	}
	ActionItemDTO_Risk_Category_value = map[string]int32{
		"PERFORMANCE_ASSURANCE":  1,
		"EFFICIENCY_IMPROVEMENT": 2,
		"PREVENTION":             3,
		"COMPLIANCE":             4,
	}
)

func (x ActionItemDTO_Risk_Category) Enum() *ActionItemDTO_Risk_Category {
	p := new(ActionItemDTO_Risk_Category)
	*p = x
	return p
}

func (x ActionItemDTO_Risk_Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionItemDTO_Risk_Category) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[4].Descriptor()
}

func (ActionItemDTO_Risk_Category) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[4]
}

func (x ActionItemDTO_Risk_Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionItemDTO_Risk_Category) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionItemDTO_Risk_Category(num)
	return nil
}

// Deprecated: Use ActionItemDTO_Risk_Category.Descriptor instead.
func (ActionItemDTO_Risk_Category) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 2, 0}
}

// the severity of risk
type ActionItemDTO_Risk_Severity int32

const (
	ActionItemDTO_Risk_UNKNOWN  ActionItemDTO_Risk_Severity = 0
	ActionItemDTO_Risk_NORMAL   ActionItemDTO_Risk_Severity = 1
	ActionItemDTO_Risk_MINOR    ActionItemDTO_Risk_Severity = 2
	ActionItemDTO_Risk_MAJOR    ActionItemDTO_Risk_Severity = 3
	ActionItemDTO_Risk_CRITICAL ActionItemDTO_Risk_Severity = 4
)

// Enum value maps for ActionItemDTO_Risk_Severity.
var (
	ActionItemDTO_Risk_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NORMAL",
		2: "MINOR",
		3: "MAJOR",
		4: "CRITICAL",
	}
	ActionItemDTO_Risk_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NORMAL":   1,
		"MINOR":    2,
		"MAJOR":    3,
		"CRITICAL": 4,
	}
)

func (x ActionItemDTO_Risk_Severity) Enum() *ActionItemDTO_Risk_Severity {
	p := new(ActionItemDTO_Risk_Severity)
	*p = x
	return p
}

func (x ActionItemDTO_Risk_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionItemDTO_Risk_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[5].Descriptor()
}

func (ActionItemDTO_Risk_Severity) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[5]
}

func (x ActionItemDTO_Risk_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ActionItemDTO_Risk_Severity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ActionItemDTO_Risk_Severity(num)
	return nil
}

// Deprecated: Use ActionItemDTO_Risk_Severity.Descriptor instead.
func (ActionItemDTO_Risk_Severity) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 2, 1}
}

type Workflow_ActionScriptPhase int32

const (
	// Action has been generated by market, and action orchestration decided it does not need to
	// be filtered.
	Workflow_ON_GENERATION Workflow_ActionScriptPhase = 4
	// How an action should be approved.
	Workflow_APPROVAL Workflow_ActionScriptPhase = 5
	// PRE actions are performed prior to the primary action
	Workflow_PRE Workflow_ActionScriptPhase = 1
	// REPLACE actions are performed in place of the built-in action
	Workflow_REPLACE Workflow_ActionScriptPhase = 2
	// POST actions are performed after the primary action
	Workflow_POST Workflow_ActionScriptPhase = 3
	// When an action reaches SUCCEEDED or FAILED. For instance, auditing failed and succeeded
	// action in an external system. This is separate from POST because POST only deals with the
	// transition from a succeeded action.
	Workflow_AFTER_EXECUTION Workflow_ActionScriptPhase = 6
)

// Enum value maps for Workflow_ActionScriptPhase.
var (
	Workflow_ActionScriptPhase_name = map[int32]string{
		4: "ON_GENERATION",
		5: "APPROVAL",
		1: "PRE",
		2: "REPLACE",
		3: "POST",
		6: "AFTER_EXECUTION",
	}
	Workflow_ActionScriptPhase_value = map[string]int32{
		"ON_GENERATION":   4,
		"APPROVAL":        5,
		"PRE":             1,
		"REPLACE":         2,
		"POST":            3,
		"AFTER_EXECUTION": 6,
	}
)

func (x Workflow_ActionScriptPhase) Enum() *Workflow_ActionScriptPhase {
	p := new(Workflow_ActionScriptPhase)
	*p = x
	return p
}

func (x Workflow_ActionScriptPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Workflow_ActionScriptPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_ActionExecution_proto_enumTypes[6].Descriptor()
}

func (Workflow_ActionScriptPhase) Type() protoreflect.EnumType {
	return &file_ActionExecution_proto_enumTypes[6]
}

func (x Workflow_ActionScriptPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Workflow_ActionScriptPhase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Workflow_ActionScriptPhase(num)
	return nil
}

// Deprecated: Use Workflow_ActionScriptPhase.Descriptor instead.
func (Workflow_ActionScriptPhase) EnumDescriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{11, 0}
}

// ActionPolicyDTO defines action execution policy for an EntityType.
// Every EntityType can be associated with a list of actions and execution modes.
// E.g., 'Resize' action can be defined as 'Recommend' for Virtual Machines.
type ActionPolicyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity type which the policy is applied to
	EntityType *EntityDTO_EntityType `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// Action policy elements (for every supported action type)
	PolicyElement []*ActionPolicyDTO_ActionPolicyElement `protobuf:"bytes,2,rep,name=policyElement" json:"policyElement,omitempty"`
}

func (x *ActionPolicyDTO) Reset() {
	*x = ActionPolicyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicyDTO) ProtoMessage() {}

func (x *ActionPolicyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicyDTO.ProtoReflect.Descriptor instead.
func (*ActionPolicyDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0}
}

func (x *ActionPolicyDTO) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *ActionPolicyDTO) GetPolicyElement() []*ActionPolicyDTO_ActionPolicyElement {
	if x != nil {
		return x.PolicyElement
	}
	return nil
}

// ActionMergePolicyDTO defines metadata for merging actions
// and identifying the execution target for an EntityType.
type ActionMergePolicyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity type to which the policy is applied to
	EntityType *EntityDTO_EntityType `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// List of connection metadata to get to the entity that will execute the merged actions.
	//
	// Entities of the same entity type from certain probes,such as the Terraform,
	// are connected to the different types of execution targets, either directly
	// or via a series of connections.
	// For example, a set of VMs are directly controlled by workload controller and
	// some VMs are associated with VM specs which are controlled by workload controllers.
	// VMs VM1, VM2, VM3 --> aggregated by -> VMSpecs VMS1 --> controlled by --> WorkloadController W1
	// VMs VM4, VM5, VM6 --> controlled by -->  WorkloadController W2
	// Having a list of execution target metadata allows specifying all the possible connections
	// of an entity to its action merge execution target.
	//
	// ActionMergeExecutionTarget list will be searched for in the order provided in this list
	// until one is found. If no ActionMergeExecutionTarget is found from the list
	// action merge will not be performed for the entity.
	ExecutionTargets []*ActionMergeExecutionTarget `protobuf:"bytes,2,rep,name=executionTargets" json:"executionTargets,omitempty"`
	// Metadata for merging actions
	//
	// Types that are assignable to ActionSpec:
	//	*ActionMergePolicyDTO_ResizeSpec
	//	*ActionMergePolicyDTO_ScaleSpec
	//	*ActionMergePolicyDTO_MoveSpec
	//	*ActionMergePolicyDTO_ProvisionSpec
	ActionSpec isActionMergePolicyDTO_ActionSpec `protobuf_oneof:"actionSpec"`
}

func (x *ActionMergePolicyDTO) Reset() {
	*x = ActionMergePolicyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMergePolicyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMergePolicyDTO) ProtoMessage() {}

func (x *ActionMergePolicyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMergePolicyDTO.ProtoReflect.Descriptor instead.
func (*ActionMergePolicyDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{1}
}

func (x *ActionMergePolicyDTO) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *ActionMergePolicyDTO) GetExecutionTargets() []*ActionMergeExecutionTarget {
	if x != nil {
		return x.ExecutionTargets
	}
	return nil
}

func (m *ActionMergePolicyDTO) GetActionSpec() isActionMergePolicyDTO_ActionSpec {
	if m != nil {
		return m.ActionSpec
	}
	return nil
}

func (x *ActionMergePolicyDTO) GetResizeSpec() *ResizeMergeSpec {
	if x, ok := x.GetActionSpec().(*ActionMergePolicyDTO_ResizeSpec); ok {
		return x.ResizeSpec
	}
	return nil
}

func (x *ActionMergePolicyDTO) GetScaleSpec() *ScaleMergeSpec {
	if x, ok := x.GetActionSpec().(*ActionMergePolicyDTO_ScaleSpec); ok {
		return x.ScaleSpec
	}
	return nil
}

func (x *ActionMergePolicyDTO) GetMoveSpec() *MoveMergeSpec {
	if x, ok := x.GetActionSpec().(*ActionMergePolicyDTO_MoveSpec); ok {
		return x.MoveSpec
	}
	return nil
}

func (x *ActionMergePolicyDTO) GetProvisionSpec() *ProvisionMergeSpec {
	if x, ok := x.GetActionSpec().(*ActionMergePolicyDTO_ProvisionSpec); ok {
		return x.ProvisionSpec
	}
	return nil
}

type isActionMergePolicyDTO_ActionSpec interface {
	isActionMergePolicyDTO_ActionSpec()
}

type ActionMergePolicyDTO_ResizeSpec struct {
	ResizeSpec *ResizeMergeSpec `protobuf:"bytes,3,opt,name=resizeSpec,oneof"`
}

type ActionMergePolicyDTO_ScaleSpec struct {
	ScaleSpec *ScaleMergeSpec `protobuf:"bytes,4,opt,name=scaleSpec,oneof"`
}

type ActionMergePolicyDTO_MoveSpec struct {
	MoveSpec *MoveMergeSpec `protobuf:"bytes,5,opt,name=moveSpec,oneof"`
}

type ActionMergePolicyDTO_ProvisionSpec struct {
	ProvisionSpec *ProvisionMergeSpec `protobuf:"bytes,6,opt,name=provisionSpec,oneof"`
}

func (*ActionMergePolicyDTO_ResizeSpec) isActionMergePolicyDTO_ActionSpec() {}

func (*ActionMergePolicyDTO_ScaleSpec) isActionMergePolicyDTO_ActionSpec() {}

func (*ActionMergePolicyDTO_MoveSpec) isActionMergePolicyDTO_ActionSpec() {}

func (*ActionMergePolicyDTO_ProvisionSpec) isActionMergePolicyDTO_ActionSpec() {}

// Metadata to get to the entity that will execute the merged actions
type ActionMergeExecutionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description of the target, for purposes of debug or display in UI
	TargetDescription *string `protobuf:"bytes,1,opt,name=targetDescription" json:"targetDescription,omitempty"`
	// Types that are assignable to ExecutionTarget:
	//	*ActionMergeExecutionTarget_MergeTarget
	//	*ActionMergeExecutionTarget_ChainedMergeTarget
	ExecutionTarget isActionMergeExecutionTarget_ExecutionTarget `protobuf_oneof:"executionTarget"`
}

func (x *ActionMergeExecutionTarget) Reset() {
	*x = ActionMergeExecutionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMergeExecutionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMergeExecutionTarget) ProtoMessage() {}

func (x *ActionMergeExecutionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMergeExecutionTarget.ProtoReflect.Descriptor instead.
func (*ActionMergeExecutionTarget) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{2}
}

func (x *ActionMergeExecutionTarget) GetTargetDescription() string {
	if x != nil && x.TargetDescription != nil {
		return *x.TargetDescription
	}
	return ""
}

func (m *ActionMergeExecutionTarget) GetExecutionTarget() isActionMergeExecutionTarget_ExecutionTarget {
	if m != nil {
		return m.ExecutionTarget
	}
	return nil
}

func (x *ActionMergeExecutionTarget) GetMergeTarget() *ActionMergeTargetData {
	if x, ok := x.GetExecutionTarget().(*ActionMergeExecutionTarget_MergeTarget); ok {
		return x.MergeTarget
	}
	return nil
}

func (x *ActionMergeExecutionTarget) GetChainedMergeTarget() *ChainedActionMergeTargetData {
	if x, ok := x.GetExecutionTarget().(*ActionMergeExecutionTarget_ChainedMergeTarget); ok {
		return x.ChainedMergeTarget
	}
	return nil
}

type isActionMergeExecutionTarget_ExecutionTarget interface {
	isActionMergeExecutionTarget_ExecutionTarget()
}

type ActionMergeExecutionTarget_MergeTarget struct {
	// Connection traversed to get to the action execution entity
	MergeTarget *ActionMergeTargetData `protobuf:"bytes,2,opt,name=mergeTarget,oneof"`
}

type ActionMergeExecutionTarget_ChainedMergeTarget struct {
	// Set of connections traversed in order to get to the action execution entity
	ChainedMergeTarget *ChainedActionMergeTargetData `protobuf:"bytes,3,opt,name=chainedMergeTarget,oneof"`
}

func (*ActionMergeExecutionTarget_MergeTarget) isActionMergeExecutionTarget_ExecutionTarget() {}

func (*ActionMergeExecutionTarget_ChainedMergeTarget) isActionMergeExecutionTarget_ExecutionTarget() {
}

// Metadata to get to the action execution using a relationship
// For example, to get to the ContainerSpec from Container via the AggregatedBy relationship
// or to get to Workload Controller from ContainerSpec via the Controlled/OwnedBy relationship
type ActionMergeTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entity type for the related entity
	RelatedTo *EntityDTO_EntityType `protobuf:"varint,1,opt,name=relatedTo,enum=common_dto.EntityDTO_EntityType" json:"relatedTo,omitempty"`
	// Connection to the related entity
	RelatedBy *ActionMergeTargetData_EntityRelationship `protobuf:"bytes,2,opt,name=relatedBy" json:"relatedBy,omitempty"`
}

func (x *ActionMergeTargetData) Reset() {
	*x = ActionMergeTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMergeTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMergeTargetData) ProtoMessage() {}

func (x *ActionMergeTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMergeTargetData.ProtoReflect.Descriptor instead.
func (*ActionMergeTargetData) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{3}
}

func (x *ActionMergeTargetData) GetRelatedTo() EntityDTO_EntityType {
	if x != nil && x.RelatedTo != nil {
		return *x.RelatedTo
	}
	return EntityDTO_SWITCH
}

func (x *ActionMergeTargetData) GetRelatedBy() *ActionMergeTargetData_EntityRelationship {
	if x != nil {
		return x.RelatedBy
	}
	return nil
}

// Metadata that specifies the path to the execution target by traversing a set of connections.
type ChainedActionMergeTargetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example, to get WorkloadController associated with Containers,
	// need to go from Container -> ContainerSpec -> WorkloadController
	// Entity connections are traversed in the order they appear in the list.
	// E.g. first find ContainerSpec instance from a Container
	// Then find WorkloadController from ContainerSpec instance found from the first link
	// WorkloadController W1 --> owns -> ContainerSpecs CS1
	// CS1 --> aggregates --> Containers C1, C2, C3
	TargetLinks []*ChainedActionMergeTargetData_TargetDataLink `protobuf:"bytes,1,rep,name=targetLinks" json:"targetLinks,omitempty"`
}

func (x *ChainedActionMergeTargetData) Reset() {
	*x = ChainedActionMergeTargetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainedActionMergeTargetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainedActionMergeTargetData) ProtoMessage() {}

func (x *ChainedActionMergeTargetData) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainedActionMergeTargetData.ProtoReflect.Descriptor instead.
func (*ChainedActionMergeTargetData) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{4}
}

func (x *ChainedActionMergeTargetData) GetTargetLinks() []*ChainedActionMergeTargetData_TargetDataLink {
	if x != nil {
		return x.TargetLinks
	}
	return nil
}

type ResizeMergeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the commodity resize to merge
	CommodityData []*ResizeMergeSpec_CommodityMergeData `protobuf:"bytes,1,rep,name=commodityData" json:"commodityData,omitempty"`
}

func (x *ResizeMergeSpec) Reset() {
	*x = ResizeMergeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeMergeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeMergeSpec) ProtoMessage() {}

func (x *ResizeMergeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeMergeSpec.ProtoReflect.Descriptor instead.
func (*ResizeMergeSpec) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{5}
}

func (x *ResizeMergeSpec) GetCommodityData() []*ResizeMergeSpec_CommodityMergeData {
	if x != nil {
		return x.CommodityData
	}
	return nil
}

type ScaleMergeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the commodity resize to merge
	CommodityData []*ScaleMergeSpec_CommodityMergeData `protobuf:"bytes,1,rep,name=commodityData" json:"commodityData,omitempty"`
}

func (x *ScaleMergeSpec) Reset() {
	*x = ScaleMergeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleMergeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleMergeSpec) ProtoMessage() {}

func (x *ScaleMergeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleMergeSpec.ProtoReflect.Descriptor instead.
func (*ScaleMergeSpec) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{6}
}

func (x *ScaleMergeSpec) GetCommodityData() []*ScaleMergeSpec_CommodityMergeData {
	if x != nil {
		return x.CommodityData
	}
	return nil
}

type ProvisionMergeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProvisionMergeSpec) Reset() {
	*x = ProvisionMergeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionMergeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionMergeSpec) ProtoMessage() {}

func (x *ProvisionMergeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionMergeSpec.ProtoReflect.Descriptor instead.
func (*ProvisionMergeSpec) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{7}
}

type MoveMergeSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// provider for the move
	ProviderType *EntityDTO_EntityType `protobuf:"varint,1,req,name=providerType,enum=common_dto.EntityDTO_EntityType" json:"providerType,omitempty"`
}

func (x *MoveMergeSpec) Reset() {
	*x = MoveMergeSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveMergeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveMergeSpec) ProtoMessage() {}

func (x *MoveMergeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveMergeSpec.ProtoReflect.Descriptor instead.
func (*MoveMergeSpec) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{8}
}

func (x *MoveMergeSpec) GetProviderType() EntityDTO_EntityType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return EntityDTO_SWITCH
}

// ActionExecutionDTO may contain one or more action items related to the overall action to be
// executed.
type ActionExecutionDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overall action type.  In most cases this action type will be the same as the action type
	// specified in the action items contained within this.
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// One or more action items related to the overall action to be executed
	ActionItem []*ActionItemDTO `protobuf:"bytes,2,rep,name=actionItem" json:"actionItem,omitempty"`
	// Action Execution Progress
	Progress *int64 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	// There may be an action orchestration workflow
	// associated with the execution of an action
	Workflow *Workflow `protobuf:"bytes,4,opt,name=workflow" json:"workflow,omitempty"`
	// The instance ID of the action
	ActionOid *uint64 `protobuf:"varint,5,opt,name=actionOid" json:"actionOid,omitempty"`
	// Action severity
	Severity *string `protobuf:"bytes,6,opt,name=severity" json:"severity,omitempty"`
	// Action subCategory (received from relatedProblems in ActionItem)
	SubCategory *string `protobuf:"bytes,7,opt,name=subCategory" json:"subCategory,omitempty"`
	// Action description
	Explanation *string `protobuf:"bytes,8,opt,name=explanation" json:"explanation,omitempty"`
	// The state of action execution.
	ActionState *ActionResponseState `protobuf:"varint,9,opt,name=actionState,enum=common_dto.ActionResponseState" json:"actionState,omitempty"`
	// The time that action was created
	CreateTime *int64 `protobuf:"varint,10,opt,name=createTime" json:"createTime,omitempty"`
	// The time that action execution updated (action started executing)
	UpdateTime *int64 `protobuf:"varint,11,opt,name=updateTime" json:"updateTime,omitempty"`
	// The name of the user that has accepted an action.
	AcceptedBy *string `protobuf:"bytes,12,opt,name=acceptedBy" json:"acceptedBy,omitempty"`
	// the stable ID of the action that does not change over time.
	ActionStableId *uint64 `protobuf:"varint,13,opt,name=actionStableId" json:"actionStableId,omitempty"`
}

func (x *ActionExecutionDTO) Reset() {
	*x = ActionExecutionDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionExecutionDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionExecutionDTO) ProtoMessage() {}

func (x *ActionExecutionDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionExecutionDTO.ProtoReflect.Descriptor instead.
func (*ActionExecutionDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{9}
}

func (x *ActionExecutionDTO) GetActionType() ActionItemDTO_ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ActionItemDTO_NONE
}

func (x *ActionExecutionDTO) GetActionItem() []*ActionItemDTO {
	if x != nil {
		return x.ActionItem
	}
	return nil
}

func (x *ActionExecutionDTO) GetProgress() int64 {
	if x != nil && x.Progress != nil {
		return *x.Progress
	}
	return 0
}

func (x *ActionExecutionDTO) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *ActionExecutionDTO) GetActionOid() uint64 {
	if x != nil && x.ActionOid != nil {
		return *x.ActionOid
	}
	return 0
}

func (x *ActionExecutionDTO) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *ActionExecutionDTO) GetSubCategory() string {
	if x != nil && x.SubCategory != nil {
		return *x.SubCategory
	}
	return ""
}

func (x *ActionExecutionDTO) GetExplanation() string {
	if x != nil && x.Explanation != nil {
		return *x.Explanation
	}
	return ""
}

func (x *ActionExecutionDTO) GetActionState() ActionResponseState {
	if x != nil && x.ActionState != nil {
		return *x.ActionState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (x *ActionExecutionDTO) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *ActionExecutionDTO) GetUpdateTime() int64 {
	if x != nil && x.UpdateTime != nil {
		return *x.UpdateTime
	}
	return 0
}

func (x *ActionExecutionDTO) GetAcceptedBy() string {
	if x != nil && x.AcceptedBy != nil {
		return *x.AcceptedBy
	}
	return ""
}

func (x *ActionExecutionDTO) GetActionStableId() uint64 {
	if x != nil && x.ActionStableId != nil {
		return *x.ActionStableId
	}
	return 0
}

// This message holds values necessary for executing actions on Service Entity discovered with SDK probe
type ActionItemDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ActionType of the action
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// ActionItem's uuid
	Uuid *string `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
	// EntityDTO for the Target ServiceEntity on which the action should be applied
	TargetSE *EntityDTO `protobuf:"bytes,3,req,name=targetSE" json:"targetSE,omitempty"`
	// EntityDTO for the service entity which hosts the targetSE
	HostedBySE *EntityDTO `protobuf:"bytes,4,opt,name=hostedBySE" json:"hostedBySE,omitempty"`
	// EntityDTO for the ServiceEntity by which the Target ServiceEntity is hosted now (for Move action only)
	CurrentSE *EntityDTO `protobuf:"bytes,5,opt,name=currentSE" json:"currentSE,omitempty"`
	// EntityDTO for the ServiceEntity by which the Target ServiceEntity will be hosted
	// after applied the action (for Move action only)
	NewSE *EntityDTO `protobuf:"bytes,6,opt,name=newSE" json:"newSE,omitempty"`
	// CommodityDTO for the commodity on which the action
	// should be applied (current values)
	CurrentComm *CommodityDTO `protobuf:"bytes,7,opt,name=currentComm" json:"currentComm,omitempty"`
	// CommodityDTO for the commodity on which the action
	// should be applied (after the action is applied)
	NewComm *CommodityDTO `protobuf:"bytes,8,opt,name=newComm" json:"newComm,omitempty"`
	// CommodityAttribute enum notifying type of changed attribute
	CommodityAttribute *ActionItemDTO_CommodityAttribute `protobuf:"varint,10,opt,name=commodityAttribute,enum=common_dto.ActionItemDTO_CommodityAttribute" json:"commodityAttribute,omitempty"`
	// Information for providers of the targetSE.
	Providers []*ActionItemDTO_ProviderInfo `protobuf:"bytes,11,rep,name=providers" json:"providers,omitempty"`
	// Profile related information used in executing a deploy action
	EntityProfileDTO *EntityProfileDTO `protobuf:"bytes,12,opt,name=entityProfileDTO" json:"entityProfileDTO,omitempty"`
	// Context data used in executing actions
	ContextData []*ContextData `protobuf:"bytes,13,rep,name=contextData" json:"contextData,omitempty"`
	// The Reserved Instance, if any, associated with the action, eg
	// if a move or resize is taking advantage of an RI.
	RelatedRI *EntityDTO `protobuf:"bytes,14,opt,name=relatedRI" json:"relatedRI,omitempty"`
	// Whether the action item is related to consistent scaling
	ConsistentScalingCompliance *bool `protobuf:"varint,15,opt,name=consistentScalingCompliance" json:"consistentScalingCompliance,omitempty"`
	// Action savings
	Savings *float32 `protobuf:"fixed32,17,opt,name=savings" json:"savings,omitempty"`
	// Action saving unit
	SavingUnit *string `protobuf:"bytes,18,opt,name=savingUnit" json:"savingUnit,omitempty"`
	// The human readable description for an action.
	Description *string `protobuf:"bytes,19,opt,name=description" json:"description,omitempty"`
	// The information about characteristics of an action
	Characteristics *ActionItemDTO_ExecutionCharacteristics `protobuf:"bytes,20,opt,name=characteristics" json:"characteristics,omitempty"`
	// The risk that this action is responding to
	Risk *ActionItemDTO_Risk `protobuf:"bytes,21,opt,name=risk" json:"risk,omitempty"`
}

func (x *ActionItemDTO) Reset() {
	*x = ActionItemDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionItemDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionItemDTO) ProtoMessage() {}

func (x *ActionItemDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionItemDTO.ProtoReflect.Descriptor instead.
func (*ActionItemDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10}
}

func (x *ActionItemDTO) GetActionType() ActionItemDTO_ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ActionItemDTO_NONE
}

func (x *ActionItemDTO) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ActionItemDTO) GetTargetSE() *EntityDTO {
	if x != nil {
		return x.TargetSE
	}
	return nil
}

func (x *ActionItemDTO) GetHostedBySE() *EntityDTO {
	if x != nil {
		return x.HostedBySE
	}
	return nil
}

func (x *ActionItemDTO) GetCurrentSE() *EntityDTO {
	if x != nil {
		return x.CurrentSE
	}
	return nil
}

func (x *ActionItemDTO) GetNewSE() *EntityDTO {
	if x != nil {
		return x.NewSE
	}
	return nil
}

func (x *ActionItemDTO) GetCurrentComm() *CommodityDTO {
	if x != nil {
		return x.CurrentComm
	}
	return nil
}

func (x *ActionItemDTO) GetNewComm() *CommodityDTO {
	if x != nil {
		return x.NewComm
	}
	return nil
}

func (x *ActionItemDTO) GetCommodityAttribute() ActionItemDTO_CommodityAttribute {
	if x != nil && x.CommodityAttribute != nil {
		return *x.CommodityAttribute
	}
	return ActionItemDTO_Capacity
}

func (x *ActionItemDTO) GetProviders() []*ActionItemDTO_ProviderInfo {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *ActionItemDTO) GetEntityProfileDTO() *EntityProfileDTO {
	if x != nil {
		return x.EntityProfileDTO
	}
	return nil
}

func (x *ActionItemDTO) GetContextData() []*ContextData {
	if x != nil {
		return x.ContextData
	}
	return nil
}

func (x *ActionItemDTO) GetRelatedRI() *EntityDTO {
	if x != nil {
		return x.RelatedRI
	}
	return nil
}

func (x *ActionItemDTO) GetConsistentScalingCompliance() bool {
	if x != nil && x.ConsistentScalingCompliance != nil {
		return *x.ConsistentScalingCompliance
	}
	return false
}

func (x *ActionItemDTO) GetSavings() float32 {
	if x != nil && x.Savings != nil {
		return *x.Savings
	}
	return 0
}

func (x *ActionItemDTO) GetSavingUnit() string {
	if x != nil && x.SavingUnit != nil {
		return *x.SavingUnit
	}
	return ""
}

func (x *ActionItemDTO) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ActionItemDTO) GetCharacteristics() *ActionItemDTO_ExecutionCharacteristics {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *ActionItemDTO) GetRisk() *ActionItemDTO_Risk {
	if x != nil {
		return x.Risk
	}
	return nil
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"` // e.g. UUID
	DisplayName *string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// parameters describe values that will be conveyed to the workflow at execution time
	Param []*Workflow_Parameter `protobuf:"bytes,4,rep,name=param" json:"param,omitempty"`
	// property field used for AWS catalogs modeled as workflows. It is
	// not used in other cases
	Property   []*Workflow_Property  `protobuf:"bytes,5,rep,name=property" json:"property,omitempty"`
	EntityType *EntityDTO_EntityType `protobuf:"varint,6,opt,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// Remaining fields are unused in classic OpsManager.
	// scriptPath is used for action scripts in XL, and in that context
	// it is required.
	ScriptPath *string                     `protobuf:"bytes,7,opt,name=scriptPath" json:"scriptPath,omitempty"`
	ActionType *ActionItemDTO_ActionType   `protobuf:"varint,8,opt,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	Phase      *Workflow_ActionScriptPhase `protobuf:"varint,9,opt,name=phase,enum=common_dto.Workflow_ActionScriptPhase" json:"phase,omitempty"`
	// max seconds to allow action script to execute before attemting to terminate
	// it by sending a TERM signal (a default is used if missing)
	TimeLimitSeconds *int64 `protobuf:"varint,10,opt,name=timeLimitSeconds" json:"timeLimitSeconds,omitempty"`
	// this indicates if the API message format should be used to send the action to the target
	ApiMessageFormatEnabled *bool `protobuf:"varint,11,opt,name=apiMessageFormatEnabled" json:"apiMessageFormatEnabled,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{11}
}

func (x *Workflow) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Workflow) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Workflow) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Workflow) GetParam() []*Workflow_Parameter {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Workflow) GetProperty() []*Workflow_Property {
	if x != nil {
		return x.Property
	}
	return nil
}

func (x *Workflow) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *Workflow) GetScriptPath() string {
	if x != nil && x.ScriptPath != nil {
		return *x.ScriptPath
	}
	return ""
}

func (x *Workflow) GetActionType() ActionItemDTO_ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ActionItemDTO_NONE
}

func (x *Workflow) GetPhase() Workflow_ActionScriptPhase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return Workflow_ON_GENERATION
}

func (x *Workflow) GetTimeLimitSeconds() int64 {
	if x != nil && x.TimeLimitSeconds != nil {
		return *x.TimeLimitSeconds
	}
	return 0
}

func (x *Workflow) GetApiMessageFormatEnabled() bool {
	if x != nil && x.ApiMessageFormatEnabled != nil {
		return *x.ApiMessageFormatEnabled
	}
	return false
}

// Errpr describing some problems in reporting action to action approval backend.
type ActionErrorDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OID of the action error is reported for.
	ActionOid *int64 `protobuf:"varint,1,req,name=actionOid" json:"actionOid,omitempty"`
	// Error message (description)
	Message *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
}

func (x *ActionErrorDTO) Reset() {
	*x = ActionErrorDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionErrorDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionErrorDTO) ProtoMessage() {}

func (x *ActionErrorDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionErrorDTO.ProtoReflect.Descriptor instead.
func (*ActionErrorDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{12}
}

func (x *ActionErrorDTO) GetActionOid() int64 {
	if x != nil && x.ActionOid != nil {
		return *x.ActionOid
	}
	return 0
}

func (x *ActionErrorDTO) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// Description of action event to audit. It holds action representation to external world (3rd-party
// software), action state transition and event timestamp.
type ActionEventDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action representation for 3rd-party software.
	Action *ActionExecutionDTO `protobuf:"bytes,1,req,name=action" json:"action,omitempty"`
	// Previous action state - before the event.
	OldState *ActionResponseState `protobuf:"varint,2,req,name=oldState,enum=common_dto.ActionResponseState" json:"oldState,omitempty"`
	// New action state - after the event.
	NewState *ActionResponseState `protobuf:"varint,3,req,name=newState,enum=common_dto.ActionResponseState" json:"newState,omitempty"`
	// Timestamp of action event.
	Timestamp *int64 `protobuf:"varint,4,req,name=timestamp" json:"timestamp,omitempty"`
	// Information about who accepted the action.
	// Maybe accepted :
	// 1. manually in Turbonomic
	// 2. automated in Turbonomic
	// 3. in third-party platform (ServiceNow)
	AcceptedBy *string `protobuf:"bytes,5,opt,name=acceptedBy" json:"acceptedBy,omitempty"`
}

func (x *ActionEventDTO) Reset() {
	*x = ActionEventDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionEventDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEventDTO) ProtoMessage() {}

func (x *ActionEventDTO) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEventDTO.ProtoReflect.Descriptor instead.
func (*ActionEventDTO) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{13}
}

func (x *ActionEventDTO) GetAction() *ActionExecutionDTO {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionEventDTO) GetOldState() ActionResponseState {
	if x != nil && x.OldState != nil {
		return *x.OldState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (x *ActionEventDTO) GetNewState() ActionResponseState {
	if x != nil && x.NewState != nil {
		return *x.NewState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (x *ActionEventDTO) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ActionEventDTO) GetAcceptedBy() string {
	if x != nil && x.AcceptedBy != nil {
		return *x.AcceptedBy
	}
	return ""
}

// This class holds response information about executing action via a third party integration.
type ExternalActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL to actual change request in thirdParty
	Url *string `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
	// short name or ID of change request in thirdParty
	ShortName *string `protobuf:"bytes,3,req,name=shortName" json:"shortName,omitempty"`
}

func (x *ExternalActionInfo) Reset() {
	*x = ExternalActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalActionInfo) ProtoMessage() {}

func (x *ExternalActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalActionInfo.ProtoReflect.Descriptor instead.
func (*ExternalActionInfo) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{14}
}

func (x *ExternalActionInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *ExternalActionInfo) GetShortName() string {
	if x != nil && x.ShortName != nil {
		return *x.ShortName
	}
	return ""
}

// Policy applied to a particular action type
//
// If no value is sent for an EntityType/ActionCapability pair, the capability
// for that ActionCapability on that EntityType will be treated as NOT_EXECUTABLE.
//
// For example, if a probe sends a SUPPORTED value for VIRTUAL_MACHINE MOVE but no value
// for VIRTUAL_MACHINE SUSPEND, then VIRTUAL_MACHINE SUSPEND will be treated as NOT_EXECUTABLE.
type ActionPolicyDTO_ActionPolicyElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Action type
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// Action execution capability
	ActionCapability *ActionPolicyDTO_ActionCapability `protobuf:"varint,2,req,name=actionCapability,enum=common_dto.ActionPolicyDTO_ActionCapability" json:"actionCapability,omitempty"`
	// Action policy scope: either provider (Move/Scale type) or commodity (Resize/Scale type).
	// If no scope defined the policy is applied to all providers (Move/Scale) or commodities
	// (Resize/Scale). If probe defines 2 policies for the same action type so that one policy
	// has a scope and another one doesn't have it then the policy with a scope has higher
	// priority.
	//
	// Types that are assignable to Scope:
	//	*ActionPolicyDTO_ActionPolicyElement_ProviderScope_
	//	*ActionPolicyDTO_ActionPolicyElement_CommodityScope_
	Scope isActionPolicyDTO_ActionPolicyElement_Scope `protobuf_oneof:"scope"`
	// Defines if action is disruptive
	Disruptive *bool `protobuf:"varint,5,opt,name=disruptive,def=0" json:"disruptive,omitempty"`
	// Defines if action is reversible
	Reversible *bool `protobuf:"varint,6,opt,name=reversible,def=1" json:"reversible,omitempty"`
}

// Default values for ActionPolicyDTO_ActionPolicyElement fields.
const (
	Default_ActionPolicyDTO_ActionPolicyElement_Disruptive = bool(false)
	Default_ActionPolicyDTO_ActionPolicyElement_Reversible = bool(true)
)

func (x *ActionPolicyDTO_ActionPolicyElement) Reset() {
	*x = ActionPolicyDTO_ActionPolicyElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicyDTO_ActionPolicyElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicyDTO_ActionPolicyElement) ProtoMessage() {}

func (x *ActionPolicyDTO_ActionPolicyElement) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicyDTO_ActionPolicyElement.ProtoReflect.Descriptor instead.
func (*ActionPolicyDTO_ActionPolicyElement) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetActionType() ActionItemDTO_ActionType {
	if x != nil && x.ActionType != nil {
		return *x.ActionType
	}
	return ActionItemDTO_NONE
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetActionCapability() ActionPolicyDTO_ActionCapability {
	if x != nil && x.ActionCapability != nil {
		return *x.ActionCapability
	}
	return ActionPolicyDTO_NOT_SUPPORTED
}

func (m *ActionPolicyDTO_ActionPolicyElement) GetScope() isActionPolicyDTO_ActionPolicyElement_Scope {
	if m != nil {
		return m.Scope
	}
	return nil
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetProviderScope() *ActionPolicyDTO_ActionPolicyElement_ProviderScope {
	if x, ok := x.GetScope().(*ActionPolicyDTO_ActionPolicyElement_ProviderScope_); ok {
		return x.ProviderScope
	}
	return nil
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetCommodityScope() *ActionPolicyDTO_ActionPolicyElement_CommodityScope {
	if x, ok := x.GetScope().(*ActionPolicyDTO_ActionPolicyElement_CommodityScope_); ok {
		return x.CommodityScope
	}
	return nil
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetDisruptive() bool {
	if x != nil && x.Disruptive != nil {
		return *x.Disruptive
	}
	return Default_ActionPolicyDTO_ActionPolicyElement_Disruptive
}

func (x *ActionPolicyDTO_ActionPolicyElement) GetReversible() bool {
	if x != nil && x.Reversible != nil {
		return *x.Reversible
	}
	return Default_ActionPolicyDTO_ActionPolicyElement_Reversible
}

type isActionPolicyDTO_ActionPolicyElement_Scope interface {
	isActionPolicyDTO_ActionPolicyElement_Scope()
}

type ActionPolicyDTO_ActionPolicyElement_ProviderScope_ struct {
	// Provider scope
	ProviderScope *ActionPolicyDTO_ActionPolicyElement_ProviderScope `protobuf:"bytes,3,opt,name=providerScope,oneof"`
}

type ActionPolicyDTO_ActionPolicyElement_CommodityScope_ struct {
	// Commodity scope
	CommodityScope *ActionPolicyDTO_ActionPolicyElement_CommodityScope `protobuf:"bytes,4,opt,name=commodityScope,oneof"`
}

func (*ActionPolicyDTO_ActionPolicyElement_ProviderScope_) isActionPolicyDTO_ActionPolicyElement_Scope() {
}

func (*ActionPolicyDTO_ActionPolicyElement_CommodityScope_) isActionPolicyDTO_ActionPolicyElement_Scope() {
}

// Provider scope means that policy is applied to actions moving to certain providers.
// It is relevant to Move/Scale actions.
type ActionPolicyDTO_ActionPolicyElement_ProviderScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderType *EntityDTO_EntityType `protobuf:"varint,1,req,name=providerType,enum=common_dto.EntityDTO_EntityType" json:"providerType,omitempty"`
}

func (x *ActionPolicyDTO_ActionPolicyElement_ProviderScope) Reset() {
	*x = ActionPolicyDTO_ActionPolicyElement_ProviderScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicyDTO_ActionPolicyElement_ProviderScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicyDTO_ActionPolicyElement_ProviderScope) ProtoMessage() {}

func (x *ActionPolicyDTO_ActionPolicyElement_ProviderScope) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicyDTO_ActionPolicyElement_ProviderScope.ProtoReflect.Descriptor instead.
func (*ActionPolicyDTO_ActionPolicyElement_ProviderScope) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ActionPolicyDTO_ActionPolicyElement_ProviderScope) GetProviderType() EntityDTO_EntityType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return EntityDTO_SWITCH
}

// Commodity scope means that policy is applied to actions resizing certain commodities.
// It is relevant to Resize/Scale actions.
type ActionPolicyDTO_ActionPolicyElement_CommodityScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
}

func (x *ActionPolicyDTO_ActionPolicyElement_CommodityScope) Reset() {
	*x = ActionPolicyDTO_ActionPolicyElement_CommodityScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPolicyDTO_ActionPolicyElement_CommodityScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPolicyDTO_ActionPolicyElement_CommodityScope) ProtoMessage() {}

func (x *ActionPolicyDTO_ActionPolicyElement_CommodityScope) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPolicyDTO_ActionPolicyElement_CommodityScope.ProtoReflect.Descriptor instead.
func (*ActionPolicyDTO_ActionPolicyElement_CommodityScope) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *ActionPolicyDTO_ActionPolicyElement_CommodityScope) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

type ActionMergeTargetData_EntityRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EntityRelationship:
	//	*ActionMergeTargetData_EntityRelationship_ConnectionType
	EntityRelationship isActionMergeTargetData_EntityRelationship_EntityRelationship `protobuf_oneof:"entityRelationship"`
}

func (x *ActionMergeTargetData_EntityRelationship) Reset() {
	*x = ActionMergeTargetData_EntityRelationship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMergeTargetData_EntityRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMergeTargetData_EntityRelationship) ProtoMessage() {}

func (x *ActionMergeTargetData_EntityRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMergeTargetData_EntityRelationship.ProtoReflect.Descriptor instead.
func (*ActionMergeTargetData_EntityRelationship) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{3, 0}
}

func (m *ActionMergeTargetData_EntityRelationship) GetEntityRelationship() isActionMergeTargetData_EntityRelationship_EntityRelationship {
	if m != nil {
		return m.EntityRelationship
	}
	return nil
}

func (x *ActionMergeTargetData_EntityRelationship) GetConnectionType() ConnectedEntity_ConnectionType {
	if x, ok := x.GetEntityRelationship().(*ActionMergeTargetData_EntityRelationship_ConnectionType); ok {
		return x.ConnectionType
	}
	return ConnectedEntity_NORMAL_CONNECTION
}

type isActionMergeTargetData_EntityRelationship_EntityRelationship interface {
	isActionMergeTargetData_EntityRelationship_EntityRelationship()
}

type ActionMergeTargetData_EntityRelationship_ConnectionType struct {
	ConnectionType ConnectedEntity_ConnectionType `protobuf:"varint,1,opt,name=connectionType,enum=common_dto.ConnectedEntity_ConnectionType,oneof"`
}

func (*ActionMergeTargetData_EntityRelationship_ConnectionType) isActionMergeTargetData_EntityRelationship_EntityRelationship() {
}

type ChainedActionMergeTargetData_TargetDataLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MergeTarget *ActionMergeTargetData `protobuf:"bytes,2,req,name=merge_target,json=mergeTarget" json:"merge_target,omitempty"`
	// The intermediate entity can be a target for de-duplicating the entity actions
	// In the example of Container -> ContainerSpec -> WorkloadController,
	// the Container_Spec will additionally serve as the entity to de-duplicate the actions
	// of all the containers associated with it.
	// WorkloadController W1 --> owns -> ContainerSpecs CS1
	// CS1 --> aggregates --> Containers C1, C2, C3
	// Then the actions of C1,C2,C3 will be de-duplicated by CS1 and created as one action item
	DeDuplicate *bool `protobuf:"varint,3,opt,name=de_duplicate,json=deDuplicate,def=0" json:"de_duplicate,omitempty"`
}

// Default values for ChainedActionMergeTargetData_TargetDataLink fields.
const (
	Default_ChainedActionMergeTargetData_TargetDataLink_DeDuplicate = bool(false)
)

func (x *ChainedActionMergeTargetData_TargetDataLink) Reset() {
	*x = ChainedActionMergeTargetData_TargetDataLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainedActionMergeTargetData_TargetDataLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainedActionMergeTargetData_TargetDataLink) ProtoMessage() {}

func (x *ChainedActionMergeTargetData_TargetDataLink) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainedActionMergeTargetData_TargetDataLink.ProtoReflect.Descriptor instead.
func (*ChainedActionMergeTargetData_TargetDataLink) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ChainedActionMergeTargetData_TargetDataLink) GetMergeTarget() *ActionMergeTargetData {
	if x != nil {
		return x.MergeTarget
	}
	return nil
}

func (x *ChainedActionMergeTargetData_TargetDataLink) GetDeDuplicate() bool {
	if x != nil && x.DeDuplicate != nil {
		return *x.DeDuplicate
	}
	return Default_ChainedActionMergeTargetData_TargetDataLink_DeDuplicate
}

type ResizeMergeSpec_CommodityMergeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the commodity
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	// The type of the changed attribute.
	ChangedAttr *ActionItemDTO_CommodityAttribute `protobuf:"varint,2,opt,name=changed_attr,json=changedAttr,enum=common_dto.ActionItemDTO_CommodityAttribute" json:"changed_attr,omitempty"`
}

func (x *ResizeMergeSpec_CommodityMergeData) Reset() {
	*x = ResizeMergeSpec_CommodityMergeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeMergeSpec_CommodityMergeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeMergeSpec_CommodityMergeData) ProtoMessage() {}

func (x *ResizeMergeSpec_CommodityMergeData) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeMergeSpec_CommodityMergeData.ProtoReflect.Descriptor instead.
func (*ResizeMergeSpec_CommodityMergeData) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ResizeMergeSpec_CommodityMergeData) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *ResizeMergeSpec_CommodityMergeData) GetChangedAttr() ActionItemDTO_CommodityAttribute {
	if x != nil && x.ChangedAttr != nil {
		return *x.ChangedAttr
	}
	return ActionItemDTO_Capacity
}

type ScaleMergeSpec_CommodityMergeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the commodity
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	// The type of the changed attribute.
	ChangedAttr *ActionItemDTO_CommodityAttribute `protobuf:"varint,2,opt,name=changed_attr,json=changedAttr,enum=common_dto.ActionItemDTO_CommodityAttribute" json:"changed_attr,omitempty"`
}

func (x *ScaleMergeSpec_CommodityMergeData) Reset() {
	*x = ScaleMergeSpec_CommodityMergeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleMergeSpec_CommodityMergeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleMergeSpec_CommodityMergeData) ProtoMessage() {}

func (x *ScaleMergeSpec_CommodityMergeData) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleMergeSpec_CommodityMergeData.ProtoReflect.Descriptor instead.
func (*ScaleMergeSpec_CommodityMergeData) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ScaleMergeSpec_CommodityMergeData) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *ScaleMergeSpec_CommodityMergeData) GetChangedAttr() ActionItemDTO_CommodityAttribute {
	if x != nil && x.ChangedAttr != nil {
		return *x.ChangedAttr
	}
	return ActionItemDTO_Capacity
}

// This message holds provider information for the target SE of this ActionItem.
type ActionItemDTO_ProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType *EntityDTO_EntityType `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	Ids        []string              `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
}

func (x *ActionItemDTO_ProviderInfo) Reset() {
	*x = ActionItemDTO_ProviderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionItemDTO_ProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionItemDTO_ProviderInfo) ProtoMessage() {}

func (x *ActionItemDTO_ProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionItemDTO_ProviderInfo.ProtoReflect.Descriptor instead.
func (*ActionItemDTO_ProviderInfo) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ActionItemDTO_ProviderInfo) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *ActionItemDTO_ProviderInfo) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

// The information about characteristics of action execution.
type ActionItemDTO_ExecutionCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reversibility of the action execution.
	Reversible *bool `protobuf:"varint,1,opt,name=reversible" json:"reversible,omitempty"`
	// THe disruptiveness of the action.
	Disruptive *bool `protobuf:"varint,2,opt,name=disruptive" json:"disruptive,omitempty"`
}

func (x *ActionItemDTO_ExecutionCharacteristics) Reset() {
	*x = ActionItemDTO_ExecutionCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionItemDTO_ExecutionCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionItemDTO_ExecutionCharacteristics) ProtoMessage() {}

func (x *ActionItemDTO_ExecutionCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionItemDTO_ExecutionCharacteristics.ProtoReflect.Descriptor instead.
func (*ActionItemDTO_ExecutionCharacteristics) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ActionItemDTO_ExecutionCharacteristics) GetReversible() bool {
	if x != nil && x.Reversible != nil {
		return *x.Reversible
	}
	return false
}

func (x *ActionItemDTO_ExecutionCharacteristics) GetDisruptive() bool {
	if x != nil && x.Disruptive != nil {
		return *x.Disruptive
	}
	return false
}

// The information about the risk resulting in the action.
type ActionItemDTO_Risk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The severity of the risk
	Severity *ActionItemDTO_Risk_Severity `protobuf:"varint,1,opt,name=severity,enum=common_dto.ActionItemDTO_Risk_Severity,def=0" json:"severity,omitempty"`
	// category of risk
	Category *ActionItemDTO_Risk_Category `protobuf:"varint,2,opt,name=category,enum=common_dto.ActionItemDTO_Risk_Category" json:"category,omitempty"`
	// the commodities affected by the risk
	AffectedCommodity []CommodityDTO_CommodityType `protobuf:"varint,3,rep,name=affectedCommodity,enum=common_dto.CommodityDTO_CommodityType" json:"affectedCommodity,omitempty"`
	// description of risk
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

// Default values for ActionItemDTO_Risk fields.
const (
	Default_ActionItemDTO_Risk_Severity = ActionItemDTO_Risk_UNKNOWN
)

func (x *ActionItemDTO_Risk) Reset() {
	*x = ActionItemDTO_Risk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionItemDTO_Risk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionItemDTO_Risk) ProtoMessage() {}

func (x *ActionItemDTO_Risk) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionItemDTO_Risk.ProtoReflect.Descriptor instead.
func (*ActionItemDTO_Risk) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{10, 2}
}

func (x *ActionItemDTO_Risk) GetSeverity() ActionItemDTO_Risk_Severity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_ActionItemDTO_Risk_Severity
}

func (x *ActionItemDTO_Risk) GetCategory() ActionItemDTO_Risk_Category {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ActionItemDTO_Risk_PERFORMANCE_ASSURANCE
}

func (x *ActionItemDTO_Risk) GetAffectedCommodity() []CommodityDTO_CommodityType {
	if x != nil {
		return x.AffectedCommodity
	}
	return nil
}

func (x *ActionItemDTO_Risk) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type Workflow_Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Type        *string `protobuf:"bytes,3,req,name=type,def=String" json:"type,omitempty"`
	Mandatory   *bool   `protobuf:"varint,4,opt,name=mandatory,def=1" json:"mandatory,omitempty"`
}

// Default values for Workflow_Parameter fields.
const (
	Default_Workflow_Parameter_Type      = string("String")
	Default_Workflow_Parameter_Mandatory = bool(true)
)

func (x *Workflow_Parameter) Reset() {
	*x = Workflow_Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow_Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Parameter) ProtoMessage() {}

func (x *Workflow_Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Parameter.ProtoReflect.Descriptor instead.
func (*Workflow_Parameter) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Workflow_Parameter) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Workflow_Parameter) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Workflow_Parameter) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Workflow_Parameter_Type
}

func (x *Workflow_Parameter) GetMandatory() bool {
	if x != nil && x.Mandatory != nil {
		return *x.Mandatory
	}
	return Default_Workflow_Parameter_Mandatory
}

type Workflow_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Workflow_Property) Reset() {
	*x = Workflow_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ActionExecution_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow_Property) ProtoMessage() {}

func (x *Workflow_Property) ProtoReflect() protoreflect.Message {
	mi := &file_ActionExecution_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow_Property.ProtoReflect.Descriptor instead.
func (*Workflow_Property) Descriptor() ([]byte, []int) {
	return file_ActionExecution_proto_rawDescGZIP(), []int{11, 1}
}

func (x *Workflow_Property) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Workflow_Property) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_ActionExecution_proto protoreflect.FileDescriptor

var file_ActionExecution_proto_rawDesc = []byte{
	0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x07, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x0d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x93, 0x05, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x58, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0a,
	0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x1a, 0x55, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x5e, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x22, 0xb6, 0x03, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x40, 0x0a, 0x0a,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x37, 0x0a,
	0x08, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0c,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x22, 0x80, 0x02, 0x0a,
	0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x5a, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xae, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x52, 0x0a, 0x09, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x80, 0x01,
	0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70,
	0x22, 0xfc, 0x01, 0x0a, 0x1c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x59, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x1a, 0x80, 0x01, 0x0a,
	0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0c, 0x64, 0x65, 0x5f, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22,
	0x9e, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xb4, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4f, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xb4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x22,
	0x14, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0x55, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac, 0x04, 0x0a,
	0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x54, 0x4f, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xed, 0x0f, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x12, 0x44, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x45, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x45, 0x12, 0x35, 0x0a, 0x0a, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x45, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53,
	0x45, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x45, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x45, 0x12, 0x2b, 0x0a, 0x05, 0x6e, 0x65, 0x77, 0x53, 0x45, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x6e, 0x65,
	0x77, 0x53, 0x45, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12,
	0x32, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x12, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54, 0x4f, 0x52,
	0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x54,
	0x4f, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x49, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x49, 0x12, 0x40, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x54, 0x4f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a,
	0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x72, 0x69, 0x73,
	0x6b, 0x1a, 0x62, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x1a, 0xbd, 0x03, 0x0a, 0x04, 0x52, 0x69, 0x73, 0x6b, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x69, 0x73, 0x6b, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a,
	0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x41, 0x53, 0x53, 0x55, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x22, 0x47, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x04, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41,
	0x44, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x53,
	0x49, 0x5a, 0x45, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x15, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x47, 0x45, 0x54, 0x48, 0x45, 0x52, 0x10, 0x16,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x18, 0x22, 0x3e, 0x0a, 0x12, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x22, 0xc0, 0x06, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x44, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x54, 0x4f, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x61, 0x70, 0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x3a, 0x06, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x6d, 0x61, 0x6e,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x34, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x22, 0x48,
	0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x54, 0x4f,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x0e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x36, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x44, 0x0a, 0x12, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x2a, 0xb6, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x42, 0x60, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x76, 0x6d, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x74, 0x6f, 0x42, 0x0f, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x2c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_ActionExecution_proto_rawDescOnce sync.Once
	file_ActionExecution_proto_rawDescData = file_ActionExecution_proto_rawDesc
)

func file_ActionExecution_proto_rawDescGZIP() []byte {
	file_ActionExecution_proto_rawDescOnce.Do(func() {
		file_ActionExecution_proto_rawDescData = protoimpl.X.CompressGZIP(file_ActionExecution_proto_rawDescData)
	})
	return file_ActionExecution_proto_rawDescData
}

var file_ActionExecution_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_ActionExecution_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_ActionExecution_proto_goTypes = []interface{}{
	(ActionResponseState)(0),                                   // 0: common_dto.ActionResponseState
	(ActionPolicyDTO_ActionCapability)(0),                      // 1: common_dto.ActionPolicyDTO.ActionCapability
	(ActionItemDTO_ActionType)(0),                              // 2: common_dto.ActionItemDTO.ActionType
	(ActionItemDTO_CommodityAttribute)(0),                      // 3: common_dto.ActionItemDTO.CommodityAttribute
	(ActionItemDTO_Risk_Category)(0),                           // 4: common_dto.ActionItemDTO.Risk.Category
	(ActionItemDTO_Risk_Severity)(0),                           // 5: common_dto.ActionItemDTO.Risk.Severity
	(Workflow_ActionScriptPhase)(0),                            // 6: common_dto.Workflow.ActionScriptPhase
	(*ActionPolicyDTO)(nil),                                    // 7: common_dto.ActionPolicyDTO
	(*ActionMergePolicyDTO)(nil),                               // 8: common_dto.ActionMergePolicyDTO
	(*ActionMergeExecutionTarget)(nil),                         // 9: common_dto.ActionMergeExecutionTarget
	(*ActionMergeTargetData)(nil),                              // 10: common_dto.ActionMergeTargetData
	(*ChainedActionMergeTargetData)(nil),                       // 11: common_dto.ChainedActionMergeTargetData
	(*ResizeMergeSpec)(nil),                                    // 12: common_dto.ResizeMergeSpec
	(*ScaleMergeSpec)(nil),                                     // 13: common_dto.ScaleMergeSpec
	(*ProvisionMergeSpec)(nil),                                 // 14: common_dto.ProvisionMergeSpec
	(*MoveMergeSpec)(nil),                                      // 15: common_dto.MoveMergeSpec
	(*ActionExecutionDTO)(nil),                                 // 16: common_dto.ActionExecutionDTO
	(*ActionItemDTO)(nil),                                      // 17: common_dto.ActionItemDTO
	(*Workflow)(nil),                                           // 18: common_dto.Workflow
	(*ActionErrorDTO)(nil),                                     // 19: common_dto.ActionErrorDTO
	(*ActionEventDTO)(nil),                                     // 20: common_dto.ActionEventDTO
	(*ExternalActionInfo)(nil),                                 // 21: common_dto.ExternalActionInfo
	(*ActionPolicyDTO_ActionPolicyElement)(nil),                // 22: common_dto.ActionPolicyDTO.ActionPolicyElement
	(*ActionPolicyDTO_ActionPolicyElement_ProviderScope)(nil),  // 23: common_dto.ActionPolicyDTO.ActionPolicyElement.ProviderScope
	(*ActionPolicyDTO_ActionPolicyElement_CommodityScope)(nil), // 24: common_dto.ActionPolicyDTO.ActionPolicyElement.CommodityScope
	(*ActionMergeTargetData_EntityRelationship)(nil),           // 25: common_dto.ActionMergeTargetData.EntityRelationship
	(*ChainedActionMergeTargetData_TargetDataLink)(nil),        // 26: common_dto.ChainedActionMergeTargetData.TargetDataLink
	(*ResizeMergeSpec_CommodityMergeData)(nil),                 // 27: common_dto.ResizeMergeSpec.CommodityMergeData
	(*ScaleMergeSpec_CommodityMergeData)(nil),                  // 28: common_dto.ScaleMergeSpec.CommodityMergeData
	(*ActionItemDTO_ProviderInfo)(nil),                         // 29: common_dto.ActionItemDTO.ProviderInfo
	(*ActionItemDTO_ExecutionCharacteristics)(nil),             // 30: common_dto.ActionItemDTO.ExecutionCharacteristics
	(*ActionItemDTO_Risk)(nil),                                 // 31: common_dto.ActionItemDTO.Risk
	(*Workflow_Parameter)(nil),                                 // 32: common_dto.Workflow.Parameter
	(*Workflow_Property)(nil),                                  // 33: common_dto.Workflow.Property
	(EntityDTO_EntityType)(0),                                  // 34: common_dto.EntityDTO.EntityType
	(*EntityDTO)(nil),                                          // 35: common_dto.EntityDTO
	(*CommodityDTO)(nil),                                       // 36: common_dto.CommodityDTO
	(*EntityProfileDTO)(nil),                                   // 37: common_dto.EntityProfileDTO
	(*ContextData)(nil),                                        // 38: common_dto.ContextData
	(CommodityDTO_CommodityType)(0),                            // 39: common_dto.CommodityDTO.CommodityType
	(ConnectedEntity_ConnectionType)(0),                        // 40: common_dto.ConnectedEntity.ConnectionType
}
var file_ActionExecution_proto_depIdxs = []int32{
	34, // 0: common_dto.ActionPolicyDTO.entityType:type_name -> common_dto.EntityDTO.EntityType
	22, // 1: common_dto.ActionPolicyDTO.policyElement:type_name -> common_dto.ActionPolicyDTO.ActionPolicyElement
	34, // 2: common_dto.ActionMergePolicyDTO.entityType:type_name -> common_dto.EntityDTO.EntityType
	9,  // 3: common_dto.ActionMergePolicyDTO.executionTargets:type_name -> common_dto.ActionMergeExecutionTarget
	12, // 4: common_dto.ActionMergePolicyDTO.resizeSpec:type_name -> common_dto.ResizeMergeSpec
	13, // 5: common_dto.ActionMergePolicyDTO.scaleSpec:type_name -> common_dto.ScaleMergeSpec
	15, // 6: common_dto.ActionMergePolicyDTO.moveSpec:type_name -> common_dto.MoveMergeSpec
	14, // 7: common_dto.ActionMergePolicyDTO.provisionSpec:type_name -> common_dto.ProvisionMergeSpec
	10, // 8: common_dto.ActionMergeExecutionTarget.mergeTarget:type_name -> common_dto.ActionMergeTargetData
	11, // 9: common_dto.ActionMergeExecutionTarget.chainedMergeTarget:type_name -> common_dto.ChainedActionMergeTargetData
	34, // 10: common_dto.ActionMergeTargetData.relatedTo:type_name -> common_dto.EntityDTO.EntityType
	25, // 11: common_dto.ActionMergeTargetData.relatedBy:type_name -> common_dto.ActionMergeTargetData.EntityRelationship
	26, // 12: common_dto.ChainedActionMergeTargetData.targetLinks:type_name -> common_dto.ChainedActionMergeTargetData.TargetDataLink
	27, // 13: common_dto.ResizeMergeSpec.commodityData:type_name -> common_dto.ResizeMergeSpec.CommodityMergeData
	28, // 14: common_dto.ScaleMergeSpec.commodityData:type_name -> common_dto.ScaleMergeSpec.CommodityMergeData
	34, // 15: common_dto.MoveMergeSpec.providerType:type_name -> common_dto.EntityDTO.EntityType
	2,  // 16: common_dto.ActionExecutionDTO.actionType:type_name -> common_dto.ActionItemDTO.ActionType
	17, // 17: common_dto.ActionExecutionDTO.actionItem:type_name -> common_dto.ActionItemDTO
	18, // 18: common_dto.ActionExecutionDTO.workflow:type_name -> common_dto.Workflow
	0,  // 19: common_dto.ActionExecutionDTO.actionState:type_name -> common_dto.ActionResponseState
	2,  // 20: common_dto.ActionItemDTO.actionType:type_name -> common_dto.ActionItemDTO.ActionType
	35, // 21: common_dto.ActionItemDTO.targetSE:type_name -> common_dto.EntityDTO
	35, // 22: common_dto.ActionItemDTO.hostedBySE:type_name -> common_dto.EntityDTO
	35, // 23: common_dto.ActionItemDTO.currentSE:type_name -> common_dto.EntityDTO
	35, // 24: common_dto.ActionItemDTO.newSE:type_name -> common_dto.EntityDTO
	36, // 25: common_dto.ActionItemDTO.currentComm:type_name -> common_dto.CommodityDTO
	36, // 26: common_dto.ActionItemDTO.newComm:type_name -> common_dto.CommodityDTO
	3,  // 27: common_dto.ActionItemDTO.commodityAttribute:type_name -> common_dto.ActionItemDTO.CommodityAttribute
	29, // 28: common_dto.ActionItemDTO.providers:type_name -> common_dto.ActionItemDTO.ProviderInfo
	37, // 29: common_dto.ActionItemDTO.entityProfileDTO:type_name -> common_dto.EntityProfileDTO
	38, // 30: common_dto.ActionItemDTO.contextData:type_name -> common_dto.ContextData
	35, // 31: common_dto.ActionItemDTO.relatedRI:type_name -> common_dto.EntityDTO
	30, // 32: common_dto.ActionItemDTO.characteristics:type_name -> common_dto.ActionItemDTO.ExecutionCharacteristics
	31, // 33: common_dto.ActionItemDTO.risk:type_name -> common_dto.ActionItemDTO.Risk
	32, // 34: common_dto.Workflow.param:type_name -> common_dto.Workflow.Parameter
	33, // 35: common_dto.Workflow.property:type_name -> common_dto.Workflow.Property
	34, // 36: common_dto.Workflow.entityType:type_name -> common_dto.EntityDTO.EntityType
	2,  // 37: common_dto.Workflow.actionType:type_name -> common_dto.ActionItemDTO.ActionType
	6,  // 38: common_dto.Workflow.phase:type_name -> common_dto.Workflow.ActionScriptPhase
	16, // 39: common_dto.ActionEventDTO.action:type_name -> common_dto.ActionExecutionDTO
	0,  // 40: common_dto.ActionEventDTO.oldState:type_name -> common_dto.ActionResponseState
	0,  // 41: common_dto.ActionEventDTO.newState:type_name -> common_dto.ActionResponseState
	2,  // 42: common_dto.ActionPolicyDTO.ActionPolicyElement.actionType:type_name -> common_dto.ActionItemDTO.ActionType
	1,  // 43: common_dto.ActionPolicyDTO.ActionPolicyElement.actionCapability:type_name -> common_dto.ActionPolicyDTO.ActionCapability
	23, // 44: common_dto.ActionPolicyDTO.ActionPolicyElement.providerScope:type_name -> common_dto.ActionPolicyDTO.ActionPolicyElement.ProviderScope
	24, // 45: common_dto.ActionPolicyDTO.ActionPolicyElement.commodityScope:type_name -> common_dto.ActionPolicyDTO.ActionPolicyElement.CommodityScope
	34, // 46: common_dto.ActionPolicyDTO.ActionPolicyElement.ProviderScope.providerType:type_name -> common_dto.EntityDTO.EntityType
	39, // 47: common_dto.ActionPolicyDTO.ActionPolicyElement.CommodityScope.commodityType:type_name -> common_dto.CommodityDTO.CommodityType
	40, // 48: common_dto.ActionMergeTargetData.EntityRelationship.connectionType:type_name -> common_dto.ConnectedEntity.ConnectionType
	10, // 49: common_dto.ChainedActionMergeTargetData.TargetDataLink.merge_target:type_name -> common_dto.ActionMergeTargetData
	39, // 50: common_dto.ResizeMergeSpec.CommodityMergeData.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	3,  // 51: common_dto.ResizeMergeSpec.CommodityMergeData.changed_attr:type_name -> common_dto.ActionItemDTO.CommodityAttribute
	39, // 52: common_dto.ScaleMergeSpec.CommodityMergeData.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	3,  // 53: common_dto.ScaleMergeSpec.CommodityMergeData.changed_attr:type_name -> common_dto.ActionItemDTO.CommodityAttribute
	34, // 54: common_dto.ActionItemDTO.ProviderInfo.entityType:type_name -> common_dto.EntityDTO.EntityType
	5,  // 55: common_dto.ActionItemDTO.Risk.severity:type_name -> common_dto.ActionItemDTO.Risk.Severity
	4,  // 56: common_dto.ActionItemDTO.Risk.category:type_name -> common_dto.ActionItemDTO.Risk.Category
	39, // 57: common_dto.ActionItemDTO.Risk.affectedCommodity:type_name -> common_dto.CommodityDTO.CommodityType
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_ActionExecution_proto_init() }
func file_ActionExecution_proto_init() {
	if File_ActionExecution_proto != nil {
		return
	}
	file_CommonDTO_proto_init()
	file_ProfileDTO_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ActionExecution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMergePolicyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMergeExecutionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMergeTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainedActionMergeTargetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeMergeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleMergeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionMergeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveMergeSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionExecutionDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionItemDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionErrorDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionEventDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicyDTO_ActionPolicyElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicyDTO_ActionPolicyElement_ProviderScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPolicyDTO_ActionPolicyElement_CommodityScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMergeTargetData_EntityRelationship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainedActionMergeTargetData_TargetDataLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizeMergeSpec_CommodityMergeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleMergeSpec_CommodityMergeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionItemDTO_ProviderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionItemDTO_ExecutionCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionItemDTO_Risk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow_Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ActionExecution_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ActionExecution_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ActionMergePolicyDTO_ResizeSpec)(nil),
		(*ActionMergePolicyDTO_ScaleSpec)(nil),
		(*ActionMergePolicyDTO_MoveSpec)(nil),
		(*ActionMergePolicyDTO_ProvisionSpec)(nil),
	}
	file_ActionExecution_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ActionMergeExecutionTarget_MergeTarget)(nil),
		(*ActionMergeExecutionTarget_ChainedMergeTarget)(nil),
	}
	file_ActionExecution_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ActionPolicyDTO_ActionPolicyElement_ProviderScope_)(nil),
		(*ActionPolicyDTO_ActionPolicyElement_CommodityScope_)(nil),
	}
	file_ActionExecution_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ActionMergeTargetData_EntityRelationship_ConnectionType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ActionExecution_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ActionExecution_proto_goTypes,
		DependencyIndexes: file_ActionExecution_proto_depIdxs,
		EnumInfos:         file_ActionExecution_proto_enumTypes,
		MessageInfos:      file_ActionExecution_proto_msgTypes,
	}.Build()
	File_ActionExecution_proto = out.File
	file_ActionExecution_proto_rawDesc = nil
	file_ActionExecution_proto_goTypes = nil
	file_ActionExecution_proto_depIdxs = nil
}
