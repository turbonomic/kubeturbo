// Code generated by protoc-gen-go.
// source: ActionExecution.proto
// DO NOT EDIT!

/*
Package common_dto is a generated protocol buffer package.

It is generated from these files:
	ActionExecution.proto
	CloudCostDTO.proto
	CommonDTO.proto
	Discovery.proto
	IdentityMetadata.proto
	MediationMessage.proto
	NonMarketEntityDTO.proto
	PlanExport.proto
	PricingDTO.proto
	ProfileDTO.proto
	SupplyChain.proto

It has these top-level messages:
	ActionPolicyDTO
	ActionExecutionDTO
	ActionItemDTO
	Workflow
	ActionErrorDTO
	ActionEventDTO
	ExternalActionInfo
	ReservedInstanceType
	CurrencyAmount
	ReservedInstanceSpec
	EntityDTO
	PricingIdentifier
	CommodityDTO
	VStoragePartitionData
	GroupDTO
	ContextData
	NotificationDTO
	CustomTypeDef
	ServerEntityPropDef
	PropertyHandler
	EntityIdentityData
	FlowDTO
	GeoData
	ValidationResponse
	ActionTransformSpec
	ActionMergeSpec
	DiscoveredActionSpec
	DiscoveryResponse
	CustomAccountDefEntry
	AccountDefEntry
	ErrorDTO
	CustomMetadataDTO
	AccountValue
	DerivedTargetSpecificationDTO
	DiscoveryContextDTO
	NoChange
	EntityIdentityMetadata
	MediationClientMessage
	MediationServerMessage
	RequestTargetId
	ActionRequest
	ActionResult
	ActionProgress
	ActionResponse
	TargetUpdateResponse
	GetActionStateResponse
	ContainerInfo
	KeepAlive
	Ack
	InitializationContent
	ValidationRequest
	DiscoveryRequest
	TargetUpdateRequest
	ActionApprovalRequest
	ActionApprovalResponse
	ActionErrorsResponse
	ActionUpdateStateRequest
	GetActionStateRequest
	ActionAuditRequest
	PlanExportRequest
	PlanExportProgress
	PlanExportResult
	ProbeInfo
	ActionApprovalFeature
	ActionAuditFeature
	PlanExportFeature
	SetProperties
	NonMarketEntityDTO
	CostDataDTO
	PlanExportDTO
	PlanExportResponse
	ComputeTierPriceList
	DatabaseTierPriceList
	IpPriceList
	StorageTierPriceList
	ReservedInstancePrice
	Price
	LicensePriceEntry
	PriceTable
	EntityProfileDTO
	CommodityProfileDTO
	DeploymentProfileDTO
	TemplateDTO
	TemplateCommodity
	Provider
	ExternalEntityLink
	MergedEntityMetadata
*/
package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActionResponseState int32

const (
	ActionResponseState_PENDING_ACCEPT ActionResponseState = 0
	ActionResponseState_ACCEPTED       ActionResponseState = 1
	ActionResponseState_REJECTED       ActionResponseState = 2
	ActionResponseState_IN_PROGRESS    ActionResponseState = 3
	ActionResponseState_SUCCEEDED      ActionResponseState = 4
	ActionResponseState_FAILED         ActionResponseState = 5
	ActionResponseState_RECOMMENDED    ActionResponseState = 6
	ActionResponseState_DISABLED       ActionResponseState = 7
	ActionResponseState_QUEUED         ActionResponseState = 8
	ActionResponseState_CLEARED        ActionResponseState = 9
)

var ActionResponseState_name = map[int32]string{
	0: "PENDING_ACCEPT",
	1: "ACCEPTED",
	2: "REJECTED",
	3: "IN_PROGRESS",
	4: "SUCCEEDED",
	5: "FAILED",
	6: "RECOMMENDED",
	7: "DISABLED",
	8: "QUEUED",
	9: "CLEARED",
}
var ActionResponseState_value = map[string]int32{
	"PENDING_ACCEPT": 0,
	"ACCEPTED":       1,
	"REJECTED":       2,
	"IN_PROGRESS":    3,
	"SUCCEEDED":      4,
	"FAILED":         5,
	"RECOMMENDED":    6,
	"DISABLED":       7,
	"QUEUED":         8,
	"CLEARED":        9,
}

func (x ActionResponseState) Enum() *ActionResponseState {
	p := new(ActionResponseState)
	*p = x
	return p
}
func (x ActionResponseState) String() string {
	return proto.EnumName(ActionResponseState_name, int32(x))
}
func (x *ActionResponseState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionResponseState_value, data, "ActionResponseState")
	if err != nil {
		return err
	}
	*x = ActionResponseState(value)
	return nil
}
func (ActionResponseState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Defines how action can be executed by the probe
type ActionPolicyDTO_ActionCapability int32

const (
	// The action does not make sense for the probe. Actions of this type should not be shown
	// to the user.
	ActionPolicyDTO_NOT_SUPPORTED ActionPolicyDTO_ActionCapability = 1
	// The probe does not support executing the action, but it may still make sense to display
	// actions of this type to the user. For example, VSTORAGE resize is not supported in VCenter,
	// but many users still wish to see actions of this type.
	ActionPolicyDTO_NOT_EXECUTABLE ActionPolicyDTO_ActionCapability = 2
	// The probe supports execution of the action. Actions of this type are displayed to the user.
	ActionPolicyDTO_SUPPORTED ActionPolicyDTO_ActionCapability = 3
)

var ActionPolicyDTO_ActionCapability_name = map[int32]string{
	1: "NOT_SUPPORTED",
	2: "NOT_EXECUTABLE",
	3: "SUPPORTED",
}
var ActionPolicyDTO_ActionCapability_value = map[string]int32{
	"NOT_SUPPORTED":  1,
	"NOT_EXECUTABLE": 2,
	"SUPPORTED":      3,
}

func (x ActionPolicyDTO_ActionCapability) Enum() *ActionPolicyDTO_ActionCapability {
	p := new(ActionPolicyDTO_ActionCapability)
	*p = x
	return p
}
func (x ActionPolicyDTO_ActionCapability) String() string {
	return proto.EnumName(ActionPolicyDTO_ActionCapability_name, int32(x))
}
func (x *ActionPolicyDTO_ActionCapability) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionPolicyDTO_ActionCapability_value, data, "ActionPolicyDTO_ActionCapability")
	if err != nil {
		return err
	}
	*x = ActionPolicyDTO_ActionCapability(value)
	return nil
}
func (ActionPolicyDTO_ActionCapability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type ActionItemDTO_ActionType int32

const (
	ActionItemDTO_NONE                   ActionItemDTO_ActionType = 0
	ActionItemDTO_START                  ActionItemDTO_ActionType = 1
	ActionItemDTO_MOVE                   ActionItemDTO_ActionType = 2
	ActionItemDTO_SUSPEND                ActionItemDTO_ActionType = 3
	ActionItemDTO_TERMINATE              ActionItemDTO_ActionType = 4
	ActionItemDTO_SPAWN                  ActionItemDTO_ActionType = 5
	ActionItemDTO_ADD_PROVIDER           ActionItemDTO_ActionType = 6
	ActionItemDTO_CHANGE                 ActionItemDTO_ActionType = 7
	ActionItemDTO_REMOVE_PROVIDER        ActionItemDTO_ActionType = 8
	ActionItemDTO_PROVISION              ActionItemDTO_ActionType = 9
	ActionItemDTO_RECONFIGURE            ActionItemDTO_ActionType = 10
	ActionItemDTO_RESIZE                 ActionItemDTO_ActionType = 11
	ActionItemDTO_RESIZE_CAPACITY        ActionItemDTO_ActionType = 12
	ActionItemDTO_WARN                   ActionItemDTO_ActionType = 13
	ActionItemDTO_RECONFIGURE_THRESHOLD  ActionItemDTO_ActionType = 14
	ActionItemDTO_DELETE                 ActionItemDTO_ActionType = 15
	ActionItemDTO_RIGHT_SIZE             ActionItemDTO_ActionType = 16
	ActionItemDTO_RESERVE_ON_PM          ActionItemDTO_ActionType = 17
	ActionItemDTO_RESERVE_ON_DS          ActionItemDTO_ActionType = 18
	ActionItemDTO_RESIZE_FOR_EFFICIENCY  ActionItemDTO_ActionType = 19
	ActionItemDTO_RESIZE_FOR_PERFORMANCE ActionItemDTO_ActionType = 20
	ActionItemDTO_CROSS_TARGET_MOVE      ActionItemDTO_ActionType = 21
	ActionItemDTO_MOVE_TOGETHER          ActionItemDTO_ActionType = 22
	ActionItemDTO_RESERVE_ON_DA          ActionItemDTO_ActionType = 23
	// Scale a workload. Currently this action type is used to represent Cloud Move actions
	// for workloads when they are moved from one template to another. Market doesn't generate
	// Scale actions but Action Orchestrator translates Cloud Moves to Scale actions. Cloud
	// Probes expect Scale type for moving VMs between compute tiers.
	ActionItemDTO_SCALE ActionItemDTO_ActionType = 24
)

var ActionItemDTO_ActionType_name = map[int32]string{
	0:  "NONE",
	1:  "START",
	2:  "MOVE",
	3:  "SUSPEND",
	4:  "TERMINATE",
	5:  "SPAWN",
	6:  "ADD_PROVIDER",
	7:  "CHANGE",
	8:  "REMOVE_PROVIDER",
	9:  "PROVISION",
	10: "RECONFIGURE",
	11: "RESIZE",
	12: "RESIZE_CAPACITY",
	13: "WARN",
	14: "RECONFIGURE_THRESHOLD",
	15: "DELETE",
	16: "RIGHT_SIZE",
	17: "RESERVE_ON_PM",
	18: "RESERVE_ON_DS",
	19: "RESIZE_FOR_EFFICIENCY",
	20: "RESIZE_FOR_PERFORMANCE",
	21: "CROSS_TARGET_MOVE",
	22: "MOVE_TOGETHER",
	23: "RESERVE_ON_DA",
	24: "SCALE",
}
var ActionItemDTO_ActionType_value = map[string]int32{
	"NONE":                   0,
	"START":                  1,
	"MOVE":                   2,
	"SUSPEND":                3,
	"TERMINATE":              4,
	"SPAWN":                  5,
	"ADD_PROVIDER":           6,
	"CHANGE":                 7,
	"REMOVE_PROVIDER":        8,
	"PROVISION":              9,
	"RECONFIGURE":            10,
	"RESIZE":                 11,
	"RESIZE_CAPACITY":        12,
	"WARN":                   13,
	"RECONFIGURE_THRESHOLD":  14,
	"DELETE":                 15,
	"RIGHT_SIZE":             16,
	"RESERVE_ON_PM":          17,
	"RESERVE_ON_DS":          18,
	"RESIZE_FOR_EFFICIENCY":  19,
	"RESIZE_FOR_PERFORMANCE": 20,
	"CROSS_TARGET_MOVE":      21,
	"MOVE_TOGETHER":          22,
	"RESERVE_ON_DA":          23,
	"SCALE":                  24,
}

func (x ActionItemDTO_ActionType) Enum() *ActionItemDTO_ActionType {
	p := new(ActionItemDTO_ActionType)
	*p = x
	return p
}
func (x ActionItemDTO_ActionType) String() string {
	return proto.EnumName(ActionItemDTO_ActionType_name, int32(x))
}
func (x *ActionItemDTO_ActionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionItemDTO_ActionType_value, data, "ActionItemDTO_ActionType")
	if err != nil {
		return err
	}
	*x = ActionItemDTO_ActionType(value)
	return nil
}
func (ActionItemDTO_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ActionItemDTO_CommodityAttribute int32

const (
	ActionItemDTO_Capacity    ActionItemDTO_CommodityAttribute = 0
	ActionItemDTO_Limit       ActionItemDTO_CommodityAttribute = 1
	ActionItemDTO_Reservation ActionItemDTO_CommodityAttribute = 2
)

var ActionItemDTO_CommodityAttribute_name = map[int32]string{
	0: "Capacity",
	1: "Limit",
	2: "Reservation",
}
var ActionItemDTO_CommodityAttribute_value = map[string]int32{
	"Capacity":    0,
	"Limit":       1,
	"Reservation": 2,
}

func (x ActionItemDTO_CommodityAttribute) Enum() *ActionItemDTO_CommodityAttribute {
	p := new(ActionItemDTO_CommodityAttribute)
	*p = x
	return p
}
func (x ActionItemDTO_CommodityAttribute) String() string {
	return proto.EnumName(ActionItemDTO_CommodityAttribute_name, int32(x))
}
func (x *ActionItemDTO_CommodityAttribute) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionItemDTO_CommodityAttribute_value, data, "ActionItemDTO_CommodityAttribute")
	if err != nil {
		return err
	}
	*x = ActionItemDTO_CommodityAttribute(value)
	return nil
}
func (ActionItemDTO_CommodityAttribute) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1}
}

type Workflow_ActionScriptPhase int32

const (
	// PRE actions are performed prior to the primary action
	Workflow_PRE Workflow_ActionScriptPhase = 1
	// REPLACE actions are performed in place of the built-in action
	Workflow_REPLACE Workflow_ActionScriptPhase = 2
	// POST actions are performed after the primary action
	Workflow_POST Workflow_ActionScriptPhase = 3
)

var Workflow_ActionScriptPhase_name = map[int32]string{
	1: "PRE",
	2: "REPLACE",
	3: "POST",
}
var Workflow_ActionScriptPhase_value = map[string]int32{
	"PRE":     1,
	"REPLACE": 2,
	"POST":    3,
}

func (x Workflow_ActionScriptPhase) Enum() *Workflow_ActionScriptPhase {
	p := new(Workflow_ActionScriptPhase)
	*p = x
	return p
}
func (x Workflow_ActionScriptPhase) String() string {
	return proto.EnumName(Workflow_ActionScriptPhase_name, int32(x))
}
func (x *Workflow_ActionScriptPhase) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Workflow_ActionScriptPhase_value, data, "Workflow_ActionScriptPhase")
	if err != nil {
		return err
	}
	*x = Workflow_ActionScriptPhase(value)
	return nil
}
func (Workflow_ActionScriptPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

// ActionPolicyDTO defines action execution policy for an EntityType.
// Every EntityType can be associated with a list of actions and execution modes.
// E.g., 'Resize' action can be defined as 'Recommend' for Virtual Machines.
type ActionPolicyDTO struct {
	// Entity type which the policy is applied to
	EntityType *EntityDTO_EntityType `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// Action policy elements (for every supported action type)
	PolicyElement    []*ActionPolicyDTO_ActionPolicyElement `protobuf:"bytes,2,rep,name=policyElement" json:"policyElement,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *ActionPolicyDTO) Reset()                    { *m = ActionPolicyDTO{} }
func (m *ActionPolicyDTO) String() string            { return proto.CompactTextString(m) }
func (*ActionPolicyDTO) ProtoMessage()               {}
func (*ActionPolicyDTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActionPolicyDTO) GetEntityType() EntityDTO_EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityDTO_SWITCH
}

func (m *ActionPolicyDTO) GetPolicyElement() []*ActionPolicyDTO_ActionPolicyElement {
	if m != nil {
		return m.PolicyElement
	}
	return nil
}

// Policy applied to a particular action type
//
// If no value is sent for an EntityType/ActionCapability pair, the capability
// for that ActionCapability on that EntityType will be treated as NOT_EXECUTABLE.
//
// For example, if a probe sends a SUPPORTED value for VIRTUAL_MACHINE MOVE but no value
// for VIRTUAL_MACHINE SUSPEND, then VIRTUAL_MACHINE SUSPEND will be treated as NOT_EXECUTABLE.
type ActionPolicyDTO_ActionPolicyElement struct {
	// Action type
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// Action execution capability
	ActionCapability *ActionPolicyDTO_ActionCapability `protobuf:"varint,2,req,name=actionCapability,enum=common_dto.ActionPolicyDTO_ActionCapability" json:"actionCapability,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *ActionPolicyDTO_ActionPolicyElement) Reset()         { *m = ActionPolicyDTO_ActionPolicyElement{} }
func (m *ActionPolicyDTO_ActionPolicyElement) String() string { return proto.CompactTextString(m) }
func (*ActionPolicyDTO_ActionPolicyElement) ProtoMessage()    {}
func (*ActionPolicyDTO_ActionPolicyElement) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *ActionPolicyDTO_ActionPolicyElement) GetActionType() ActionItemDTO_ActionType {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ActionItemDTO_NONE
}

func (m *ActionPolicyDTO_ActionPolicyElement) GetActionCapability() ActionPolicyDTO_ActionCapability {
	if m != nil && m.ActionCapability != nil {
		return *m.ActionCapability
	}
	return ActionPolicyDTO_NOT_SUPPORTED
}

// ActionExecutionDTO may contain one or more action items related to the overall action to be
// executed.
type ActionExecutionDTO struct {
	// Overall action type.  In most cases this action type will be the same as the action type
	// specified in the action items contained within this.
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// One or more action items related to the overall action to be executed
	ActionItem []*ActionItemDTO `protobuf:"bytes,2,rep,name=actionItem" json:"actionItem,omitempty"`
	// Action Execution Progress
	Progress *int64 `protobuf:"varint,3,opt,name=progress" json:"progress,omitempty"`
	// There may be an action orchestration workflow
	// associated with the execution of an action
	Workflow *Workflow `protobuf:"bytes,4,opt,name=workflow" json:"workflow,omitempty"`
	// Action OID generated by the platform side. It identifies an action uniquely
	// TODO make the field required as soon as we implement OIDs for actions
	ActionOid *uint64 `protobuf:"varint,5,opt,name=actionOid" json:"actionOid,omitempty"`
	// Action severity
	Severity *string `protobuf:"bytes,6,opt,name=severity" json:"severity,omitempty"`
	// Action subCategory (received from relatedProblems in ActionItem)
	SubCategory *string `protobuf:"bytes,7,opt,name=subCategory" json:"subCategory,omitempty"`
	// Action description
	Explanation      *string `protobuf:"bytes,8,opt,name=explanation" json:"explanation,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActionExecutionDTO) Reset()                    { *m = ActionExecutionDTO{} }
func (m *ActionExecutionDTO) String() string            { return proto.CompactTextString(m) }
func (*ActionExecutionDTO) ProtoMessage()               {}
func (*ActionExecutionDTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ActionExecutionDTO) GetActionType() ActionItemDTO_ActionType {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ActionItemDTO_NONE
}

func (m *ActionExecutionDTO) GetActionItem() []*ActionItemDTO {
	if m != nil {
		return m.ActionItem
	}
	return nil
}

func (m *ActionExecutionDTO) GetProgress() int64 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *ActionExecutionDTO) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *ActionExecutionDTO) GetActionOid() uint64 {
	if m != nil && m.ActionOid != nil {
		return *m.ActionOid
	}
	return 0
}

func (m *ActionExecutionDTO) GetSeverity() string {
	if m != nil && m.Severity != nil {
		return *m.Severity
	}
	return ""
}

func (m *ActionExecutionDTO) GetSubCategory() string {
	if m != nil && m.SubCategory != nil {
		return *m.SubCategory
	}
	return ""
}

func (m *ActionExecutionDTO) GetExplanation() string {
	if m != nil && m.Explanation != nil {
		return *m.Explanation
	}
	return ""
}

// This message holds values necessary for executing actions on Service Entity discovered with SDK probe
type ActionItemDTO struct {
	// ActionType of the action
	ActionType *ActionItemDTO_ActionType `protobuf:"varint,1,req,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	// ActionItem's uuid
	Uuid *string `protobuf:"bytes,2,req,name=uuid" json:"uuid,omitempty"`
	// EntityDTO for the Target ServiceEntity on which the action should be applied
	TargetSE *EntityDTO `protobuf:"bytes,3,req,name=targetSE" json:"targetSE,omitempty"`
	// EntityDTO for the service entity which hosts the targetSE
	HostedBySE *EntityDTO `protobuf:"bytes,4,opt,name=hostedBySE" json:"hostedBySE,omitempty"`
	// EntityDTO for the ServiceEntity by which the Target ServiceEntity is hosted now (for Move action only)
	CurrentSE *EntityDTO `protobuf:"bytes,5,opt,name=currentSE" json:"currentSE,omitempty"`
	// EntityDTO for the ServiceEntity by which the Target ServiceEntity will be hosted
	// after applied the action (for Move action only)
	NewSE *EntityDTO `protobuf:"bytes,6,opt,name=newSE" json:"newSE,omitempty"`
	// CommodityDTO for the commodity on which the action
	// should be applied (current values)
	CurrentComm *CommodityDTO `protobuf:"bytes,7,opt,name=currentComm" json:"currentComm,omitempty"`
	// CommodityDTO for the commodity on which the action
	// should be applied (after the action is applied)
	NewComm *CommodityDTO `protobuf:"bytes,8,opt,name=newComm" json:"newComm,omitempty"`
	// CommodityAttribute enum notifying type of changed attribute
	CommodityAttribute *ActionItemDTO_CommodityAttribute `protobuf:"varint,10,opt,name=commodityAttribute,enum=common_dto.ActionItemDTO_CommodityAttribute" json:"commodityAttribute,omitempty"`
	// Information for providers of the targetSE.
	Providers []*ActionItemDTO_ProviderInfo `protobuf:"bytes,11,rep,name=providers" json:"providers,omitempty"`
	// Profile related information used in executing a deploy action
	EntityProfileDTO *EntityProfileDTO `protobuf:"bytes,12,opt,name=entityProfileDTO" json:"entityProfileDTO,omitempty"`
	// Context data used in executing actions
	ContextData []*ContextData `protobuf:"bytes,13,rep,name=contextData" json:"contextData,omitempty"`
	// The Reserved Instance, if any, associated with the action, eg
	// if a move or resize is taking advantage of an RI.
	RelatedRI *EntityDTO `protobuf:"bytes,14,opt,name=relatedRI" json:"relatedRI,omitempty"`
	// Whether the action item is related to consistent scaling
	ConsistentScalingCompliance *bool `protobuf:"varint,15,opt,name=consistentScalingCompliance" json:"consistentScalingCompliance,omitempty"`
	// Action savings
	Savings *float32 `protobuf:"fixed32,17,opt,name=savings" json:"savings,omitempty"`
	// Action saving unit
	SavingUnit       *string `protobuf:"bytes,18,opt,name=savingUnit" json:"savingUnit,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActionItemDTO) Reset()                    { *m = ActionItemDTO{} }
func (m *ActionItemDTO) String() string            { return proto.CompactTextString(m) }
func (*ActionItemDTO) ProtoMessage()               {}
func (*ActionItemDTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ActionItemDTO) GetActionType() ActionItemDTO_ActionType {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ActionItemDTO_NONE
}

func (m *ActionItemDTO) GetUuid() string {
	if m != nil && m.Uuid != nil {
		return *m.Uuid
	}
	return ""
}

func (m *ActionItemDTO) GetTargetSE() *EntityDTO {
	if m != nil {
		return m.TargetSE
	}
	return nil
}

func (m *ActionItemDTO) GetHostedBySE() *EntityDTO {
	if m != nil {
		return m.HostedBySE
	}
	return nil
}

func (m *ActionItemDTO) GetCurrentSE() *EntityDTO {
	if m != nil {
		return m.CurrentSE
	}
	return nil
}

func (m *ActionItemDTO) GetNewSE() *EntityDTO {
	if m != nil {
		return m.NewSE
	}
	return nil
}

func (m *ActionItemDTO) GetCurrentComm() *CommodityDTO {
	if m != nil {
		return m.CurrentComm
	}
	return nil
}

func (m *ActionItemDTO) GetNewComm() *CommodityDTO {
	if m != nil {
		return m.NewComm
	}
	return nil
}

func (m *ActionItemDTO) GetCommodityAttribute() ActionItemDTO_CommodityAttribute {
	if m != nil && m.CommodityAttribute != nil {
		return *m.CommodityAttribute
	}
	return ActionItemDTO_Capacity
}

func (m *ActionItemDTO) GetProviders() []*ActionItemDTO_ProviderInfo {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *ActionItemDTO) GetEntityProfileDTO() *EntityProfileDTO {
	if m != nil {
		return m.EntityProfileDTO
	}
	return nil
}

func (m *ActionItemDTO) GetContextData() []*ContextData {
	if m != nil {
		return m.ContextData
	}
	return nil
}

func (m *ActionItemDTO) GetRelatedRI() *EntityDTO {
	if m != nil {
		return m.RelatedRI
	}
	return nil
}

func (m *ActionItemDTO) GetConsistentScalingCompliance() bool {
	if m != nil && m.ConsistentScalingCompliance != nil {
		return *m.ConsistentScalingCompliance
	}
	return false
}

func (m *ActionItemDTO) GetSavings() float32 {
	if m != nil && m.Savings != nil {
		return *m.Savings
	}
	return 0
}

func (m *ActionItemDTO) GetSavingUnit() string {
	if m != nil && m.SavingUnit != nil {
		return *m.SavingUnit
	}
	return ""
}

// This message holds provider information for the target SE of this ActionItem.
type ActionItemDTO_ProviderInfo struct {
	EntityType       *EntityDTO_EntityType `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	Ids              []string              `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ActionItemDTO_ProviderInfo) Reset()                    { *m = ActionItemDTO_ProviderInfo{} }
func (m *ActionItemDTO_ProviderInfo) String() string            { return proto.CompactTextString(m) }
func (*ActionItemDTO_ProviderInfo) ProtoMessage()               {}
func (*ActionItemDTO_ProviderInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *ActionItemDTO_ProviderInfo) GetEntityType() EntityDTO_EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityDTO_SWITCH
}

func (m *ActionItemDTO_ProviderInfo) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Workflow struct {
	Id          *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	DisplayName *string `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// parameters describe values that will be conveyed to the workflow at execution time
	Param []*Workflow_Parameter `protobuf:"bytes,4,rep,name=param" json:"param,omitempty"`
	// property field used for AWS catalogs modeled as workflows. It is
	// not used in other cases
	Property   []*Workflow_Property  `protobuf:"bytes,5,rep,name=property" json:"property,omitempty"`
	EntityType *EntityDTO_EntityType `protobuf:"varint,6,opt,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// Remaining fields are unused in classic OpsManager.
	// scriptPath is used for action scripts in XL, and in that context
	// it is required.
	ScriptPath *string                     `protobuf:"bytes,7,opt,name=scriptPath" json:"scriptPath,omitempty"`
	ActionType *ActionItemDTO_ActionType   `protobuf:"varint,8,opt,name=actionType,enum=common_dto.ActionItemDTO_ActionType" json:"actionType,omitempty"`
	Phase      *Workflow_ActionScriptPhase `protobuf:"varint,9,opt,name=phase,enum=common_dto.Workflow_ActionScriptPhase" json:"phase,omitempty"`
	// max seconds to allow action script to execute before attemting to terminate
	// it by sending a TERM signal (a default is used if missing)
	TimeLimitSeconds *int64 `protobuf:"varint,10,opt,name=timeLimitSeconds" json:"timeLimitSeconds,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Workflow) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Workflow) GetDisplayName() string {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return ""
}

func (m *Workflow) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Workflow) GetParam() []*Workflow_Parameter {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *Workflow) GetProperty() []*Workflow_Property {
	if m != nil {
		return m.Property
	}
	return nil
}

func (m *Workflow) GetEntityType() EntityDTO_EntityType {
	if m != nil && m.EntityType != nil {
		return *m.EntityType
	}
	return EntityDTO_SWITCH
}

func (m *Workflow) GetScriptPath() string {
	if m != nil && m.ScriptPath != nil {
		return *m.ScriptPath
	}
	return ""
}

func (m *Workflow) GetActionType() ActionItemDTO_ActionType {
	if m != nil && m.ActionType != nil {
		return *m.ActionType
	}
	return ActionItemDTO_NONE
}

func (m *Workflow) GetPhase() Workflow_ActionScriptPhase {
	if m != nil && m.Phase != nil {
		return *m.Phase
	}
	return Workflow_PRE
}

func (m *Workflow) GetTimeLimitSeconds() int64 {
	if m != nil && m.TimeLimitSeconds != nil {
		return *m.TimeLimitSeconds
	}
	return 0
}

type Workflow_Parameter struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Description      *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Type             *string `protobuf:"bytes,3,req,name=type,def=String" json:"type,omitempty"`
	Mandatory        *bool   `protobuf:"varint,4,opt,name=mandatory,def=1" json:"mandatory,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Workflow_Parameter) Reset()                    { *m = Workflow_Parameter{} }
func (m *Workflow_Parameter) String() string            { return proto.CompactTextString(m) }
func (*Workflow_Parameter) ProtoMessage()               {}
func (*Workflow_Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

const Default_Workflow_Parameter_Type string = "String"
const Default_Workflow_Parameter_Mandatory bool = true

func (m *Workflow_Parameter) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Workflow_Parameter) GetDescription() string {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return ""
}

func (m *Workflow_Parameter) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_Workflow_Parameter_Type
}

func (m *Workflow_Parameter) GetMandatory() bool {
	if m != nil && m.Mandatory != nil {
		return *m.Mandatory
	}
	return Default_Workflow_Parameter_Mandatory
}

type Workflow_Property struct {
	Name             *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value            *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Workflow_Property) Reset()                    { *m = Workflow_Property{} }
func (m *Workflow_Property) String() string            { return proto.CompactTextString(m) }
func (*Workflow_Property) ProtoMessage()               {}
func (*Workflow_Property) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 1} }

func (m *Workflow_Property) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Workflow_Property) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// Errpr describing some problems in reporting action to action approval backend.
type ActionErrorDTO struct {
	// OID of the action error is reported for.
	ActionOid *int64 `protobuf:"varint,1,req,name=actionOid" json:"actionOid,omitempty"`
	// Error message (description)
	Message          *string `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActionErrorDTO) Reset()                    { *m = ActionErrorDTO{} }
func (m *ActionErrorDTO) String() string            { return proto.CompactTextString(m) }
func (*ActionErrorDTO) ProtoMessage()               {}
func (*ActionErrorDTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ActionErrorDTO) GetActionOid() int64 {
	if m != nil && m.ActionOid != nil {
		return *m.ActionOid
	}
	return 0
}

func (m *ActionErrorDTO) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

// Description of action event to audit. It holds action representation to external world (3rd-party
// software), action state transition and event timestamp.
type ActionEventDTO struct {
	// Action representation for 3rd-party software.
	Action *ActionExecutionDTO `protobuf:"bytes,1,req,name=action" json:"action,omitempty"`
	// Previous action state - before the event.
	OldState *ActionResponseState `protobuf:"varint,2,req,name=oldState,enum=common_dto.ActionResponseState" json:"oldState,omitempty"`
	// New action state - after the event.
	NewState *ActionResponseState `protobuf:"varint,3,req,name=newState,enum=common_dto.ActionResponseState" json:"newState,omitempty"`
	// Timestamp of action event.
	Timestamp *int64 `protobuf:"varint,4,req,name=timestamp" json:"timestamp,omitempty"`
	// Information about who accepted the action.
	// Maybe accepted :
	// 1. manually in Turbonomic
	// 2. automated in Turbonomic
	// 3. in third-party platform (ServiceNow)
	AcceptedBy       *string `protobuf:"bytes,5,opt,name=acceptedBy" json:"acceptedBy,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ActionEventDTO) Reset()                    { *m = ActionEventDTO{} }
func (m *ActionEventDTO) String() string            { return proto.CompactTextString(m) }
func (*ActionEventDTO) ProtoMessage()               {}
func (*ActionEventDTO) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ActionEventDTO) GetAction() *ActionExecutionDTO {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionEventDTO) GetOldState() ActionResponseState {
	if m != nil && m.OldState != nil {
		return *m.OldState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (m *ActionEventDTO) GetNewState() ActionResponseState {
	if m != nil && m.NewState != nil {
		return *m.NewState
	}
	return ActionResponseState_PENDING_ACCEPT
}

func (m *ActionEventDTO) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *ActionEventDTO) GetAcceptedBy() string {
	if m != nil && m.AcceptedBy != nil {
		return *m.AcceptedBy
	}
	return ""
}

// This class holds response information about executing action via a third party integration.
type ExternalActionInfo struct {
	// URL to actual change request in thirdParty
	Url *string `protobuf:"bytes,2,req,name=url" json:"url,omitempty"`
	// short name or ID of change request in thirdParty
	ShortName        *string `protobuf:"bytes,3,req,name=shortName" json:"shortName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExternalActionInfo) Reset()                    { *m = ExternalActionInfo{} }
func (m *ExternalActionInfo) String() string            { return proto.CompactTextString(m) }
func (*ExternalActionInfo) ProtoMessage()               {}
func (*ExternalActionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExternalActionInfo) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *ExternalActionInfo) GetShortName() string {
	if m != nil && m.ShortName != nil {
		return *m.ShortName
	}
	return ""
}

func init() {
	proto.RegisterType((*ActionPolicyDTO)(nil), "common_dto.ActionPolicyDTO")
	proto.RegisterType((*ActionPolicyDTO_ActionPolicyElement)(nil), "common_dto.ActionPolicyDTO.ActionPolicyElement")
	proto.RegisterType((*ActionExecutionDTO)(nil), "common_dto.ActionExecutionDTO")
	proto.RegisterType((*ActionItemDTO)(nil), "common_dto.ActionItemDTO")
	proto.RegisterType((*ActionItemDTO_ProviderInfo)(nil), "common_dto.ActionItemDTO.ProviderInfo")
	proto.RegisterType((*Workflow)(nil), "common_dto.Workflow")
	proto.RegisterType((*Workflow_Parameter)(nil), "common_dto.Workflow.Parameter")
	proto.RegisterType((*Workflow_Property)(nil), "common_dto.Workflow.Property")
	proto.RegisterType((*ActionErrorDTO)(nil), "common_dto.ActionErrorDTO")
	proto.RegisterType((*ActionEventDTO)(nil), "common_dto.ActionEventDTO")
	proto.RegisterType((*ExternalActionInfo)(nil), "common_dto.ExternalActionInfo")
	proto.RegisterEnum("common_dto.ActionResponseState", ActionResponseState_name, ActionResponseState_value)
	proto.RegisterEnum("common_dto.ActionPolicyDTO_ActionCapability", ActionPolicyDTO_ActionCapability_name, ActionPolicyDTO_ActionCapability_value)
	proto.RegisterEnum("common_dto.ActionItemDTO_ActionType", ActionItemDTO_ActionType_name, ActionItemDTO_ActionType_value)
	proto.RegisterEnum("common_dto.ActionItemDTO_CommodityAttribute", ActionItemDTO_CommodityAttribute_name, ActionItemDTO_CommodityAttribute_value)
	proto.RegisterEnum("common_dto.Workflow_ActionScriptPhase", Workflow_ActionScriptPhase_name, Workflow_ActionScriptPhase_value)
}

func init() { proto.RegisterFile("ActionExecution.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x6d, 0x6f, 0xe3, 0xc6,
	0x11, 0x8e, 0xde, 0x2c, 0x72, 0xe4, 0x97, 0xf5, 0xde, 0x39, 0x61, 0xd4, 0x34, 0x11, 0x84, 0x22,
	0x10, 0xd2, 0xc2, 0x6d, 0x9d, 0xb4, 0xc0, 0x5d, 0x8b, 0x22, 0x3c, 0x72, 0x6d, 0xb1, 0x90, 0x49,
	0x76, 0x49, 0xdd, 0x25, 0x45, 0x01, 0x81, 0xa6, 0xf6, 0x7c, 0x44, 0x25, 0x92, 0x20, 0x57, 0xb6,
	0xf5, 0xad, 0xfd, 0x39, 0x05, 0xfa, 0xb5, 0xff, 0xa3, 0xe8, 0x3f, 0xe8, 0x3f, 0x29, 0x76, 0x49,
	0x49, 0xb4, 0x24, 0x5f, 0x1a, 0xe0, 0xbe, 0xed, 0xce, 0x3e, 0xcf, 0x33, 0xcb, 0x99, 0xdd, 0x99,
	0x25, 0x9c, 0xe9, 0x21, 0x8f, 0x92, 0x98, 0x3c, 0xb0, 0x70, 0x21, 0x06, 0xe7, 0x69, 0x96, 0xf0,
	0x04, 0x43, 0x98, 0xcc, 0xe7, 0x49, 0x3c, 0x99, 0xf2, 0xa4, 0x7b, 0x62, 0xc8, 0xb1, 0xe9, 0x3b,
	0xc5, 0x62, 0x17, 0xb9, 0x59, 0xf2, 0x36, 0x9a, 0xb1, 0xb5, 0xa5, 0xff, 0xcf, 0x06, 0x9c, 0x14,
	0x42, 0x6e, 0x32, 0x8b, 0xc2, 0xa5, 0xe9, 0x3b, 0xf8, 0x5b, 0x00, 0x16, 0xf3, 0x88, 0x2f, 0xfd,
	0x65, 0xca, 0xb4, 0x5a, 0xaf, 0x3e, 0x38, 0xbe, 0xe8, 0x9d, 0x6f, 0x74, 0xcf, 0x89, 0x5c, 0x15,
	0x22, 0x64, 0x8d, 0xa3, 0x15, 0x0e, 0x1e, 0xc3, 0x51, 0x2a, 0xe5, 0xc8, 0x8c, 0xcd, 0x59, 0xcc,
	0xb5, 0x7a, 0xaf, 0x31, 0xe8, 0x5c, 0xfc, 0xb2, 0x2a, 0xb2, 0xe5, 0xf5, 0xd1, 0xbc, 0xa4, 0xd1,
	0xc7, 0x2a, 0xdd, 0x7f, 0xd5, 0xe0, 0xd9, 0x1e, 0x18, 0x36, 0x01, 0x02, 0x69, 0xae, 0x6c, 0xf8,
	0x67, 0xbb, 0xbe, 0x2c, 0xce, 0xe6, 0x1b, 0x4f, 0xc5, 0xa6, 0x37, 0x3c, 0xfc, 0x1d, 0xa0, 0x62,
	0x66, 0x04, 0x69, 0x70, 0x13, 0xcd, 0x22, 0xbe, 0xd4, 0xea, 0x52, 0xeb, 0x17, 0x3f, 0xbc, 0xef,
	0x0d, 0x87, 0xee, 0xa8, 0xf4, 0x87, 0x80, 0xb6, 0x51, 0xf8, 0x14, 0x8e, 0x6c, 0xc7, 0x9f, 0x78,
	0x63, 0xd7, 0x75, 0xa8, 0x4f, 0x4c, 0x54, 0xc3, 0x18, 0x8e, 0x85, 0x89, 0x7c, 0x47, 0x8c, 0xb1,
	0xaf, 0xbf, 0x1a, 0x11, 0x54, 0xc7, 0x47, 0xa0, 0x6e, 0x20, 0x8d, 0xfe, 0x7f, 0xeb, 0x80, 0xb7,
	0xf2, 0x2e, 0x32, 0xf6, 0x61, 0x02, 0xf0, 0x62, 0xa5, 0x22, 0x70, 0x65, 0xca, 0x3e, 0x7d, 0x52,
	0x85, 0x56, 0xc0, 0xb8, 0x0b, 0x4a, 0x9a, 0x25, 0xb7, 0x19, 0xcb, 0x73, 0xad, 0xd1, 0xab, 0x0d,
	0x1a, 0x74, 0x3d, 0xc7, 0xbf, 0x02, 0xe5, 0x3e, 0xc9, 0xfe, 0xfa, 0x76, 0x96, 0xdc, 0x6b, 0xcd,
	0x5e, 0x6d, 0xd0, 0xb9, 0x78, 0x5e, 0x15, 0x7d, 0x53, 0xae, 0xd1, 0x35, 0x0a, 0x7f, 0x06, 0x6a,
	0xa1, 0xed, 0x44, 0x53, 0xad, 0xd5, 0xab, 0x0d, 0x9a, 0x74, 0x63, 0x10, 0xbe, 0x72, 0x76, 0xc7,
	0x32, 0x91, 0x9f, 0x83, 0x5e, 0x6d, 0xa0, 0xd2, 0xf5, 0x1c, 0xf7, 0xa0, 0x93, 0x2f, 0x6e, 0x8c,
	0x80, 0xb3, 0xdb, 0x24, 0x5b, 0x6a, 0x6d, 0xb9, 0x5c, 0x35, 0x09, 0x04, 0x7b, 0x48, 0x67, 0x41,
	0x1c, 0x08, 0x3d, 0x4d, 0x29, 0x10, 0x15, 0x53, 0xff, 0x3f, 0x1d, 0x38, 0x7a, 0xf4, 0xa5, 0x1f,
	0x28, 0xbc, 0x18, 0x9a, 0x8b, 0x45, 0x34, 0x95, 0x67, 0x4a, 0xa5, 0x72, 0x8c, 0x7f, 0x0d, 0x0a,
	0x0f, 0xb2, 0x5b, 0xc6, 0x3d, 0xa2, 0x35, 0x7a, 0xf5, 0x41, 0xe7, 0xe2, 0x6c, 0xef, 0x45, 0xa3,
	0x6b, 0x18, 0xfe, 0x0d, 0xc0, 0xbb, 0x24, 0xe7, 0x6c, 0xfa, 0x6a, 0xe9, 0x91, 0x32, 0xa0, 0x4f,
	0x90, 0x2a, 0x40, 0xfc, 0x35, 0xa8, 0xe1, 0x22, 0xcb, 0x58, 0x2c, 0x5c, 0xb5, 0xde, 0xc7, 0xda,
	0xe0, 0xf0, 0xcf, 0xa1, 0x15, 0xb3, 0x7b, 0x8f, 0xc8, 0x38, 0x3f, 0x49, 0x28, 0x30, 0xf8, 0x25,
	0x74, 0x4a, 0xa6, 0x28, 0x3b, 0x32, 0xf6, 0x9d, 0x0b, 0xad, 0x4a, 0x91, 0xe5, 0x68, 0x5a, 0xb2,
	0xaa, 0x60, 0x7c, 0x01, 0xed, 0x98, 0xdd, 0x4b, 0x9e, 0xf2, 0x03, 0xbc, 0x15, 0x10, 0xff, 0x05,
	0x70, 0xb8, 0x5a, 0xd0, 0x39, 0xcf, 0xa2, 0x9b, 0x05, 0x67, 0x1a, 0xf4, 0x6a, 0xfb, 0x6f, 0xec,
	0x2a, 0x3b, 0xc6, 0x0e, 0x87, 0xee, 0xd1, 0xc1, 0x26, 0xa8, 0x69, 0x96, 0xdc, 0x45, 0x53, 0x96,
	0xe5, 0x5a, 0x47, 0xde, 0x85, 0x2f, 0x9f, 0x16, 0x75, 0x4b, 0xa8, 0x15, 0xbf, 0x4d, 0xe8, 0x86,
	0x88, 0x87, 0x80, 0x8a, 0xb2, 0xb8, 0x29, 0xbc, 0xda, 0xa1, 0xfc, 0xc0, 0xcf, 0x76, 0x63, 0xb9,
	0xc1, 0xd0, 0x1d, 0x16, 0x7e, 0x01, 0x9d, 0x30, 0x89, 0x39, 0x7b, 0xe0, 0x66, 0xc0, 0x03, 0xed,
	0x48, 0xee, 0xe8, 0x93, 0xc7, 0x51, 0x5a, 0x2f, 0xd3, 0x2a, 0x56, 0xa4, 0x3e, 0x63, 0xb3, 0x80,
	0xb3, 0x29, 0xb5, 0xb4, 0xe3, 0xf7, 0xa6, 0x7e, 0x8d, 0xc3, 0xdf, 0xc2, 0x4f, 0xc2, 0x24, 0xce,
	0xa3, 0x9c, 0x8b, 0xa3, 0x10, 0x06, 0xb3, 0x28, 0xbe, 0x35, 0x92, 0x79, 0x3a, 0x8b, 0x82, 0x38,
	0x64, 0xda, 0x49, 0xaf, 0x36, 0x50, 0xe8, 0xfb, 0x20, 0x58, 0x83, 0x76, 0x1e, 0xdc, 0x45, 0xf1,
	0x6d, 0xae, 0x9d, 0xf6, 0x6a, 0x83, 0x3a, 0x5d, 0x4d, 0xf1, 0xe7, 0x00, 0xc5, 0x70, 0x1c, 0x47,
	0x5c, 0xc3, 0xf2, 0x0a, 0x56, 0x2c, 0xdd, 0x1b, 0x38, 0xac, 0x06, 0xf4, 0x03, 0x34, 0x24, 0x04,
	0x8d, 0x68, 0x9a, 0xcb, 0x9a, 0xa6, 0x52, 0x31, 0x14, 0x8d, 0x0f, 0x36, 0x17, 0x15, 0x2b, 0xd0,
	0xb4, 0x1d, 0x9b, 0xa0, 0x8f, 0xb0, 0x0a, 0x2d, 0xcf, 0xd7, 0xa9, 0x8f, 0x6a, 0xc2, 0x78, 0xed,
	0xbc, 0x16, 0x65, 0xb8, 0x03, 0x6d, 0x6f, 0xec, 0xb9, 0xc4, 0x36, 0x51, 0x43, 0xd4, 0x64, 0x9f,
	0xd0, 0x6b, 0xcb, 0xd6, 0x7d, 0x82, 0x9a, 0x92, 0xe0, 0xea, 0x6f, 0x6c, 0xd4, 0xc2, 0x08, 0x0e,
	0x75, 0xd3, 0x9c, 0xb8, 0xd4, 0x79, 0x6d, 0x99, 0x84, 0xa2, 0x03, 0x0c, 0x70, 0x60, 0x0c, 0x75,
	0xfb, 0x8a, 0xa0, 0x36, 0x7e, 0x06, 0x27, 0x94, 0x08, 0xc1, 0x0d, 0x40, 0x11, 0x62, 0x72, 0xe6,
	0x59, 0x8e, 0x8d, 0x54, 0x7c, 0x02, 0x1d, 0x4a, 0x0c, 0xc7, 0xbe, 0xb4, 0xae, 0xc6, 0x94, 0x20,
	0x10, 0x02, 0x94, 0x78, 0xd6, 0x9f, 0x09, 0xea, 0x14, 0x02, 0x62, 0x3c, 0x31, 0x74, 0x57, 0x37,
	0x2c, 0xff, 0x7b, 0x74, 0x28, 0x36, 0xf9, 0x46, 0xa7, 0x36, 0x3a, 0xc2, 0x9f, 0xc2, 0x59, 0x85,
	0x3b, 0xf1, 0x87, 0x94, 0x78, 0x43, 0x67, 0x64, 0xa2, 0x63, 0xa1, 0x62, 0x92, 0x11, 0xf1, 0x09,
	0x3a, 0xc1, 0xc7, 0x00, 0xd4, 0xba, 0x1a, 0xfa, 0x13, 0xa9, 0x8a, 0x44, 0x27, 0xa2, 0xc4, 0x23,
	0xf4, 0x35, 0x99, 0x38, 0xf6, 0xc4, 0xbd, 0x46, 0xa7, 0x5b, 0x26, 0xd3, 0x43, 0xb8, 0x10, 0x97,
	0xbe, 0x2f, 0x1d, 0x3a, 0x21, 0x97, 0x97, 0x96, 0x61, 0x11, 0xdb, 0xf8, 0x1e, 0x3d, 0xc3, 0x5d,
	0xf8, 0xb8, 0xb2, 0xe4, 0x12, 0x7a, 0xe9, 0xd0, 0x6b, 0xdd, 0x36, 0x08, 0x7a, 0x8e, 0xcf, 0xe0,
	0xd4, 0xa0, 0x8e, 0xe7, 0x4d, 0x7c, 0x9d, 0x5e, 0x11, 0x7f, 0x22, 0xe3, 0x79, 0x26, 0x1c, 0xc8,
	0x40, 0xf8, 0xce, 0x15, 0xf1, 0x87, 0x84, 0xa2, 0x8f, 0xb7, 0x7d, 0xea, 0xe8, 0x13, 0x19, 0x59,
	0x43, 0x1f, 0x11, 0xa4, 0xf5, 0xff, 0x00, 0x78, 0xf7, 0xe2, 0xe2, 0x43, 0x50, 0x44, 0x4b, 0x0d,
	0x23, 0xbe, 0x2c, 0x32, 0x37, 0x8a, 0xe6, 0x11, 0x47, 0x35, 0x19, 0x46, 0x96, 0xb3, 0xec, 0x4e,
	0x96, 0x74, 0x54, 0xef, 0xff, 0xbb, 0x05, 0xca, 0xaa, 0xd3, 0xe0, 0x63, 0xa8, 0x47, 0x53, 0x79,
	0x8e, 0x54, 0x5a, 0x8f, 0xa6, 0xa2, 0x27, 0x4c, 0xa3, 0x3c, 0x9d, 0x05, 0x4b, 0x3b, 0x98, 0x33,
	0xad, 0x5e, 0xf4, 0x84, 0x8a, 0x49, 0x22, 0x58, 0x1e, 0x66, 0x51, 0x2a, 0xbb, 0x46, 0xa3, 0x44,
	0x6c, 0x4c, 0xf8, 0x1b, 0x68, 0xa5, 0x41, 0x16, 0xcc, 0xb5, 0xa6, 0xbc, 0x99, 0x9f, 0xef, 0x6b,
	0x71, 0xe7, 0xae, 0x40, 0x30, 0xce, 0x32, 0x5a, 0x80, 0xf1, 0x0b, 0xd9, 0x37, 0x53, 0x96, 0xf1,
	0xa5, 0xd6, 0x92, 0xc4, 0x9f, 0xee, 0x27, 0x96, 0x20, 0xba, 0x86, 0x6f, 0x5d, 0x8a, 0x03, 0x59,
	0xf6, 0x7e, 0xdc, 0xa5, 0x10, 0xd7, 0x50, 0xee, 0xdf, 0x0d, 0xf8, 0xbb, 0xb2, 0x57, 0x56, 0x2c,
	0x5b, 0x6d, 0x4f, 0x91, 0x1e, 0x7e, 0x7c, 0xdb, 0xfb, 0x3d, 0xb4, 0xd2, 0x77, 0x41, 0xce, 0x34,
	0x55, 0x0a, 0x7c, 0xb9, 0xf7, 0xfb, 0x0a, 0xae, 0x57, 0xf8, 0x16, 0x68, 0x5a, 0x90, 0xf0, 0x57,
	0x80, 0x78, 0x34, 0x67, 0x32, 0xaf, 0x1e, 0x0b, 0x93, 0x78, 0x9a, 0xcb, 0x12, 0xdf, 0xa0, 0x3b,
	0xf6, 0xee, 0xdf, 0x6b, 0xa0, 0xae, 0x23, 0x2c, 0xda, 0x6d, 0x2c, 0xb2, 0x59, 0xa4, 0x59, 0x8e,
	0xb7, 0xd3, 0x58, 0xdf, 0x4d, 0x63, 0x17, 0x9a, 0x5c, 0x7c, 0xad, 0x68, 0xc6, 0xea, 0xcb, 0x03,
	0x8f, 0x67, 0x51, 0x7c, 0x4b, 0xa5, 0x0d, 0xf7, 0x41, 0x9d, 0x07, 0xf1, 0x34, 0xe0, 0xe2, 0x69,
	0x21, 0x1a, 0xaf, 0xf2, 0xb2, 0xc9, 0xb3, 0x05, 0xa3, 0x1b, 0x73, 0xf7, 0x1b, 0x50, 0x56, 0xb9,
	0xda, 0xbb, 0x83, 0xe7, 0xd0, 0xba, 0x0b, 0x66, 0x0b, 0x56, 0xbe, 0x02, 0x8a, 0x49, 0xff, 0x6b,
	0x38, 0xdd, 0x89, 0x00, 0x6e, 0x43, 0xc3, 0xa5, 0x04, 0xd5, 0x44, 0xf1, 0xa1, 0xc4, 0x1d, 0xe9,
	0x86, 0xa8, 0x44, 0x0a, 0x34, 0x5d, 0xc7, 0xf3, 0x51, 0xa3, 0x3f, 0x84, 0xe3, 0xf2, 0x29, 0x98,
	0x65, 0x49, 0x26, 0x7a, 0xc4, 0xa3, 0x77, 0x93, 0xf0, 0xda, 0xa8, 0xbe, 0x9b, 0x34, 0x68, 0xcf,
	0x59, 0x9e, 0x07, 0xb7, 0x2b, 0xe7, 0xab, 0x69, 0xff, 0x6f, 0xf5, 0xb5, 0xd4, 0x1d, 0x8b, 0xb9,
	0x90, 0xfa, 0x2d, 0x1c, 0x14, 0x4c, 0xa9, 0xb3, 0x75, 0x9e, 0x77, 0x5f, 0xa0, 0xb4, 0x44, 0xe3,
	0xdf, 0x81, 0x92, 0xcc, 0xa6, 0x1e, 0x0f, 0x38, 0x2b, 0x1f, 0xcf, 0x5f, 0xec, 0x32, 0x29, 0xcb,
	0xd3, 0x24, 0xce, 0x99, 0x84, 0xd1, 0x35, 0x41, 0x90, 0xc5, 0x53, 0x42, 0x92, 0x1b, 0xff, 0x27,
	0x79, 0x45, 0x10, 0x1f, 0x2f, 0x4e, 0x44, 0xce, 0x83, 0x79, 0xaa, 0x35, 0x8b, 0x8f, 0x5f, 0x1b,
	0xc4, 0x59, 0x0f, 0xc2, 0x90, 0xa5, 0xf2, 0x39, 0x24, 0xdf, 0x3f, 0x2a, 0xad, 0x58, 0xfa, 0x26,
	0x60, 0xf2, 0xc0, 0x59, 0x16, 0x07, 0xb3, 0xf2, 0x54, 0x8b, 0xc6, 0x83, 0xa0, 0xb1, 0xc8, 0x66,
	0x65, 0xb8, 0xc4, 0x50, 0x78, 0xc9, 0xdf, 0x25, 0x19, 0x97, 0x85, 0x42, 0x1e, 0x12, 0xba, 0x31,
	0x7c, 0xf5, 0x8f, 0xf5, 0x0f, 0xca, 0xa3, 0x5d, 0x8a, 0x97, 0xbd, 0xe8, 0x1d, 0x96, 0x7d, 0x35,
	0xd1, 0x0d, 0x83, 0xb8, 0x3e, 0xfa, 0x48, 0xd4, 0xae, 0x62, 0x2c, 0xdf, 0xfe, 0x87, 0xa0, 0x50,
	0xf2, 0x47, 0x62, 0x88, 0x59, 0x5d, 0x94, 0x2f, 0xcb, 0x16, 0x5d, 0xe2, 0x8a, 0x12, 0xcf, 0x2b,
	0x5a, 0x8e, 0x37, 0x36, 0x0c, 0x42, 0x4c, 0x62, 0xa2, 0xa6, 0x28, 0xe7, 0x97, 0xba, 0x35, 0x22,
	0x26, 0x6a, 0xad, 0x3a, 0xc6, 0xf5, 0x35, 0xb1, 0xc5, 0xe2, 0x81, 0x90, 0x32, 0x2d, 0x4f, 0xfc,
	0x3f, 0x98, 0xa8, 0x2d, 0xa0, 0x7f, 0x1a, 0x93, 0x31, 0x31, 0x91, 0x22, 0x0e, 0x92, 0x31, 0x22,
	0x3a, 0x25, 0x26, 0x52, 0x5f, 0x5d, 0xc0, 0x17, 0x61, 0x32, 0x3f, 0xbf, 0x9b, 0xf3, 0x45, 0x76,
	0x93, 0x9c, 0xa7, 0xb3, 0x80, 0xbf, 0x4d, 0xb2, 0x79, 0x19, 0xf0, 0xf3, 0x29, 0x4f, 0x5e, 0x9d,
	0x6c, 0x25, 0xfa, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x7d, 0xb1, 0xe5, 0x74, 0x0e, 0x00,
	0x00,
}
