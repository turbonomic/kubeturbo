// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: CommonDTO.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumerates supported DTO types
type UpdateType int32

const (
	// The DTO represents complete state of a new or existing entity.
	UpdateType_UPDATED UpdateType = 0
	// Entity was deleted. DTO must contain only identifying property that are necessary
	// to locate the entity on the server side.
	UpdateType_DELETED UpdateType = 1
	// The DTO represents partial data (related to performance) for existing entities.
	UpdateType_PARTIAL UpdateType = 2
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UPDATED",
		1: "DELETED",
		2: "PARTIAL",
	}
	UpdateType_value = map[string]int32{
		"UPDATED": 0,
		"DELETED": 1,
		"PARTIAL": 2,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[0].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[0]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateType(num)
	return nil
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0}
}

type EntityDTO_EntityType int32

const (
	EntityDTO_SWITCH                 EntityDTO_EntityType = 0
	EntityDTO_VIRTUAL_DATACENTER     EntityDTO_EntityType = 1
	EntityDTO_STORAGE                EntityDTO_EntityType = 2
	EntityDTO_SERVICE                EntityDTO_EntityType = 3
	EntityDTO_DATABASE_SERVER        EntityDTO_EntityType = 4
	EntityDTO_SAVINGS                EntityDTO_EntityType = 5
	EntityDTO_OPERATOR               EntityDTO_EntityType = 6
	EntityDTO_WEB_SERVER             EntityDTO_EntityType = 7
	EntityDTO_RIGHT_SIZER            EntityDTO_EntityType = 8
	EntityDTO_THREE_TIER_APPLICATION EntityDTO_EntityType = 9
	EntityDTO_VIRTUAL_MACHINE        EntityDTO_EntityType = 10
	EntityDTO_DISK_ARRAY             EntityDTO_EntityType = 11
	EntityDTO_DATACENTER             EntityDTO_EntityType = 12
	EntityDTO_INFRASTRUCTURE         EntityDTO_EntityType = 13
	EntityDTO_PHYSICAL_MACHINE       EntityDTO_EntityType = 14
	EntityDTO_CHASSIS                EntityDTO_EntityType = 15
	EntityDTO_LICENSING_SERVICE      EntityDTO_EntityType = 16
	EntityDTO_BUSINESS_USER          EntityDTO_EntityType = 17
	EntityDTO_STORAGE_CONTROLLER     EntityDTO_EntityType = 18
	EntityDTO_HYPERVISOR_SERVER      EntityDTO_EntityType = 19
	EntityDTO_BUSINESS_ENTITY        EntityDTO_EntityType = 20
	EntityDTO_IO_MODULE              EntityDTO_EntityType = 21
	EntityDTO_ACTION_MANAGER         EntityDTO_EntityType = 22
	EntityDTO_VLAN                   EntityDTO_EntityType = 23
	// The entity type APPLICATION_SERVER is deprecated. APPLICATION_COMPONENT type is used
	// instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	EntityDTO_APPLICATION_SERVER EntityDTO_EntityType = 24
	EntityDTO_BUSINESS           EntityDTO_EntityType = 25
	// Should be used SERVICE instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	EntityDTO_VIRTUAL_APPLICATION     EntityDTO_EntityType = 26
	EntityDTO_NETWORKING_ENDPOINT     EntityDTO_EntityType = 27
	EntityDTO_BUSINESS_ACCOUNT        EntityDTO_EntityType = 28
	EntityDTO_IP                      EntityDTO_EntityType = 29
	EntityDTO_SERVICE_ENTITY_TEMPLATE EntityDTO_EntityType = 30
	EntityDTO_PORT                    EntityDTO_EntityType = 31
	EntityDTO_NETWORK                 EntityDTO_EntityType = 32
	// The entity type APPLICATION is deprecated. APPLICATION_COMPONENT type is used instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	EntityDTO_APPLICATION                     EntityDTO_EntityType = 33
	EntityDTO_THIS_ENTITY                     EntityDTO_EntityType = 34
	EntityDTO_COMPUTE_RESOURCE                EntityDTO_EntityType = 35
	EntityDTO_MAC                             EntityDTO_EntityType = 36
	EntityDTO_INTERNET                        EntityDTO_EntityType = 37
	EntityDTO_MOVER                           EntityDTO_EntityType = 38
	EntityDTO_DISTRIBUTED_VIRTUAL_PORTGROUP   EntityDTO_EntityType = 39
	EntityDTO_CONTAINER                       EntityDTO_EntityType = 40
	EntityDTO_CONTAINER_POD                   EntityDTO_EntityType = 41
	EntityDTO_LOGICAL_POOL                    EntityDTO_EntityType = 42
	EntityDTO_CLOUD_SERVICE                   EntityDTO_EntityType = 43
	EntityDTO_DPOD                            EntityDTO_EntityType = 44
	EntityDTO_VPOD                            EntityDTO_EntityType = 45
	EntityDTO_DATABASE                        EntityDTO_EntityType = 46
	EntityDTO_LOAD_BALANCER                   EntityDTO_EntityType = 47
	EntityDTO_BUSINESS_APPLICATION            EntityDTO_EntityType = 48
	EntityDTO_PROCESSOR_POOL                  EntityDTO_EntityType = 49
	EntityDTO_STORAGE_VOLUME                  EntityDTO_EntityType = 50
	EntityDTO_RESERVED_INSTANCE               EntityDTO_EntityType = 51
	EntityDTO_RESERVED_INSTANCE_SPECIFICATION EntityDTO_EntityType = 52
	EntityDTO_DESIRED_RESERVED_INSTANCE       EntityDTO_EntityType = 53
	EntityDTO_REGION                          EntityDTO_EntityType = 54
	EntityDTO_AVAILABILITY_ZONE               EntityDTO_EntityType = 55
	EntityDTO_COMPUTE_TIER                    EntityDTO_EntityType = 56
	EntityDTO_STORAGE_TIER                    EntityDTO_EntityType = 57
	EntityDTO_DATABASE_TIER                   EntityDTO_EntityType = 58
	EntityDTO_DATABASE_SERVER_TIER            EntityDTO_EntityType = 59
	EntityDTO_VIRTUAL_VOLUME                  EntityDTO_EntityType = 60
	EntityDTO_VIEW_POD                        EntityDTO_EntityType = 61
	EntityDTO_DESKTOP_POOL                    EntityDTO_EntityType = 62
	EntityDTO_SERVICE_PROVIDER                EntityDTO_EntityType = 63
	EntityDTO_NAMESPACE                       EntityDTO_EntityType = 64
	EntityDTO_WORKLOAD_CONTROLLER             EntityDTO_EntityType = 65
	EntityDTO_CONTAINER_SPEC                  EntityDTO_EntityType = 66
	EntityDTO_HCI_PHYSICAL_MACHINE            EntityDTO_EntityType = 67
	EntityDTO_BUSINESS_TRANSACTION            EntityDTO_EntityType = 68
	EntityDTO_APPLICATION_COMPONENT           EntityDTO_EntityType = 69
	// Consider using VIRTUAL_MACHINE_SPEC instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	EntityDTO_VM_SPEC                    EntityDTO_EntityType = 70
	EntityDTO_CONTAINER_PLATFORM_CLUSTER EntityDTO_EntityType = 71
	EntityDTO_CLOUD_COMMITMENT           EntityDTO_EntityType = 72
	EntityDTO_CLUSTER                    EntityDTO_EntityType = 73
	EntityDTO_APPLICATION_COMPONENT_SPEC EntityDTO_EntityType = 74
	EntityDTO_VIRTUAL_MACHINE_SPEC       EntityDTO_EntityType = 75
	EntityDTO_DOCUMENT_COLLECTION        EntityDTO_EntityType = 76
	EntityDTO_NODE_GROUP                 EntityDTO_EntityType = 77
	// Pseudo entity to carry over metadata about the resizeable capacity options.
	EntityDTO_CAPACITY_OPTION          EntityDTO_EntityType = 78
	EntityDTO_POWERVM_PHYSICAL_MACHINE EntityDTO_EntityType = 79
	EntityDTO_DATA_WAREHOUSE           EntityDTO_EntityType = 80
	EntityDTO_DATA_WAREHOUSE_TIER      EntityDTO_EntityType = 81
	EntityDTO_REPOSITORY               EntityDTO_EntityType = 82
	// 2047 is the largest tag value encoded in 2 bytes
	EntityDTO_UNKNOWN EntityDTO_EntityType = 2047
)

// Enum value maps for EntityDTO_EntityType.
var (
	EntityDTO_EntityType_name = map[int32]string{
		0:    "SWITCH",
		1:    "VIRTUAL_DATACENTER",
		2:    "STORAGE",
		3:    "SERVICE",
		4:    "DATABASE_SERVER",
		5:    "SAVINGS",
		6:    "OPERATOR",
		7:    "WEB_SERVER",
		8:    "RIGHT_SIZER",
		9:    "THREE_TIER_APPLICATION",
		10:   "VIRTUAL_MACHINE",
		11:   "DISK_ARRAY",
		12:   "DATACENTER",
		13:   "INFRASTRUCTURE",
		14:   "PHYSICAL_MACHINE",
		15:   "CHASSIS",
		16:   "LICENSING_SERVICE",
		17:   "BUSINESS_USER",
		18:   "STORAGE_CONTROLLER",
		19:   "HYPERVISOR_SERVER",
		20:   "BUSINESS_ENTITY",
		21:   "IO_MODULE",
		22:   "ACTION_MANAGER",
		23:   "VLAN",
		24:   "APPLICATION_SERVER",
		25:   "BUSINESS",
		26:   "VIRTUAL_APPLICATION",
		27:   "NETWORKING_ENDPOINT",
		28:   "BUSINESS_ACCOUNT",
		29:   "IP",
		30:   "SERVICE_ENTITY_TEMPLATE",
		31:   "PORT",
		32:   "NETWORK",
		33:   "APPLICATION",
		34:   "THIS_ENTITY",
		35:   "COMPUTE_RESOURCE",
		36:   "MAC",
		37:   "INTERNET",
		38:   "MOVER",
		39:   "DISTRIBUTED_VIRTUAL_PORTGROUP",
		40:   "CONTAINER",
		41:   "CONTAINER_POD",
		42:   "LOGICAL_POOL",
		43:   "CLOUD_SERVICE",
		44:   "DPOD",
		45:   "VPOD",
		46:   "DATABASE",
		47:   "LOAD_BALANCER",
		48:   "BUSINESS_APPLICATION",
		49:   "PROCESSOR_POOL",
		50:   "STORAGE_VOLUME",
		51:   "RESERVED_INSTANCE",
		52:   "RESERVED_INSTANCE_SPECIFICATION",
		53:   "DESIRED_RESERVED_INSTANCE",
		54:   "REGION",
		55:   "AVAILABILITY_ZONE",
		56:   "COMPUTE_TIER",
		57:   "STORAGE_TIER",
		58:   "DATABASE_TIER",
		59:   "DATABASE_SERVER_TIER",
		60:   "VIRTUAL_VOLUME",
		61:   "VIEW_POD",
		62:   "DESKTOP_POOL",
		63:   "SERVICE_PROVIDER",
		64:   "NAMESPACE",
		65:   "WORKLOAD_CONTROLLER",
		66:   "CONTAINER_SPEC",
		67:   "HCI_PHYSICAL_MACHINE",
		68:   "BUSINESS_TRANSACTION",
		69:   "APPLICATION_COMPONENT",
		70:   "VM_SPEC",
		71:   "CONTAINER_PLATFORM_CLUSTER",
		72:   "CLOUD_COMMITMENT",
		73:   "CLUSTER",
		74:   "APPLICATION_COMPONENT_SPEC",
		75:   "VIRTUAL_MACHINE_SPEC",
		76:   "DOCUMENT_COLLECTION",
		77:   "NODE_GROUP",
		78:   "CAPACITY_OPTION",
		79:   "POWERVM_PHYSICAL_MACHINE",
		80:   "DATA_WAREHOUSE",
		81:   "DATA_WAREHOUSE_TIER",
		82:   "REPOSITORY",
		2047: "UNKNOWN",
	}
	EntityDTO_EntityType_value = map[string]int32{
		"SWITCH":                          0,
		"VIRTUAL_DATACENTER":              1,
		"STORAGE":                         2,
		"SERVICE":                         3,
		"DATABASE_SERVER":                 4,
		"SAVINGS":                         5,
		"OPERATOR":                        6,
		"WEB_SERVER":                      7,
		"RIGHT_SIZER":                     8,
		"THREE_TIER_APPLICATION":          9,
		"VIRTUAL_MACHINE":                 10,
		"DISK_ARRAY":                      11,
		"DATACENTER":                      12,
		"INFRASTRUCTURE":                  13,
		"PHYSICAL_MACHINE":                14,
		"CHASSIS":                         15,
		"LICENSING_SERVICE":               16,
		"BUSINESS_USER":                   17,
		"STORAGE_CONTROLLER":              18,
		"HYPERVISOR_SERVER":               19,
		"BUSINESS_ENTITY":                 20,
		"IO_MODULE":                       21,
		"ACTION_MANAGER":                  22,
		"VLAN":                            23,
		"APPLICATION_SERVER":              24,
		"BUSINESS":                        25,
		"VIRTUAL_APPLICATION":             26,
		"NETWORKING_ENDPOINT":             27,
		"BUSINESS_ACCOUNT":                28,
		"IP":                              29,
		"SERVICE_ENTITY_TEMPLATE":         30,
		"PORT":                            31,
		"NETWORK":                         32,
		"APPLICATION":                     33,
		"THIS_ENTITY":                     34,
		"COMPUTE_RESOURCE":                35,
		"MAC":                             36,
		"INTERNET":                        37,
		"MOVER":                           38,
		"DISTRIBUTED_VIRTUAL_PORTGROUP":   39,
		"CONTAINER":                       40,
		"CONTAINER_POD":                   41,
		"LOGICAL_POOL":                    42,
		"CLOUD_SERVICE":                   43,
		"DPOD":                            44,
		"VPOD":                            45,
		"DATABASE":                        46,
		"LOAD_BALANCER":                   47,
		"BUSINESS_APPLICATION":            48,
		"PROCESSOR_POOL":                  49,
		"STORAGE_VOLUME":                  50,
		"RESERVED_INSTANCE":               51,
		"RESERVED_INSTANCE_SPECIFICATION": 52,
		"DESIRED_RESERVED_INSTANCE":       53,
		"REGION":                          54,
		"AVAILABILITY_ZONE":               55,
		"COMPUTE_TIER":                    56,
		"STORAGE_TIER":                    57,
		"DATABASE_TIER":                   58,
		"DATABASE_SERVER_TIER":            59,
		"VIRTUAL_VOLUME":                  60,
		"VIEW_POD":                        61,
		"DESKTOP_POOL":                    62,
		"SERVICE_PROVIDER":                63,
		"NAMESPACE":                       64,
		"WORKLOAD_CONTROLLER":             65,
		"CONTAINER_SPEC":                  66,
		"HCI_PHYSICAL_MACHINE":            67,
		"BUSINESS_TRANSACTION":            68,
		"APPLICATION_COMPONENT":           69,
		"VM_SPEC":                         70,
		"CONTAINER_PLATFORM_CLUSTER":      71,
		"CLOUD_COMMITMENT":                72,
		"CLUSTER":                         73,
		"APPLICATION_COMPONENT_SPEC":      74,
		"VIRTUAL_MACHINE_SPEC":            75,
		"DOCUMENT_COLLECTION":             76,
		"NODE_GROUP":                      77,
		"CAPACITY_OPTION":                 78,
		"POWERVM_PHYSICAL_MACHINE":        79,
		"DATA_WAREHOUSE":                  80,
		"DATA_WAREHOUSE_TIER":             81,
		"REPOSITORY":                      82,
		"UNKNOWN":                         2047,
	}
)

func (x EntityDTO_EntityType) Enum() *EntityDTO_EntityType {
	p := new(EntityDTO_EntityType)
	*p = x
	return p
}

func (x EntityDTO_EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[1].Descriptor()
}

func (EntityDTO_EntityType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[1]
}

func (x EntityDTO_EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_EntityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_EntityType(num)
	return nil
}

// Deprecated: Use EntityDTO_EntityType.Descriptor instead.
func (EntityDTO_EntityType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 0}
}

// Enum for power state.
type EntityDTO_PowerState int32

const (
	EntityDTO_POWERED_ON         EntityDTO_PowerState = 1
	EntityDTO_POWERED_OFF        EntityDTO_PowerState = 2
	EntityDTO_SUSPENDED          EntityDTO_PowerState = 3
	EntityDTO_POWERSTATE_UNKNOWN EntityDTO_PowerState = 4
	EntityDTO_POWERING_ON        EntityDTO_PowerState = 5
	EntityDTO_POWERING_OFF       EntityDTO_PowerState = 6
)

// Enum value maps for EntityDTO_PowerState.
var (
	EntityDTO_PowerState_name = map[int32]string{
		1: "POWERED_ON",
		2: "POWERED_OFF",
		3: "SUSPENDED",
		4: "POWERSTATE_UNKNOWN",
		5: "POWERING_ON",
		6: "POWERING_OFF",
	}
	EntityDTO_PowerState_value = map[string]int32{
		"POWERED_ON":         1,
		"POWERED_OFF":        2,
		"SUSPENDED":          3,
		"POWERSTATE_UNKNOWN": 4,
		"POWERING_ON":        5,
		"POWERING_OFF":       6,
	}
)

func (x EntityDTO_PowerState) Enum() *EntityDTO_PowerState {
	p := new(EntityDTO_PowerState)
	*p = x
	return p
}

func (x EntityDTO_PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[2].Descriptor()
}

func (EntityDTO_PowerState) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[2]
}

func (x EntityDTO_PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_PowerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_PowerState(num)
	return nil
}

// Deprecated: Use EntityDTO_PowerState.Descriptor instead.
func (EntityDTO_PowerState) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 1}
}

type EntityDTO_StorageRedundancyMethod int32

const (
	EntityDTO_RAID0 EntityDTO_StorageRedundancyMethod = 0
	EntityDTO_RAID1 EntityDTO_StorageRedundancyMethod = 1
	EntityDTO_RAID5 EntityDTO_StorageRedundancyMethod = 5
	EntityDTO_RAID6 EntityDTO_StorageRedundancyMethod = 6
)

// Enum value maps for EntityDTO_StorageRedundancyMethod.
var (
	EntityDTO_StorageRedundancyMethod_name = map[int32]string{
		0: "RAID0",
		1: "RAID1",
		5: "RAID5",
		6: "RAID6",
	}
	EntityDTO_StorageRedundancyMethod_value = map[string]int32{
		"RAID0": 0,
		"RAID1": 1,
		"RAID5": 5,
		"RAID6": 6,
	}
)

func (x EntityDTO_StorageRedundancyMethod) Enum() *EntityDTO_StorageRedundancyMethod {
	p := new(EntityDTO_StorageRedundancyMethod)
	*p = x
	return p
}

func (x EntityDTO_StorageRedundancyMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_StorageRedundancyMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[3].Descriptor()
}

func (EntityDTO_StorageRedundancyMethod) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[3]
}

func (x EntityDTO_StorageRedundancyMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_StorageRedundancyMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_StorageRedundancyMethod(num)
	return nil
}

// Deprecated: Use EntityDTO_StorageRedundancyMethod.Descriptor instead.
func (EntityDTO_StorageRedundancyMethod) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 2}
}

// Enum for storage type.
type EntityDTO_StorageType int32

const (
	EntityDTO_GENERIC_BLOCK       EntityDTO_StorageType = 1
	EntityDTO_ISCSI               EntityDTO_StorageType = 2
	EntityDTO_FIBER_CHANNEL       EntityDTO_StorageType = 3
	EntityDTO_FCOE                EntityDTO_StorageType = 4
	EntityDTO_OBJECT              EntityDTO_StorageType = 5
	EntityDTO_GENERIC_FILE_SYSTEM EntityDTO_StorageType = 6
	EntityDTO_NFS                 EntityDTO_StorageType = 7
	EntityDTO_CIFS_SMB            EntityDTO_StorageType = 8
	EntityDTO_LOCAL               EntityDTO_StorageType = 9
	EntityDTO_OTHER               EntityDTO_StorageType = 10
	EntityDTO_VMFS                EntityDTO_StorageType = 11
	EntityDTO_VSAN                EntityDTO_StorageType = 12
	EntityDTO_VVOL                EntityDTO_StorageType = 13
)

// Enum value maps for EntityDTO_StorageType.
var (
	EntityDTO_StorageType_name = map[int32]string{
		1:  "GENERIC_BLOCK",
		2:  "ISCSI",
		3:  "FIBER_CHANNEL",
		4:  "FCOE",
		5:  "OBJECT",
		6:  "GENERIC_FILE_SYSTEM",
		7:  "NFS",
		8:  "CIFS_SMB",
		9:  "LOCAL",
		10: "OTHER",
		11: "VMFS",
		12: "VSAN",
		13: "VVOL",
	}
	EntityDTO_StorageType_value = map[string]int32{
		"GENERIC_BLOCK":       1,
		"ISCSI":               2,
		"FIBER_CHANNEL":       3,
		"FCOE":                4,
		"OBJECT":              5,
		"GENERIC_FILE_SYSTEM": 6,
		"NFS":                 7,
		"CIFS_SMB":            8,
		"LOCAL":               9,
		"OTHER":               10,
		"VMFS":                11,
		"VSAN":                12,
		"VVOL":                13,
	}
)

func (x EntityDTO_StorageType) Enum() *EntityDTO_StorageType {
	p := new(EntityDTO_StorageType)
	*p = x
	return p
}

func (x EntityDTO_StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[4].Descriptor()
}

func (EntityDTO_StorageType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[4]
}

func (x EntityDTO_StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_StorageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_StorageType(num)
	return nil
}

// Deprecated: Use EntityDTO_StorageType.Descriptor instead.
func (EntityDTO_StorageType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 3}
}

// Type of a file in use by the virtual machine
type EntityDTO_VirtualMachineFileType int32

const (
	EntityDTO_CONFIGURATION EntityDTO_VirtualMachineFileType = 1
	EntityDTO_DISK          EntityDTO_VirtualMachineFileType = 2
	EntityDTO_SNAPSHOT      EntityDTO_VirtualMachineFileType = 3
	EntityDTO_MEMORY        EntityDTO_VirtualMachineFileType = 4
	EntityDTO_SWAP          EntityDTO_VirtualMachineFileType = 5
	EntityDTO_LOG           EntityDTO_VirtualMachineFileType = 6
	EntityDTO_ISO           EntityDTO_VirtualMachineFileType = 7
	EntityDTO_ESXCONSOLE    EntityDTO_VirtualMachineFileType = 8
)

// Enum value maps for EntityDTO_VirtualMachineFileType.
var (
	EntityDTO_VirtualMachineFileType_name = map[int32]string{
		1: "CONFIGURATION",
		2: "DISK",
		3: "SNAPSHOT",
		4: "MEMORY",
		5: "SWAP",
		6: "LOG",
		7: "ISO",
		8: "ESXCONSOLE",
	}
	EntityDTO_VirtualMachineFileType_value = map[string]int32{
		"CONFIGURATION": 1,
		"DISK":          2,
		"SNAPSHOT":      3,
		"MEMORY":        4,
		"SWAP":          5,
		"LOG":           6,
		"ISO":           7,
		"ESXCONSOLE":    8,
	}
)

func (x EntityDTO_VirtualMachineFileType) Enum() *EntityDTO_VirtualMachineFileType {
	p := new(EntityDTO_VirtualMachineFileType)
	*p = x
	return p
}

func (x EntityDTO_VirtualMachineFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualMachineFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[5].Descriptor()
}

func (EntityDTO_VirtualMachineFileType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[5]
}

func (x EntityDTO_VirtualMachineFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualMachineFileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualMachineFileType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualMachineFileType.Descriptor instead.
func (EntityDTO_VirtualMachineFileType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 4}
}

// disk type for Ephemeral storages
type EntityDTO_InstanceDiskType int32

const (
	EntityDTO_NONE EntityDTO_InstanceDiskType = 1
	// AWS HDD
	EntityDTO_HDD EntityDTO_InstanceDiskType = 2
	// AWS SSD
	EntityDTO_SSD EntityDTO_InstanceDiskType = 3
	// AWS  non-volatile memory express
	EntityDTO_NVME_SSD EntityDTO_InstanceDiskType = 4
	// Azure temp disk
	EntityDTO_AZURE_TEMP EntityDTO_InstanceDiskType = 9
	// Azure standard storage (inaccurate legacy name -- can now be either Standard HDD or SSD)
	EntityDTO_AZURE_HDD EntityDTO_InstanceDiskType = 10
	// Azure premium storage (inaccurate legacy name -- there are other kinds of SSD)
	EntityDTO_AZURE_SSD EntityDTO_InstanceDiskType = 11
	// Azure ultra storage
	EntityDTO_AZURE_ULTRA EntityDTO_InstanceDiskType = 12
)

// Enum value maps for EntityDTO_InstanceDiskType.
var (
	EntityDTO_InstanceDiskType_name = map[int32]string{
		1:  "NONE",
		2:  "HDD",
		3:  "SSD",
		4:  "NVME_SSD",
		9:  "AZURE_TEMP",
		10: "AZURE_HDD",
		11: "AZURE_SSD",
		12: "AZURE_ULTRA",
	}
	EntityDTO_InstanceDiskType_value = map[string]int32{
		"NONE":        1,
		"HDD":         2,
		"SSD":         3,
		"NVME_SSD":    4,
		"AZURE_TEMP":  9,
		"AZURE_HDD":   10,
		"AZURE_SSD":   11,
		"AZURE_ULTRA": 12,
	}
)

func (x EntityDTO_InstanceDiskType) Enum() *EntityDTO_InstanceDiskType {
	p := new(EntityDTO_InstanceDiskType)
	*p = x
	return p
}

func (x EntityDTO_InstanceDiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_InstanceDiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[6].Descriptor()
}

func (EntityDTO_InstanceDiskType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[6]
}

func (x EntityDTO_InstanceDiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_InstanceDiskType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_InstanceDiskType(num)
	return nil
}

// Deprecated: Use EntityDTO_InstanceDiskType.Descriptor instead.
func (EntityDTO_InstanceDiskType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 5}
}

type EntityDTO_ScalingPenaltyReason int32

const (
	EntityDTO_CORE_CONSTRAINED_TIER         EntityDTO_ScalingPenaltyReason = 0
	EntityDTO_PREMIUM_STORAGE_NOT_SUPPORTED EntityDTO_ScalingPenaltyReason = 1
)

// Enum value maps for EntityDTO_ScalingPenaltyReason.
var (
	EntityDTO_ScalingPenaltyReason_name = map[int32]string{
		0: "CORE_CONSTRAINED_TIER",
		1: "PREMIUM_STORAGE_NOT_SUPPORTED",
	}
	EntityDTO_ScalingPenaltyReason_value = map[string]int32{
		"CORE_CONSTRAINED_TIER":         0,
		"PREMIUM_STORAGE_NOT_SUPPORTED": 1,
	}
)

func (x EntityDTO_ScalingPenaltyReason) Enum() *EntityDTO_ScalingPenaltyReason {
	p := new(EntityDTO_ScalingPenaltyReason)
	*p = x
	return p
}

func (x EntityDTO_ScalingPenaltyReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ScalingPenaltyReason) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[7].Descriptor()
}

func (EntityDTO_ScalingPenaltyReason) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[7]
}

func (x EntityDTO_ScalingPenaltyReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ScalingPenaltyReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ScalingPenaltyReason(num)
	return nil
}

// Deprecated: Use EntityDTO_ScalingPenaltyReason.Descriptor instead.
func (EntityDTO_ScalingPenaltyReason) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 6}
}

// Accelerator (micro) architecture families.
type EntityDTO_AcceleratorFamily int32

const (
	EntityDTO_NVIDIA_TURING       EntityDTO_AcceleratorFamily = 1
	EntityDTO_NVIDIA_AMPERE       EntityDTO_AcceleratorFamily = 2
	EntityDTO_NVIDIA_TESLA        EntityDTO_AcceleratorFamily = 3
	EntityDTO_AMD_RADEON_PRO      EntityDTO_AcceleratorFamily = 4
	EntityDTO_AWS_INFERENTIA      EntityDTO_AcceleratorFamily = 5
	EntityDTO_NVIDIA_KEPLER       EntityDTO_AcceleratorFamily = 6
	EntityDTO_NVIDIA_VOLTA        EntityDTO_AcceleratorFamily = 7
	EntityDTO_NVIDIA_HOPPER       EntityDTO_AcceleratorFamily = 8
	EntityDTO_NVIDIA_MAXWELL      EntityDTO_AcceleratorFamily = 9
	EntityDTO_AMD_RADEON_INSTINCT EntityDTO_AcceleratorFamily = 10
)

// Enum value maps for EntityDTO_AcceleratorFamily.
var (
	EntityDTO_AcceleratorFamily_name = map[int32]string{
		1:  "NVIDIA_TURING",
		2:  "NVIDIA_AMPERE",
		3:  "NVIDIA_TESLA",
		4:  "AMD_RADEON_PRO",
		5:  "AWS_INFERENTIA",
		6:  "NVIDIA_KEPLER",
		7:  "NVIDIA_VOLTA",
		8:  "NVIDIA_HOPPER",
		9:  "NVIDIA_MAXWELL",
		10: "AMD_RADEON_INSTINCT",
	}
	EntityDTO_AcceleratorFamily_value = map[string]int32{
		"NVIDIA_TURING":       1,
		"NVIDIA_AMPERE":       2,
		"NVIDIA_TESLA":        3,
		"AMD_RADEON_PRO":      4,
		"AWS_INFERENTIA":      5,
		"NVIDIA_KEPLER":       6,
		"NVIDIA_VOLTA":        7,
		"NVIDIA_HOPPER":       8,
		"NVIDIA_MAXWELL":      9,
		"AMD_RADEON_INSTINCT": 10,
	}
)

func (x EntityDTO_AcceleratorFamily) Enum() *EntityDTO_AcceleratorFamily {
	p := new(EntityDTO_AcceleratorFamily)
	*p = x
	return p
}

func (x EntityDTO_AcceleratorFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_AcceleratorFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[8].Descriptor()
}

func (EntityDTO_AcceleratorFamily) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[8]
}

func (x EntityDTO_AcceleratorFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_AcceleratorFamily) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_AcceleratorFamily(num)
	return nil
}

// Deprecated: Use EntityDTO_AcceleratorFamily.Descriptor instead.
func (EntityDTO_AcceleratorFamily) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 7}
}

// Specific models within family.
type EntityDTO_AcceleratorModel int32

const (
	// Nvidia Turing T4, for instance types like g4dn.
	EntityDTO_T4_NVIDIA EntityDTO_AcceleratorModel = 1
	// Nvidia Turing T4g, for instance types like g5g.
	EntityDTO_T4G_NVIDIA EntityDTO_AcceleratorModel = 2
	// Nvidia Tesla Ampere, for instance types like g5.
	EntityDTO_A10G_NVIDIA EntityDTO_AcceleratorModel = 3
	// NVIDIA Maxwell M60 GPU family, for g3 types.
	EntityDTO_M60_NVIDIA EntityDTO_AcceleratorModel = 4
	// AMD Radeon Pro V520, for instance types like g4ad.
	EntityDTO_V520_AMD EntityDTO_AcceleratorModel = 5
	// AWS Inferentia inf1.
	EntityDTO_INF1_AWS EntityDTO_AcceleratorModel = 6
	// AWS Inferentia inf2.
	EntityDTO_INF2_AWS EntityDTO_AcceleratorModel = 7
	// NVIDIA Kepler K80, for p2 instance types.
	EntityDTO_K80_NVIDIA EntityDTO_AcceleratorModel = 8
	// NVIDIA Volta V100 SXM, for p3 instance types.
	EntityDTO_V100_NVIDIA EntityDTO_AcceleratorModel = 9
	// NVIDIA Ampere A100 40GB, for p4d instance types.
	EntityDTO_A100_NVIDIA EntityDTO_AcceleratorModel = 10
	// NVIDIA Hopper H100 SXM, for p5 instance types.
	EntityDTO_H100_NVIDIA EntityDTO_AcceleratorModel = 11
	// NVIDIA Volta V100 PCIe, for NCv3 series.
	EntityDTO_V100_NVIDIA_PCIe EntityDTO_AcceleratorModel = 12
	// NVIDIA Ampere A100 PCIe 80GB, for NC_A100_v4 series.
	EntityDTO_A100_NVIDIA_PCIe EntityDTO_AcceleratorModel = 13
	// NVIDIA Ampere A100 SXM 80GB, for P4de(Preview) instance types and NDm_A100_v4 series.
	EntityDTO_A100_NVIDIA_SXM EntityDTO_AcceleratorModel = 14
	// NVIDIA Tesla Ampere A10, for NVadsA10_v5 series.
	EntityDTO_A10_NVIDIA EntityDTO_AcceleratorModel = 15
	// NVIDIA Hopper H100 NVL, for NCads_H100_v5 series.
	EntityDTO_H100_NVIDIA_NVL EntityDTO_AcceleratorModel = 16
	// AMD Radeon Pro V620, for NGads_V620 series.
	EntityDTO_V620_AMD EntityDTO_AcceleratorModel = 17
	// AMD Radeon Instinct MI25, for NVv4 series.
	EntityDTO_MI25_AMD EntityDTO_AcceleratorModel = 18
)

// Enum value maps for EntityDTO_AcceleratorModel.
var (
	EntityDTO_AcceleratorModel_name = map[int32]string{
		1:  "T4_NVIDIA",
		2:  "T4G_NVIDIA",
		3:  "A10G_NVIDIA",
		4:  "M60_NVIDIA",
		5:  "V520_AMD",
		6:  "INF1_AWS",
		7:  "INF2_AWS",
		8:  "K80_NVIDIA",
		9:  "V100_NVIDIA",
		10: "A100_NVIDIA",
		11: "H100_NVIDIA",
		12: "V100_NVIDIA_PCIe",
		13: "A100_NVIDIA_PCIe",
		14: "A100_NVIDIA_SXM",
		15: "A10_NVIDIA",
		16: "H100_NVIDIA_NVL",
		17: "V620_AMD",
		18: "MI25_AMD",
	}
	EntityDTO_AcceleratorModel_value = map[string]int32{
		"T4_NVIDIA":        1,
		"T4G_NVIDIA":       2,
		"A10G_NVIDIA":      3,
		"M60_NVIDIA":       4,
		"V520_AMD":         5,
		"INF1_AWS":         6,
		"INF2_AWS":         7,
		"K80_NVIDIA":       8,
		"V100_NVIDIA":      9,
		"A100_NVIDIA":      10,
		"H100_NVIDIA":      11,
		"V100_NVIDIA_PCIe": 12,
		"A100_NVIDIA_PCIe": 13,
		"A100_NVIDIA_SXM":  14,
		"A10_NVIDIA":       15,
		"H100_NVIDIA_NVL":  16,
		"V620_AMD":         17,
		"MI25_AMD":         18,
	}
)

func (x EntityDTO_AcceleratorModel) Enum() *EntityDTO_AcceleratorModel {
	p := new(EntityDTO_AcceleratorModel)
	*p = x
	return p
}

func (x EntityDTO_AcceleratorModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_AcceleratorModel) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[9].Descriptor()
}

func (EntityDTO_AcceleratorModel) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[9]
}

func (x EntityDTO_AcceleratorModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_AcceleratorModel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_AcceleratorModel(num)
	return nil
}

// Deprecated: Use EntityDTO_AcceleratorModel.Descriptor instead.
func (EntityDTO_AcceleratorModel) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 8}
}

// Deprecated: Use 'AcceleratorFamily' instead.
// Types of GPU models. 1 graphics card (represented GpuInfo) can have only 1 type of card.
//
// Deprecated: Marked as deprecated in CommonDTO.proto.
type EntityDTO_GpuModel int32

const (
	// Nvidia Turing T4, for instance types like g4dn.
	EntityDTO_NVIDIA_T4 EntityDTO_GpuModel = 1
	// Nvidia Turing T4g, for instance types like g5g.
	EntityDTO_NVIDIA_T4G EntityDTO_GpuModel = 2
	// Nvidia Tesla Ampere, for instance types like g5.
	EntityDTO_NVIDIA_A10G EntityDTO_GpuModel = 3
	// AMD Radeon Pro V520, for instance types like g4ad.
	EntityDTO_AMD_V520 EntityDTO_GpuModel = 4
)

// Enum value maps for EntityDTO_GpuModel.
var (
	EntityDTO_GpuModel_name = map[int32]string{
		1: "NVIDIA_T4",
		2: "NVIDIA_T4G",
		3: "NVIDIA_A10G",
		4: "AMD_V520",
	}
	EntityDTO_GpuModel_value = map[string]int32{
		"NVIDIA_T4":   1,
		"NVIDIA_T4G":  2,
		"NVIDIA_A10G": 3,
		"AMD_V520":    4,
	}
)

func (x EntityDTO_GpuModel) Enum() *EntityDTO_GpuModel {
	p := new(EntityDTO_GpuModel)
	*p = x
	return p
}

func (x EntityDTO_GpuModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_GpuModel) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[10].Descriptor()
}

func (EntityDTO_GpuModel) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[10]
}

func (x EntityDTO_GpuModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_GpuModel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_GpuModel(num)
	return nil
}

// Deprecated: Use EntityDTO_GpuModel.Descriptor instead.
func (EntityDTO_GpuModel) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 9}
}

// Type of license model (BYOL or license included)
type EntityDTO_LicenseModel int32

const (
	// the license price is included in the total compute price
	EntityDTO_LICENSE_INCLUDED EntityDTO_LicenseModel = 1
	// Azure Hybrid Benefit - Windows Bring Your Own License
	EntityDTO_AHUB                   EntityDTO_LicenseModel = 2
	EntityDTO_BRING_YOUR_OWN_LICENSE EntityDTO_LicenseModel = 3
	EntityDTO_NO_LICENSE_REQUIRED    EntityDTO_LicenseModel = 4
)

// Enum value maps for EntityDTO_LicenseModel.
var (
	EntityDTO_LicenseModel_name = map[int32]string{
		1: "LICENSE_INCLUDED",
		2: "AHUB",
		3: "BRING_YOUR_OWN_LICENSE",
		4: "NO_LICENSE_REQUIRED",
	}
	EntityDTO_LicenseModel_value = map[string]int32{
		"LICENSE_INCLUDED":       1,
		"AHUB":                   2,
		"BRING_YOUR_OWN_LICENSE": 3,
		"NO_LICENSE_REQUIRED":    4,
	}
)

func (x EntityDTO_LicenseModel) Enum() *EntityDTO_LicenseModel {
	p := new(EntityDTO_LicenseModel)
	*p = x
	return p
}

func (x EntityDTO_LicenseModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_LicenseModel) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[11].Descriptor()
}

func (EntityDTO_LicenseModel) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[11]
}

func (x EntityDTO_LicenseModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_LicenseModel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_LicenseModel(num)
	return nil
}

// Deprecated: Use EntityDTO_LicenseModel.Descriptor instead.
func (EntityDTO_LicenseModel) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 10}
}

type EntityDTO_ClusterRole int32

const (
	EntityDTO_READER EntityDTO_ClusterRole = 1
	EntityDTO_WRITER EntityDTO_ClusterRole = 2
)

// Enum value maps for EntityDTO_ClusterRole.
var (
	EntityDTO_ClusterRole_name = map[int32]string{
		1: "READER",
		2: "WRITER",
	}
	EntityDTO_ClusterRole_value = map[string]int32{
		"READER": 1,
		"WRITER": 2,
	}
)

func (x EntityDTO_ClusterRole) Enum() *EntityDTO_ClusterRole {
	p := new(EntityDTO_ClusterRole)
	*p = x
	return p
}

func (x EntityDTO_ClusterRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ClusterRole) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[12].Descriptor()
}

func (EntityDTO_ClusterRole) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[12]
}

func (x EntityDTO_ClusterRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ClusterRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ClusterRole(num)
	return nil
}

// Deprecated: Use EntityDTO_ClusterRole.Descriptor instead.
func (EntityDTO_ClusterRole) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 11}
}

type EntityDTO_DeploymentType int32

const (
	EntityDTO_SINGLE_AZ EntityDTO_DeploymentType = 1
	EntityDTO_MULTI_AZ  EntityDTO_DeploymentType = 2
)

// Enum value maps for EntityDTO_DeploymentType.
var (
	EntityDTO_DeploymentType_name = map[int32]string{
		1: "SINGLE_AZ",
		2: "MULTI_AZ",
	}
	EntityDTO_DeploymentType_value = map[string]int32{
		"SINGLE_AZ": 1,
		"MULTI_AZ":  2,
	}
)

func (x EntityDTO_DeploymentType) Enum() *EntityDTO_DeploymentType {
	p := new(EntityDTO_DeploymentType)
	*p = x
	return p
}

func (x EntityDTO_DeploymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DeploymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[13].Descriptor()
}

func (EntityDTO_DeploymentType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[13]
}

func (x EntityDTO_DeploymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DeploymentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DeploymentType(num)
	return nil
}

// Deprecated: Use EntityDTO_DeploymentType.Descriptor instead.
func (EntityDTO_DeploymentType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 12}
}

// The types of CPU throttling metrics
type EntityDTO_CPUThrottlingType int32

const (
	// Percentage of runnable Linux scheduling CPU quota periods (100ms) being throttled
	EntityDTO_periodBased EntityDTO_CPUThrottlingType = 0
	// Percentage of CPU time being throttled
	EntityDTO_timeBased EntityDTO_CPUThrottlingType = 1
)

// Enum value maps for EntityDTO_CPUThrottlingType.
var (
	EntityDTO_CPUThrottlingType_name = map[int32]string{
		0: "periodBased",
		1: "timeBased",
	}
	EntityDTO_CPUThrottlingType_value = map[string]int32{
		"periodBased": 0,
		"timeBased":   1,
	}
)

func (x EntityDTO_CPUThrottlingType) Enum() *EntityDTO_CPUThrottlingType {
	p := new(EntityDTO_CPUThrottlingType)
	*p = x
	return p
}

func (x EntityDTO_CPUThrottlingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_CPUThrottlingType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[14].Descriptor()
}

func (EntityDTO_CPUThrottlingType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[14]
}

func (x EntityDTO_CPUThrottlingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_CPUThrottlingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_CPUThrottlingType(num)
	return nil
}

// Deprecated: Use EntityDTO_CPUThrottlingType.Descriptor instead.
func (EntityDTO_CPUThrottlingType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 13}
}

// Units of measurements for VCPU type commodities
type EntityDTO_VcpuCommodityUnit int32

const (
	EntityDTO_MILLICORE EntityDTO_VcpuCommodityUnit = 1
)

// Enum value maps for EntityDTO_VcpuCommodityUnit.
var (
	EntityDTO_VcpuCommodityUnit_name = map[int32]string{
		1: "MILLICORE",
	}
	EntityDTO_VcpuCommodityUnit_value = map[string]int32{
		"MILLICORE": 1,
	}
)

func (x EntityDTO_VcpuCommodityUnit) Enum() *EntityDTO_VcpuCommodityUnit {
	p := new(EntityDTO_VcpuCommodityUnit)
	*p = x
	return p
}

func (x EntityDTO_VcpuCommodityUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VcpuCommodityUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[15].Descriptor()
}

func (EntityDTO_VcpuCommodityUnit) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[15]
}

func (x EntityDTO_VcpuCommodityUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VcpuCommodityUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VcpuCommodityUnit(num)
	return nil
}

// Deprecated: Use EntityDTO_VcpuCommodityUnit.Descriptor instead.
func (EntityDTO_VcpuCommodityUnit) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 14}
}

// Describes level of the migration automations
type EntityDTO_AutomationLevel int32

const (
	EntityDTO_FULLY_AUTOMATED     EntityDTO_AutomationLevel = 1
	EntityDTO_PARTIALLY_AUTOMATED EntityDTO_AutomationLevel = 2
	EntityDTO_NOT_AUTOMATED       EntityDTO_AutomationLevel = 3
	EntityDTO_DISABLED            EntityDTO_AutomationLevel = 4
)

// Enum value maps for EntityDTO_AutomationLevel.
var (
	EntityDTO_AutomationLevel_name = map[int32]string{
		1: "FULLY_AUTOMATED",
		2: "PARTIALLY_AUTOMATED",
		3: "NOT_AUTOMATED",
		4: "DISABLED",
	}
	EntityDTO_AutomationLevel_value = map[string]int32{
		"FULLY_AUTOMATED":     1,
		"PARTIALLY_AUTOMATED": 2,
		"NOT_AUTOMATED":       3,
		"DISABLED":            4,
	}
)

func (x EntityDTO_AutomationLevel) Enum() *EntityDTO_AutomationLevel {
	p := new(EntityDTO_AutomationLevel)
	*p = x
	return p
}

func (x EntityDTO_AutomationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_AutomationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[16].Descriptor()
}

func (EntityDTO_AutomationLevel) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[16]
}

func (x EntityDTO_AutomationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_AutomationLevel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_AutomationLevel(num)
	return nil
}

// Deprecated: Use EntityDTO_AutomationLevel.Descriptor instead.
func (EntityDTO_AutomationLevel) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 15}
}

// A virtual datacenter may be either a consumer or producer
type EntityDTO_VirtualDatacenterRole int32

const (
	EntityDTO_CONSUMER EntityDTO_VirtualDatacenterRole = 1
	EntityDTO_PRODUCER EntityDTO_VirtualDatacenterRole = 2
)

// Enum value maps for EntityDTO_VirtualDatacenterRole.
var (
	EntityDTO_VirtualDatacenterRole_name = map[int32]string{
		1: "CONSUMER",
		2: "PRODUCER",
	}
	EntityDTO_VirtualDatacenterRole_value = map[string]int32{
		"CONSUMER": 1,
		"PRODUCER": 2,
	}
)

func (x EntityDTO_VirtualDatacenterRole) Enum() *EntityDTO_VirtualDatacenterRole {
	p := new(EntityDTO_VirtualDatacenterRole)
	*p = x
	return p
}

func (x EntityDTO_VirtualDatacenterRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualDatacenterRole) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[17].Descriptor()
}

func (EntityDTO_VirtualDatacenterRole) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[17]
}

func (x EntityDTO_VirtualDatacenterRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualDatacenterRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualDatacenterRole(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualDatacenterRole.Descriptor instead.
func (EntityDTO_VirtualDatacenterRole) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 16}
}

// A virtual datacenter allocation model may be either allocationpool, payasyougo, or
// reservationpool
type EntityDTO_VirtualDatacenterAllocationModel int32

const (
	EntityDTO_ALLOCATION_POOL  EntityDTO_VirtualDatacenterAllocationModel = 1
	EntityDTO_PAY_AS_YOU_GO    EntityDTO_VirtualDatacenterAllocationModel = 2
	EntityDTO_RESERVATION_POOL EntityDTO_VirtualDatacenterAllocationModel = 3
)

// Enum value maps for EntityDTO_VirtualDatacenterAllocationModel.
var (
	EntityDTO_VirtualDatacenterAllocationModel_name = map[int32]string{
		1: "ALLOCATION_POOL",
		2: "PAY_AS_YOU_GO",
		3: "RESERVATION_POOL",
	}
	EntityDTO_VirtualDatacenterAllocationModel_value = map[string]int32{
		"ALLOCATION_POOL":  1,
		"PAY_AS_YOU_GO":    2,
		"RESERVATION_POOL": 3,
	}
)

func (x EntityDTO_VirtualDatacenterAllocationModel) Enum() *EntityDTO_VirtualDatacenterAllocationModel {
	p := new(EntityDTO_VirtualDatacenterAllocationModel)
	*p = x
	return p
}

func (x EntityDTO_VirtualDatacenterAllocationModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualDatacenterAllocationModel) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[18].Descriptor()
}

func (EntityDTO_VirtualDatacenterAllocationModel) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[18]
}

func (x EntityDTO_VirtualDatacenterAllocationModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualDatacenterAllocationModel) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualDatacenterAllocationModel(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualDatacenterAllocationModel.Descriptor instead.
func (EntityDTO_VirtualDatacenterAllocationModel) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 17}
}

// Represents the role of a disk in providing actual storage capacity or
// providing cache.  Only capacity disk will increase the capacity of the
// Storage array.
type EntityDTO_DiskRole int32

const (
	// This is a cache disk
	EntityDTO_ROLE_CACHE EntityDTO_DiskRole = 1
	// This is a capacity disk
	EntityDTO_ROLE_CAPACITY EntityDTO_DiskRole = 2
)

// Enum value maps for EntityDTO_DiskRole.
var (
	EntityDTO_DiskRole_name = map[int32]string{
		1: "ROLE_CACHE",
		2: "ROLE_CAPACITY",
	}
	EntityDTO_DiskRole_value = map[string]int32{
		"ROLE_CACHE":    1,
		"ROLE_CAPACITY": 2,
	}
)

func (x EntityDTO_DiskRole) Enum() *EntityDTO_DiskRole {
	p := new(EntityDTO_DiskRole)
	*p = x
	return p
}

func (x EntityDTO_DiskRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DiskRole) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[19].Descriptor()
}

func (EntityDTO_DiskRole) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[19]
}

func (x EntityDTO_DiskRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DiskRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DiskRole(num)
	return nil
}

// Deprecated: Use EntityDTO_DiskRole.Descriptor instead.
func (EntityDTO_DiskRole) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 18}
}

// Names for communicating the number of various types of disks.
type EntityDTO_IopsItemNames int32

const (
	// Number of discovered solid state drives.
	EntityDTO_NUM_SSD EntityDTO_IopsItemNames = 1
	// Number of discovered 7200 RPM disks.
	EntityDTO_NUM_7200_DISKS EntityDTO_IopsItemNames = 2
	// Number of discovered 10000 RPM disks.
	EntityDTO_NUM_10K_DISKS EntityDTO_IopsItemNames = 3
	// Number of discovered 15000 RPM disks.
	EntityDTO_NUM_15K_DISKS EntityDTO_IopsItemNames = 4
	// Number of discovered VSeries disks.
	EntityDTO_NUM_VSERIES_DISKS EntityDTO_IopsItemNames = 5
	// Number of IOPS Supported, as discovered by probe, to replace old iopsCapacity field
	EntityDTO_NUM_IOPS_SUPPORTED EntityDTO_IopsItemNames = 6
)

// Enum value maps for EntityDTO_IopsItemNames.
var (
	EntityDTO_IopsItemNames_name = map[int32]string{
		1: "NUM_SSD",
		2: "NUM_7200_DISKS",
		3: "NUM_10K_DISKS",
		4: "NUM_15K_DISKS",
		5: "NUM_VSERIES_DISKS",
		6: "NUM_IOPS_SUPPORTED",
	}
	EntityDTO_IopsItemNames_value = map[string]int32{
		"NUM_SSD":            1,
		"NUM_7200_DISKS":     2,
		"NUM_10K_DISKS":      3,
		"NUM_15K_DISKS":      4,
		"NUM_VSERIES_DISKS":  5,
		"NUM_IOPS_SUPPORTED": 6,
	}
)

func (x EntityDTO_IopsItemNames) Enum() *EntityDTO_IopsItemNames {
	p := new(EntityDTO_IopsItemNames)
	*p = x
	return p
}

func (x EntityDTO_IopsItemNames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_IopsItemNames) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[20].Descriptor()
}

func (EntityDTO_IopsItemNames) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[20]
}

func (x EntityDTO_IopsItemNames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_IopsItemNames) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_IopsItemNames(num)
	return nil
}

// Deprecated: Use EntityDTO_IopsItemNames.Descriptor instead.
func (EntityDTO_IopsItemNames) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 19}
}

// Specifies the origin of an entity, either DISCOVERED or PROXY
// DISCOVERED: An entity discovered by the probe that maps to a real resource found
// when probing the target.
// PROXY: An entity supplied by the probe to fill out a required part of the supply chain.
// For example, a probe discovering Virtual Machines may supply a Guestload Application proxy
// to complete its supply chain.
// Some proxy entities may be replaced by discovered entities found by another probe."
type EntityDTO_EntityOrigin int32

const (
	EntityDTO_DISCOVERED  EntityDTO_EntityOrigin = 1
	EntityDTO_PROXY       EntityDTO_EntityOrigin = 2
	EntityDTO_REPLACEABLE EntityDTO_EntityOrigin = 3
)

// Enum value maps for EntityDTO_EntityOrigin.
var (
	EntityDTO_EntityOrigin_name = map[int32]string{
		1: "DISCOVERED",
		2: "PROXY",
		3: "REPLACEABLE",
	}
	EntityDTO_EntityOrigin_value = map[string]int32{
		"DISCOVERED":  1,
		"PROXY":       2,
		"REPLACEABLE": 3,
	}
)

func (x EntityDTO_EntityOrigin) Enum() *EntityDTO_EntityOrigin {
	p := new(EntityDTO_EntityOrigin)
	*p = x
	return p
}

func (x EntityDTO_EntityOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_EntityOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[21].Descriptor()
}

func (EntityDTO_EntityOrigin) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[21]
}

func (x EntityDTO_EntityOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_EntityOrigin) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_EntityOrigin(num)
	return nil
}

// Deprecated: Use EntityDTO_EntityOrigin.Descriptor instead.
func (EntityDTO_EntityOrigin) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 20}
}

// The supported operating systems. Keep in sync with com.vmturbo.mediation.hybrid.cloud.common.OsType.
type EntityDTO_OSType int32

const (
	EntityDTO_UNKNOWN_OS EntityDTO_OSType = 0
	// Unix OS.
	EntityDTO_LINUX                     EntityDTO_OSType = 2
	EntityDTO_SUSE                      EntityDTO_OSType = 3
	EntityDTO_RHEL                      EntityDTO_OSType = 4
	EntityDTO_LINUX_WITH_SQL_ENTERPRISE EntityDTO_OSType = 5
	EntityDTO_LINUX_WITH_SQL_STANDARD   EntityDTO_OSType = 6
	EntityDTO_LINUX_WITH_SQL_WEB        EntityDTO_OSType = 7
	EntityDTO_UBUNTU_PRO                EntityDTO_OSType = 8
	// Windows OS.
	EntityDTO_WINDOWS                     EntityDTO_OSType = 20
	EntityDTO_WINDOWS_WITH_SQL_STANDARD   EntityDTO_OSType = 21
	EntityDTO_WINDOWS_WITH_SQL_WEB        EntityDTO_OSType = 22
	EntityDTO_WINDOWS_WITH_SQL_ENTERPRISE EntityDTO_OSType = 23
	EntityDTO_WINDOWS_BYOL                EntityDTO_OSType = 24
)

// Enum value maps for EntityDTO_OSType.
var (
	EntityDTO_OSType_name = map[int32]string{
		0:  "UNKNOWN_OS",
		2:  "LINUX",
		3:  "SUSE",
		4:  "RHEL",
		5:  "LINUX_WITH_SQL_ENTERPRISE",
		6:  "LINUX_WITH_SQL_STANDARD",
		7:  "LINUX_WITH_SQL_WEB",
		8:  "UBUNTU_PRO",
		20: "WINDOWS",
		21: "WINDOWS_WITH_SQL_STANDARD",
		22: "WINDOWS_WITH_SQL_WEB",
		23: "WINDOWS_WITH_SQL_ENTERPRISE",
		24: "WINDOWS_BYOL",
	}
	EntityDTO_OSType_value = map[string]int32{
		"UNKNOWN_OS":                  0,
		"LINUX":                       2,
		"SUSE":                        3,
		"RHEL":                        4,
		"LINUX_WITH_SQL_ENTERPRISE":   5,
		"LINUX_WITH_SQL_STANDARD":     6,
		"LINUX_WITH_SQL_WEB":          7,
		"UBUNTU_PRO":                  8,
		"WINDOWS":                     20,
		"WINDOWS_WITH_SQL_STANDARD":   21,
		"WINDOWS_WITH_SQL_WEB":        22,
		"WINDOWS_WITH_SQL_ENTERPRISE": 23,
		"WINDOWS_BYOL":                24,
	}
)

func (x EntityDTO_OSType) Enum() *EntityDTO_OSType {
	p := new(EntityDTO_OSType)
	*p = x
	return p
}

func (x EntityDTO_OSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_OSType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[22].Descriptor()
}

func (EntityDTO_OSType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[22]
}

func (x EntityDTO_OSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_OSType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_OSType(num)
	return nil
}

// Deprecated: Use EntityDTO_OSType.Descriptor instead.
func (EntityDTO_OSType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 21}
}

// The engine for a database tier.
// This is an enum to save on space - and also because
// the list of supported engines across cloud providers is pretty small.
type EntityDTO_DatabaseEngine int32

const (
	EntityDTO_UNKNOWN_DB EntityDTO_DatabaseEngine = 0
	EntityDTO_MYSQL      EntityDTO_DatabaseEngine = 1
	EntityDTO_MARIADB    EntityDTO_DatabaseEngine = 2
	EntityDTO_POSTGRESQL EntityDTO_DatabaseEngine = 3
	EntityDTO_ORACLE     EntityDTO_DatabaseEngine = 4
	EntityDTO_SQLSERVER  EntityDTO_DatabaseEngine = 5
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	EntityDTO_AURORA           EntityDTO_DatabaseEngine = 6
	EntityDTO_AURORAMYSQL      EntityDTO_DatabaseEngine = 7
	EntityDTO_AURORAPOSTGRESQL EntityDTO_DatabaseEngine = 8
	EntityDTO_MONGO            EntityDTO_DatabaseEngine = 9
	EntityDTO_SYBASE           EntityDTO_DatabaseEngine = 10
	EntityDTO_SYNAPSE          EntityDTO_DatabaseEngine = 11
	EntityDTO_COSMOS           EntityDTO_DatabaseEngine = 12
)

// Enum value maps for EntityDTO_DatabaseEngine.
var (
	EntityDTO_DatabaseEngine_name = map[int32]string{
		0:  "UNKNOWN_DB",
		1:  "MYSQL",
		2:  "MARIADB",
		3:  "POSTGRESQL",
		4:  "ORACLE",
		5:  "SQLSERVER",
		6:  "AURORA",
		7:  "AURORAMYSQL",
		8:  "AURORAPOSTGRESQL",
		9:  "MONGO",
		10: "SYBASE",
		11: "SYNAPSE",
		12: "COSMOS",
	}
	EntityDTO_DatabaseEngine_value = map[string]int32{
		"UNKNOWN_DB":       0,
		"MYSQL":            1,
		"MARIADB":          2,
		"POSTGRESQL":       3,
		"ORACLE":           4,
		"SQLSERVER":        5,
		"AURORA":           6,
		"AURORAMYSQL":      7,
		"AURORAPOSTGRESQL": 8,
		"MONGO":            9,
		"SYBASE":           10,
		"SYNAPSE":          11,
		"COSMOS":           12,
	}
)

func (x EntityDTO_DatabaseEngine) Enum() *EntityDTO_DatabaseEngine {
	p := new(EntityDTO_DatabaseEngine)
	*p = x
	return p
}

func (x EntityDTO_DatabaseEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DatabaseEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[23].Descriptor()
}

func (EntityDTO_DatabaseEngine) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[23]
}

func (x EntityDTO_DatabaseEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DatabaseEngine) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DatabaseEngine(num)
	return nil
}

// Deprecated: Use EntityDTO_DatabaseEngine.Descriptor instead.
func (EntityDTO_DatabaseEngine) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22}
}

type EntityDTO_InstanceTenancy int32

const (
	EntityDTO_DEFAULT   EntityDTO_InstanceTenancy = 1 // instance runs on shared/default hardware
	EntityDTO_DEDICATED EntityDTO_InstanceTenancy = 2 // instance runs on single-tenant hardware.
	EntityDTO_HOST      EntityDTO_InstanceTenancy = 3 // instance runs on a Dedicated Host.
)

// Enum value maps for EntityDTO_InstanceTenancy.
var (
	EntityDTO_InstanceTenancy_name = map[int32]string{
		1: "DEFAULT",
		2: "DEDICATED",
		3: "HOST",
	}
	EntityDTO_InstanceTenancy_value = map[string]int32{
		"DEFAULT":   1,
		"DEDICATED": 2,
		"HOST":      3,
	}
)

func (x EntityDTO_InstanceTenancy) Enum() *EntityDTO_InstanceTenancy {
	p := new(EntityDTO_InstanceTenancy)
	*p = x
	return p
}

func (x EntityDTO_InstanceTenancy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_InstanceTenancy) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[24].Descriptor()
}

func (EntityDTO_InstanceTenancy) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[24]
}

func (x EntityDTO_InstanceTenancy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_InstanceTenancy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_InstanceTenancy(num)
	return nil
}

// Deprecated: Use EntityDTO_InstanceTenancy.Descriptor instead.
func (EntityDTO_InstanceTenancy) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 23}
}

type EntityDTO_ApplicationServiceData_Platform int32

const (
	EntityDTO_ApplicationServiceData_UNKNOWN EntityDTO_ApplicationServiceData_Platform = 0
	EntityDTO_ApplicationServiceData_LINUX   EntityDTO_ApplicationServiceData_Platform = 1
	EntityDTO_ApplicationServiceData_WINDOWS EntityDTO_ApplicationServiceData_Platform = 2
)

// Enum value maps for EntityDTO_ApplicationServiceData_Platform.
var (
	EntityDTO_ApplicationServiceData_Platform_name = map[int32]string{
		0: "UNKNOWN",
		1: "LINUX",
		2: "WINDOWS",
	}
	EntityDTO_ApplicationServiceData_Platform_value = map[string]int32{
		"UNKNOWN": 0,
		"LINUX":   1,
		"WINDOWS": 2,
	}
)

func (x EntityDTO_ApplicationServiceData_Platform) Enum() *EntityDTO_ApplicationServiceData_Platform {
	p := new(EntityDTO_ApplicationServiceData_Platform)
	*p = x
	return p
}

func (x EntityDTO_ApplicationServiceData_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ApplicationServiceData_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[25].Descriptor()
}

func (EntityDTO_ApplicationServiceData_Platform) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[25]
}

func (x EntityDTO_ApplicationServiceData_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ApplicationServiceData_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ApplicationServiceData_Platform(num)
	return nil
}

// Deprecated: Use EntityDTO_ApplicationServiceData_Platform.Descriptor instead.
func (EntityDTO_ApplicationServiceData_Platform) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 14, 0}
}

type EntityDTO_ApplicationServiceData_Tier int32

const (
	EntityDTO_ApplicationServiceData_OTHER_APP_SERVICE_PLAN_SERVICE_TIER EntityDTO_ApplicationServiceData_Tier = 0
	EntityDTO_ApplicationServiceData_FREE                                EntityDTO_ApplicationServiceData_Tier = 1
	EntityDTO_ApplicationServiceData_SHARED                              EntityDTO_ApplicationServiceData_Tier = 2
	EntityDTO_ApplicationServiceData_BASIC                               EntityDTO_ApplicationServiceData_Tier = 3
	EntityDTO_ApplicationServiceData_STANDARD                            EntityDTO_ApplicationServiceData_Tier = 4
	EntityDTO_ApplicationServiceData_PREMIUM                             EntityDTO_ApplicationServiceData_Tier = 5
	EntityDTO_ApplicationServiceData_PREMIUMV2                           EntityDTO_ApplicationServiceData_Tier = 6
	EntityDTO_ApplicationServiceData_PREMIUMV3                           EntityDTO_ApplicationServiceData_Tier = 7
	EntityDTO_ApplicationServiceData_ISOLATED                            EntityDTO_ApplicationServiceData_Tier = 8
	EntityDTO_ApplicationServiceData_ISOLATEDV2                          EntityDTO_ApplicationServiceData_Tier = 9
	EntityDTO_ApplicationServiceData_PREMIUMCONTAINER                    EntityDTO_ApplicationServiceData_Tier = 10
	EntityDTO_ApplicationServiceData_ELASTICPREMIUM                      EntityDTO_ApplicationServiceData_Tier = 11
	EntityDTO_ApplicationServiceData_WORKFLOWSTANDARD                    EntityDTO_ApplicationServiceData_Tier = 12
	EntityDTO_ApplicationServiceData_DYNAMIC                             EntityDTO_ApplicationServiceData_Tier = 13
)

// Enum value maps for EntityDTO_ApplicationServiceData_Tier.
var (
	EntityDTO_ApplicationServiceData_Tier_name = map[int32]string{
		0:  "OTHER_APP_SERVICE_PLAN_SERVICE_TIER",
		1:  "FREE",
		2:  "SHARED",
		3:  "BASIC",
		4:  "STANDARD",
		5:  "PREMIUM",
		6:  "PREMIUMV2",
		7:  "PREMIUMV3",
		8:  "ISOLATED",
		9:  "ISOLATEDV2",
		10: "PREMIUMCONTAINER",
		11: "ELASTICPREMIUM",
		12: "WORKFLOWSTANDARD",
		13: "DYNAMIC",
	}
	EntityDTO_ApplicationServiceData_Tier_value = map[string]int32{
		"OTHER_APP_SERVICE_PLAN_SERVICE_TIER": 0,
		"FREE":                                1,
		"SHARED":                              2,
		"BASIC":                               3,
		"STANDARD":                            4,
		"PREMIUM":                             5,
		"PREMIUMV2":                           6,
		"PREMIUMV3":                           7,
		"ISOLATED":                            8,
		"ISOLATEDV2":                          9,
		"PREMIUMCONTAINER":                    10,
		"ELASTICPREMIUM":                      11,
		"WORKFLOWSTANDARD":                    12,
		"DYNAMIC":                             13,
	}
)

func (x EntityDTO_ApplicationServiceData_Tier) Enum() *EntityDTO_ApplicationServiceData_Tier {
	p := new(EntityDTO_ApplicationServiceData_Tier)
	*p = x
	return p
}

func (x EntityDTO_ApplicationServiceData_Tier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ApplicationServiceData_Tier) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[26].Descriptor()
}

func (EntityDTO_ApplicationServiceData_Tier) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[26]
}

func (x EntityDTO_ApplicationServiceData_Tier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ApplicationServiceData_Tier) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ApplicationServiceData_Tier(num)
	return nil
}

// Deprecated: Use EntityDTO_ApplicationServiceData_Tier.Descriptor instead.
func (EntityDTO_ApplicationServiceData_Tier) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 14, 1}
}

type EntityDTO_KubernetesServiceData_ServiceType int32

const (
	EntityDTO_KubernetesServiceData_ClusterIP    EntityDTO_KubernetesServiceData_ServiceType = 1
	EntityDTO_KubernetesServiceData_NodePort     EntityDTO_KubernetesServiceData_ServiceType = 2
	EntityDTO_KubernetesServiceData_LoadBalancer EntityDTO_KubernetesServiceData_ServiceType = 3
	EntityDTO_KubernetesServiceData_ExternalName EntityDTO_KubernetesServiceData_ServiceType = 4
)

// Enum value maps for EntityDTO_KubernetesServiceData_ServiceType.
var (
	EntityDTO_KubernetesServiceData_ServiceType_name = map[int32]string{
		1: "ClusterIP",
		2: "NodePort",
		3: "LoadBalancer",
		4: "ExternalName",
	}
	EntityDTO_KubernetesServiceData_ServiceType_value = map[string]int32{
		"ClusterIP":    1,
		"NodePort":     2,
		"LoadBalancer": 3,
		"ExternalName": 4,
	}
)

func (x EntityDTO_KubernetesServiceData_ServiceType) Enum() *EntityDTO_KubernetesServiceData_ServiceType {
	p := new(EntityDTO_KubernetesServiceData_ServiceType)
	*p = x
	return p
}

func (x EntityDTO_KubernetesServiceData_ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_KubernetesServiceData_ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[27].Descriptor()
}

func (EntityDTO_KubernetesServiceData_ServiceType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[27]
}

func (x EntityDTO_KubernetesServiceData_ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_KubernetesServiceData_ServiceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_KubernetesServiceData_ServiceType(num)
	return nil
}

// Deprecated: Use EntityDTO_KubernetesServiceData_ServiceType.Descriptor instead.
func (EntityDTO_KubernetesServiceData_ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 18, 0}
}

// Account type enumeration.
type EntityDTO_BusinessAccountData_AccountType int32

const (
	EntityDTO_BusinessAccountData_Standard         EntityDTO_BusinessAccountData_AccountType = 1
	EntityDTO_BusinessAccountData_Government_US    EntityDTO_BusinessAccountData_AccountType = 2
	EntityDTO_BusinessAccountData_US_IC_Top_Secret EntityDTO_BusinessAccountData_AccountType = 3
)

// Enum value maps for EntityDTO_BusinessAccountData_AccountType.
var (
	EntityDTO_BusinessAccountData_AccountType_name = map[int32]string{
		1: "Standard",
		2: "Government_US",
		3: "US_IC_Top_Secret",
	}
	EntityDTO_BusinessAccountData_AccountType_value = map[string]int32{
		"Standard":         1,
		"Government_US":    2,
		"US_IC_Top_Secret": 3,
	}
)

func (x EntityDTO_BusinessAccountData_AccountType) Enum() *EntityDTO_BusinessAccountData_AccountType {
	p := new(EntityDTO_BusinessAccountData_AccountType)
	*p = x
	return p
}

func (x EntityDTO_BusinessAccountData_AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_BusinessAccountData_AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[28].Descriptor()
}

func (EntityDTO_BusinessAccountData_AccountType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[28]
}

func (x EntityDTO_BusinessAccountData_AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_BusinessAccountData_AccountType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_BusinessAccountData_AccountType(num)
	return nil
}

// Deprecated: Use EntityDTO_BusinessAccountData_AccountType.Descriptor instead.
func (EntityDTO_BusinessAccountData_AccountType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 19, 0}
}

type EntityDTO_ComputeTierData_DedicatedStorageNetworkState int32

const (
	// Dedicated storage network is not supported by compute tier
	EntityDTO_ComputeTierData_NOT_SUPPORTED EntityDTO_ComputeTierData_DedicatedStorageNetworkState = 1
	// Dedicated storage network is supported by compute tier and is configured as disabled.
	EntityDTO_ComputeTierData_CONFIGURED_DISABLED EntityDTO_ComputeTierData_DedicatedStorageNetworkState = 2
	// Dedicated storage network is supported by compute tier and is configured as enabled.
	EntityDTO_ComputeTierData_CONFIGURED_ENABLED EntityDTO_ComputeTierData_DedicatedStorageNetworkState = 3
	// Dedicated storage network is enabled by compute tier by default and is not changeable.
	EntityDTO_ComputeTierData_ENABLED_BY_DEFAULT EntityDTO_ComputeTierData_DedicatedStorageNetworkState = 4
)

// Enum value maps for EntityDTO_ComputeTierData_DedicatedStorageNetworkState.
var (
	EntityDTO_ComputeTierData_DedicatedStorageNetworkState_name = map[int32]string{
		1: "NOT_SUPPORTED",
		2: "CONFIGURED_DISABLED",
		3: "CONFIGURED_ENABLED",
		4: "ENABLED_BY_DEFAULT",
	}
	EntityDTO_ComputeTierData_DedicatedStorageNetworkState_value = map[string]int32{
		"NOT_SUPPORTED":       1,
		"CONFIGURED_DISABLED": 2,
		"CONFIGURED_ENABLED":  3,
		"ENABLED_BY_DEFAULT":  4,
	}
)

func (x EntityDTO_ComputeTierData_DedicatedStorageNetworkState) Enum() *EntityDTO_ComputeTierData_DedicatedStorageNetworkState {
	p := new(EntityDTO_ComputeTierData_DedicatedStorageNetworkState)
	*p = x
	return p
}

func (x EntityDTO_ComputeTierData_DedicatedStorageNetworkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ComputeTierData_DedicatedStorageNetworkState) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[29].Descriptor()
}

func (EntityDTO_ComputeTierData_DedicatedStorageNetworkState) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[29]
}

func (x EntityDTO_ComputeTierData_DedicatedStorageNetworkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ComputeTierData_DedicatedStorageNetworkState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ComputeTierData_DedicatedStorageNetworkState(num)
	return nil
}

// Deprecated: Use EntityDTO_ComputeTierData_DedicatedStorageNetworkState.Descriptor instead.
func (EntityDTO_ComputeTierData_DedicatedStorageNetworkState) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 20, 0}
}

type EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType int32

const (
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_UNKNOWN EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType = 0
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3      EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType = 1
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_HCP     EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType = 2
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_TFE     EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType = 3
)

// Enum value maps for EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType.
var (
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType_name = map[int32]string{
		0: "UNKNOWN",
		1: "S3",
		2: "HCP",
		3: "TFE",
	}
	EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType_value = map[string]int32{
		"UNKNOWN": 0,
		"S3":      1,
		"HCP":     2,
		"TFE":     3,
	}
)

func (x EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) Enum() *EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType {
	p := new(EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType)
	*p = x
	return p
}

func (x EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[30].Descriptor()
}

func (EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[30]
}

func (x EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType(num)
	return nil
}

// Deprecated: Use EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType.Descriptor instead.
func (EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22, 0, 0, 0}
}

type EntityDTO_VirtualVolumeData_UsageType int32

const (
	// Replica volume used for Azure site recovery service.
	EntityDTO_VirtualVolumeData_SITE_RECOVERY EntityDTO_VirtualVolumeData_UsageType = 0
	// Back up volume.
	EntityDTO_VirtualVolumeData_BACKUP EntityDTO_VirtualVolumeData_UsageType = 1
)

// Enum value maps for EntityDTO_VirtualVolumeData_UsageType.
var (
	EntityDTO_VirtualVolumeData_UsageType_name = map[int32]string{
		0: "SITE_RECOVERY",
		1: "BACKUP",
	}
	EntityDTO_VirtualVolumeData_UsageType_value = map[string]int32{
		"SITE_RECOVERY": 0,
		"BACKUP":        1,
	}
)

func (x EntityDTO_VirtualVolumeData_UsageType) Enum() *EntityDTO_VirtualVolumeData_UsageType {
	p := new(EntityDTO_VirtualVolumeData_UsageType)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_UsageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_UsageType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[31].Descriptor()
}

func (EntityDTO_VirtualVolumeData_UsageType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[31]
}

func (x EntityDTO_VirtualVolumeData_UsageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_UsageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_UsageType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_UsageType.Descriptor instead.
func (EntityDTO_VirtualVolumeData_UsageType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 0}
}

type EntityDTO_VirtualVolumeData_StorageCompatibilityType int32

const (
	EntityDTO_VirtualVolumeData_PREMIUM  EntityDTO_VirtualVolumeData_StorageCompatibilityType = 0
	EntityDTO_VirtualVolumeData_STANDARD EntityDTO_VirtualVolumeData_StorageCompatibilityType = 1
)

// Enum value maps for EntityDTO_VirtualVolumeData_StorageCompatibilityType.
var (
	EntityDTO_VirtualVolumeData_StorageCompatibilityType_name = map[int32]string{
		0: "PREMIUM",
		1: "STANDARD",
	}
	EntityDTO_VirtualVolumeData_StorageCompatibilityType_value = map[string]int32{
		"PREMIUM":  0,
		"STANDARD": 1,
	}
)

func (x EntityDTO_VirtualVolumeData_StorageCompatibilityType) Enum() *EntityDTO_VirtualVolumeData_StorageCompatibilityType {
	p := new(EntityDTO_VirtualVolumeData_StorageCompatibilityType)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_StorageCompatibilityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_StorageCompatibilityType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[32].Descriptor()
}

func (EntityDTO_VirtualVolumeData_StorageCompatibilityType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[32]
}

func (x EntityDTO_VirtualVolumeData_StorageCompatibilityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_StorageCompatibilityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_StorageCompatibilityType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_StorageCompatibilityType.Descriptor instead.
func (EntityDTO_VirtualVolumeData_StorageCompatibilityType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 1}
}

// Description of a volume's relationship with VM or lack thereof
type EntityDTO_VirtualVolumeData_AttachmentState int32

const (
	// in use by a (potentially undiscovered) VM
	EntityDTO_VirtualVolumeData_ATTACHED EntityDTO_VirtualVolumeData_AttachmentState = 0
	// unused by any VM
	EntityDTO_VirtualVolumeData_UNATTACHED EntityDTO_VirtualVolumeData_AttachmentState = 1
)

// Enum value maps for EntityDTO_VirtualVolumeData_AttachmentState.
var (
	EntityDTO_VirtualVolumeData_AttachmentState_name = map[int32]string{
		0: "ATTACHED",
		1: "UNATTACHED",
	}
	EntityDTO_VirtualVolumeData_AttachmentState_value = map[string]int32{
		"ATTACHED":   0,
		"UNATTACHED": 1,
	}
)

func (x EntityDTO_VirtualVolumeData_AttachmentState) Enum() *EntityDTO_VirtualVolumeData_AttachmentState {
	p := new(EntityDTO_VirtualVolumeData_AttachmentState)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_AttachmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_AttachmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[33].Descriptor()
}

func (EntityDTO_VirtualVolumeData_AttachmentState) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[33]
}

func (x EntityDTO_VirtualVolumeData_AttachmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_AttachmentState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_AttachmentState(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_AttachmentState.Descriptor instead.
func (EntityDTO_VirtualVolumeData_AttachmentState) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 2}
}

// Represents the disk role attached to a disk in azure, it can be either OS Disk/Data Disk
type EntityDTO_VirtualVolumeData_AzureDiskRole int32

const (
	// OS Disk Type
	EntityDTO_VirtualVolumeData_OS_DISK EntityDTO_VirtualVolumeData_AzureDiskRole = 0
	// Data Disk Type
	EntityDTO_VirtualVolumeData_DATA_DISK EntityDTO_VirtualVolumeData_AzureDiskRole = 1
)

// Enum value maps for EntityDTO_VirtualVolumeData_AzureDiskRole.
var (
	EntityDTO_VirtualVolumeData_AzureDiskRole_name = map[int32]string{
		0: "OS_DISK",
		1: "DATA_DISK",
	}
	EntityDTO_VirtualVolumeData_AzureDiskRole_value = map[string]int32{
		"OS_DISK":   0,
		"DATA_DISK": 1,
	}
)

func (x EntityDTO_VirtualVolumeData_AzureDiskRole) Enum() *EntityDTO_VirtualVolumeData_AzureDiskRole {
	p := new(EntityDTO_VirtualVolumeData_AzureDiskRole)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_AzureDiskRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_AzureDiskRole) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[34].Descriptor()
}

func (EntityDTO_VirtualVolumeData_AzureDiskRole) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[34]
}

func (x EntityDTO_VirtualVolumeData_AzureDiskRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_AzureDiskRole) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_AzureDiskRole(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_AzureDiskRole.Descriptor instead.
func (EntityDTO_VirtualVolumeData_AzureDiskRole) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 3}
}

// different replication options supported by Azure storage, more details:
// https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
type EntityDTO_VirtualVolumeData_RedundancyType int32

const (
	// Locally redundant storage
	EntityDTO_VirtualVolumeData_LRS EntityDTO_VirtualVolumeData_RedundancyType = 1
	// Zone-redundant storage
	EntityDTO_VirtualVolumeData_ZRS EntityDTO_VirtualVolumeData_RedundancyType = 2
	// Geo-redundant storage
	EntityDTO_VirtualVolumeData_GRS EntityDTO_VirtualVolumeData_RedundancyType = 3
	// Read-access geo-redundant storage
	EntityDTO_VirtualVolumeData_RAGRS EntityDTO_VirtualVolumeData_RedundancyType = 4
)

// Enum value maps for EntityDTO_VirtualVolumeData_RedundancyType.
var (
	EntityDTO_VirtualVolumeData_RedundancyType_name = map[int32]string{
		1: "LRS",
		2: "ZRS",
		3: "GRS",
		4: "RAGRS",
	}
	EntityDTO_VirtualVolumeData_RedundancyType_value = map[string]int32{
		"LRS":   1,
		"ZRS":   2,
		"GRS":   3,
		"RAGRS": 4,
	}
)

func (x EntityDTO_VirtualVolumeData_RedundancyType) Enum() *EntityDTO_VirtualVolumeData_RedundancyType {
	p := new(EntityDTO_VirtualVolumeData_RedundancyType)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_RedundancyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_RedundancyType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[35].Descriptor()
}

func (EntityDTO_VirtualVolumeData_RedundancyType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[35]
}

func (x EntityDTO_VirtualVolumeData_RedundancyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_RedundancyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_RedundancyType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_RedundancyType.Descriptor instead.
func (EntityDTO_VirtualVolumeData_RedundancyType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 4}
}

// The type of volume encryption
type EntityDTO_VirtualVolumeData_VolumeEncryptionType int32

const (
	EntityDTO_VirtualVolumeData_VOLUME_ENCRYPTION_KEY_SYSTEM_MANAGED    EntityDTO_VirtualVolumeData_VolumeEncryptionType = 0
	EntityDTO_VirtualVolumeData_VOLUME_ENCRYPTION_KEY_CUSTOMER_MANAGED  EntityDTO_VirtualVolumeData_VolumeEncryptionType = 1
	EntityDTO_VirtualVolumeData_VOLUME_ENCRYPTION_KEY_CUSTOMER_SUPPLIED EntityDTO_VirtualVolumeData_VolumeEncryptionType = 2
)

// Enum value maps for EntityDTO_VirtualVolumeData_VolumeEncryptionType.
var (
	EntityDTO_VirtualVolumeData_VolumeEncryptionType_name = map[int32]string{
		0: "VOLUME_ENCRYPTION_KEY_SYSTEM_MANAGED",
		1: "VOLUME_ENCRYPTION_KEY_CUSTOMER_MANAGED",
		2: "VOLUME_ENCRYPTION_KEY_CUSTOMER_SUPPLIED",
	}
	EntityDTO_VirtualVolumeData_VolumeEncryptionType_value = map[string]int32{
		"VOLUME_ENCRYPTION_KEY_SYSTEM_MANAGED":    0,
		"VOLUME_ENCRYPTION_KEY_CUSTOMER_MANAGED":  1,
		"VOLUME_ENCRYPTION_KEY_CUSTOMER_SUPPLIED": 2,
	}
)

func (x EntityDTO_VirtualVolumeData_VolumeEncryptionType) Enum() *EntityDTO_VirtualVolumeData_VolumeEncryptionType {
	p := new(EntityDTO_VirtualVolumeData_VolumeEncryptionType)
	*p = x
	return p
}

func (x EntityDTO_VirtualVolumeData_VolumeEncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualVolumeData_VolumeEncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[36].Descriptor()
}

func (EntityDTO_VirtualVolumeData_VolumeEncryptionType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[36]
}

func (x EntityDTO_VirtualVolumeData_VolumeEncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualVolumeData_VolumeEncryptionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualVolumeData_VolumeEncryptionType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualVolumeData_VolumeEncryptionType.Descriptor instead.
func (EntityDTO_VirtualVolumeData_VolumeEncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 5}
}

type EntityDTO_VirtualMachineData_VMBillingType int32

const (
	// Regular on-demand VMs - this is the default type.
	EntityDTO_VirtualMachineData_ONDEMAND EntityDTO_VirtualMachineData_VMBillingType = 0
	// VM bids for compute resources but could be interrupted - lower pricing.
	// In AWS, it is called fleet Spot Instances.
	// In Azure, it is called low priority VMs.
	// In GCE, it is called preemptible VMs.
	EntityDTO_VirtualMachineData_BIDDING EntityDTO_VirtualMachineData_VMBillingType = 1
	// VM runs on a dedicated host - higher pricing.
	EntityDTO_VirtualMachineData_DEDICATED EntityDTO_VirtualMachineData_VMBillingType = 2
	// Reserved in advance - great pricing.
	EntityDTO_VirtualMachineData_RESERVED EntityDTO_VirtualMachineData_VMBillingType = 3
	// A hybrid of different cost types. For example, partial ONDEMAND and partial RESERVED
	EntityDTO_VirtualMachineData_HYBRID EntityDTO_VirtualMachineData_VMBillingType = 4
)

// Enum value maps for EntityDTO_VirtualMachineData_VMBillingType.
var (
	EntityDTO_VirtualMachineData_VMBillingType_name = map[int32]string{
		0: "ONDEMAND",
		1: "BIDDING",
		2: "DEDICATED",
		3: "RESERVED",
		4: "HYBRID",
	}
	EntityDTO_VirtualMachineData_VMBillingType_value = map[string]int32{
		"ONDEMAND":  0,
		"BIDDING":   1,
		"DEDICATED": 2,
		"RESERVED":  3,
		"HYBRID":    4,
	}
)

func (x EntityDTO_VirtualMachineData_VMBillingType) Enum() *EntityDTO_VirtualMachineData_VMBillingType {
	p := new(EntityDTO_VirtualMachineData_VMBillingType)
	*p = x
	return p
}

func (x EntityDTO_VirtualMachineData_VMBillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_VirtualMachineData_VMBillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[37].Descriptor()
}

func (EntityDTO_VirtualMachineData_VMBillingType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[37]
}

func (x EntityDTO_VirtualMachineData_VMBillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_VirtualMachineData_VMBillingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_VirtualMachineData_VMBillingType(num)
	return nil
}

// Deprecated: Use EntityDTO_VirtualMachineData_VMBillingType.Descriptor instead.
func (EntityDTO_VirtualMachineData_VMBillingType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 27, 0}
}

// Various possible values for vSwitch type.
type EntityDTO_NetworkData_VSwitchType int32

const (
	// Virtual standard switch
	EntityDTO_NetworkData_VIRTUAL_STANDARD_SWITCH EntityDTO_NetworkData_VSwitchType = 0
	// Virtual distributed switch
	EntityDTO_NetworkData_VIRTUAL_DISTRIBUTED_SWITCH EntityDTO_NetworkData_VSwitchType = 1
	// Virtual opaque switch
	EntityDTO_NetworkData_VIRTUAL_OPAQUE_SWITCH EntityDTO_NetworkData_VSwitchType = 2
)

// Enum value maps for EntityDTO_NetworkData_VSwitchType.
var (
	EntityDTO_NetworkData_VSwitchType_name = map[int32]string{
		0: "VIRTUAL_STANDARD_SWITCH",
		1: "VIRTUAL_DISTRIBUTED_SWITCH",
		2: "VIRTUAL_OPAQUE_SWITCH",
	}
	EntityDTO_NetworkData_VSwitchType_value = map[string]int32{
		"VIRTUAL_STANDARD_SWITCH":    0,
		"VIRTUAL_DISTRIBUTED_SWITCH": 1,
		"VIRTUAL_OPAQUE_SWITCH":      2,
	}
)

func (x EntityDTO_NetworkData_VSwitchType) Enum() *EntityDTO_NetworkData_VSwitchType {
	p := new(EntityDTO_NetworkData_VSwitchType)
	*p = x
	return p
}

func (x EntityDTO_NetworkData_VSwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_NetworkData_VSwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[38].Descriptor()
}

func (EntityDTO_NetworkData_VSwitchType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[38]
}

func (x EntityDTO_NetworkData_VSwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_NetworkData_VSwitchType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_NetworkData_VSwitchType(num)
	return nil
}

// Deprecated: Use EntityDTO_NetworkData_VSwitchType.Descriptor instead.
func (EntityDTO_NetworkData_VSwitchType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 37, 0}
}

// when desktops are created
type EntityDTO_DesktopPoolData_DesktopPoolProvisionType int32

const (
	// when users connect
	EntityDTO_DesktopPoolData_ON_DEMAND EntityDTO_DesktopPoolData_DesktopPoolProvisionType = 0
	// when pool is created
	EntityDTO_DesktopPoolData_UPFRONT EntityDTO_DesktopPoolData_DesktopPoolProvisionType = 1
)

// Enum value maps for EntityDTO_DesktopPoolData_DesktopPoolProvisionType.
var (
	EntityDTO_DesktopPoolData_DesktopPoolProvisionType_name = map[int32]string{
		0: "ON_DEMAND",
		1: "UPFRONT",
	}
	EntityDTO_DesktopPoolData_DesktopPoolProvisionType_value = map[string]int32{
		"ON_DEMAND": 0,
		"UPFRONT":   1,
	}
)

func (x EntityDTO_DesktopPoolData_DesktopPoolProvisionType) Enum() *EntityDTO_DesktopPoolData_DesktopPoolProvisionType {
	p := new(EntityDTO_DesktopPoolData_DesktopPoolProvisionType)
	*p = x
	return p
}

func (x EntityDTO_DesktopPoolData_DesktopPoolProvisionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DesktopPoolData_DesktopPoolProvisionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[39].Descriptor()
}

func (EntityDTO_DesktopPoolData_DesktopPoolProvisionType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[39]
}

func (x EntityDTO_DesktopPoolData_DesktopPoolProvisionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DesktopPoolData_DesktopPoolProvisionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DesktopPoolData_DesktopPoolProvisionType(num)
	return nil
}

// Deprecated: Use EntityDTO_DesktopPoolData_DesktopPoolProvisionType.Descriptor instead.
func (EntityDTO_DesktopPoolData_DesktopPoolProvisionType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 54, 0}
}

// type (engine) of a desktop created in the pool
type EntityDTO_DesktopPoolData_DesktopPoolCloneType int32

const (
	EntityDTO_DesktopPoolData_FULL    EntityDTO_DesktopPoolData_DesktopPoolCloneType = 0
	EntityDTO_DesktopPoolData_LINKED  EntityDTO_DesktopPoolData_DesktopPoolCloneType = 1
	EntityDTO_DesktopPoolData_INSTANT EntityDTO_DesktopPoolData_DesktopPoolCloneType = 2
)

// Enum value maps for EntityDTO_DesktopPoolData_DesktopPoolCloneType.
var (
	EntityDTO_DesktopPoolData_DesktopPoolCloneType_name = map[int32]string{
		0: "FULL",
		1: "LINKED",
		2: "INSTANT",
	}
	EntityDTO_DesktopPoolData_DesktopPoolCloneType_value = map[string]int32{
		"FULL":    0,
		"LINKED":  1,
		"INSTANT": 2,
	}
)

func (x EntityDTO_DesktopPoolData_DesktopPoolCloneType) Enum() *EntityDTO_DesktopPoolData_DesktopPoolCloneType {
	p := new(EntityDTO_DesktopPoolData_DesktopPoolCloneType)
	*p = x
	return p
}

func (x EntityDTO_DesktopPoolData_DesktopPoolCloneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DesktopPoolData_DesktopPoolCloneType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[40].Descriptor()
}

func (EntityDTO_DesktopPoolData_DesktopPoolCloneType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[40]
}

func (x EntityDTO_DesktopPoolData_DesktopPoolCloneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DesktopPoolData_DesktopPoolCloneType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DesktopPoolData_DesktopPoolCloneType(num)
	return nil
}

// Deprecated: Use EntityDTO_DesktopPoolData_DesktopPoolCloneType.Descriptor instead.
func (EntityDTO_DesktopPoolData_DesktopPoolCloneType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 54, 1}
}

// how desktops are allocated to users
type EntityDTO_DesktopPoolData_DesktopPoolAssignmentType int32

const (
	// random desktop is assigned
	EntityDTO_DesktopPoolData_DYNAMIC EntityDTO_DesktopPoolData_DesktopPoolAssignmentType = 0
	// same desktop every time after re-connect
	EntityDTO_DesktopPoolData_PERSISTENT EntityDTO_DesktopPoolData_DesktopPoolAssignmentType = 1
)

// Enum value maps for EntityDTO_DesktopPoolData_DesktopPoolAssignmentType.
var (
	EntityDTO_DesktopPoolData_DesktopPoolAssignmentType_name = map[int32]string{
		0: "DYNAMIC",
		1: "PERSISTENT",
	}
	EntityDTO_DesktopPoolData_DesktopPoolAssignmentType_value = map[string]int32{
		"DYNAMIC":    0,
		"PERSISTENT": 1,
	}
)

func (x EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) Enum() *EntityDTO_DesktopPoolData_DesktopPoolAssignmentType {
	p := new(EntityDTO_DesktopPoolData_DesktopPoolAssignmentType)
	*p = x
	return p
}

func (x EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[41].Descriptor()
}

func (EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[41]
}

func (x EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_DesktopPoolData_DesktopPoolAssignmentType(num)
	return nil
}

// Deprecated: Use EntityDTO_DesktopPoolData_DesktopPoolAssignmentType.Descriptor instead.
func (EntityDTO_DesktopPoolData_DesktopPoolAssignmentType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 54, 2}
}

type EntityDTO_ReservedInstanceData_InstanceTenancy int32

const (
	EntityDTO_ReservedInstanceData_DEFAULT   EntityDTO_ReservedInstanceData_InstanceTenancy = 1 // instance runs on shared/default hardware
	EntityDTO_ReservedInstanceData_DEDICATED EntityDTO_ReservedInstanceData_InstanceTenancy = 2 // instance runs on single-tenant hardware.
	EntityDTO_ReservedInstanceData_HOST      EntityDTO_ReservedInstanceData_InstanceTenancy = 3 // instance runs on a Dedicated Host.
)

// Enum value maps for EntityDTO_ReservedInstanceData_InstanceTenancy.
var (
	EntityDTO_ReservedInstanceData_InstanceTenancy_name = map[int32]string{
		1: "DEFAULT",
		2: "DEDICATED",
		3: "HOST",
	}
	EntityDTO_ReservedInstanceData_InstanceTenancy_value = map[string]int32{
		"DEFAULT":   1,
		"DEDICATED": 2,
		"HOST":      3,
	}
)

func (x EntityDTO_ReservedInstanceData_InstanceTenancy) Enum() *EntityDTO_ReservedInstanceData_InstanceTenancy {
	p := new(EntityDTO_ReservedInstanceData_InstanceTenancy)
	*p = x
	return p
}

func (x EntityDTO_ReservedInstanceData_InstanceTenancy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ReservedInstanceData_InstanceTenancy) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[42].Descriptor()
}

func (EntityDTO_ReservedInstanceData_InstanceTenancy) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[42]
}

func (x EntityDTO_ReservedInstanceData_InstanceTenancy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ReservedInstanceData_InstanceTenancy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ReservedInstanceData_InstanceTenancy(num)
	return nil
}

// Deprecated: Use EntityDTO_ReservedInstanceData_InstanceTenancy.Descriptor instead.
func (EntityDTO_ReservedInstanceData_InstanceTenancy) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 0}
}

type EntityDTO_ReservedInstanceData_OfferingClass int32

const (
	EntityDTO_ReservedInstanceData_STANDARD    EntityDTO_ReservedInstanceData_OfferingClass = 1 // cannot be exchanged.
	EntityDTO_ReservedInstanceData_CONVERTIBLE EntityDTO_ReservedInstanceData_OfferingClass = 2 //can be exchanged for different Convertible RIs of equal or greater value.
)

// Enum value maps for EntityDTO_ReservedInstanceData_OfferingClass.
var (
	EntityDTO_ReservedInstanceData_OfferingClass_name = map[int32]string{
		1: "STANDARD",
		2: "CONVERTIBLE",
	}
	EntityDTO_ReservedInstanceData_OfferingClass_value = map[string]int32{
		"STANDARD":    1,
		"CONVERTIBLE": 2,
	}
)

func (x EntityDTO_ReservedInstanceData_OfferingClass) Enum() *EntityDTO_ReservedInstanceData_OfferingClass {
	p := new(EntityDTO_ReservedInstanceData_OfferingClass)
	*p = x
	return p
}

func (x EntityDTO_ReservedInstanceData_OfferingClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ReservedInstanceData_OfferingClass) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[43].Descriptor()
}

func (EntityDTO_ReservedInstanceData_OfferingClass) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[43]
}

func (x EntityDTO_ReservedInstanceData_OfferingClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ReservedInstanceData_OfferingClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ReservedInstanceData_OfferingClass(num)
	return nil
}

// Deprecated: Use EntityDTO_ReservedInstanceData_OfferingClass.Descriptor instead.
func (EntityDTO_ReservedInstanceData_OfferingClass) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 1}
}

type EntityDTO_ReservedInstanceData_OfferingType int32

const (
	EntityDTO_ReservedInstanceData_ALL_UPFRONT     EntityDTO_ReservedInstanceData_OfferingType = 1
	EntityDTO_ReservedInstanceData_PARTIAL_UPFRONT EntityDTO_ReservedInstanceData_OfferingType = 2
	EntityDTO_ReservedInstanceData_NO_UPFRONT      EntityDTO_ReservedInstanceData_OfferingType = 3
)

// Enum value maps for EntityDTO_ReservedInstanceData_OfferingType.
var (
	EntityDTO_ReservedInstanceData_OfferingType_name = map[int32]string{
		1: "ALL_UPFRONT",
		2: "PARTIAL_UPFRONT",
		3: "NO_UPFRONT",
	}
	EntityDTO_ReservedInstanceData_OfferingType_value = map[string]int32{
		"ALL_UPFRONT":     1,
		"PARTIAL_UPFRONT": 2,
		"NO_UPFRONT":      3,
	}
)

func (x EntityDTO_ReservedInstanceData_OfferingType) Enum() *EntityDTO_ReservedInstanceData_OfferingType {
	p := new(EntityDTO_ReservedInstanceData_OfferingType)
	*p = x
	return p
}

func (x EntityDTO_ReservedInstanceData_OfferingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ReservedInstanceData_OfferingType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[44].Descriptor()
}

func (EntityDTO_ReservedInstanceData_OfferingType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[44]
}

func (x EntityDTO_ReservedInstanceData_OfferingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ReservedInstanceData_OfferingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ReservedInstanceData_OfferingType(num)
	return nil
}

// Deprecated: Use EntityDTO_ReservedInstanceData_OfferingType.Descriptor instead.
func (EntityDTO_ReservedInstanceData_OfferingType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 2}
}

type EntityDTO_ReservedInstanceData_Platform int32

const (
	EntityDTO_ReservedInstanceData_UNKNOWN                            EntityDTO_ReservedInstanceData_Platform = 1
	EntityDTO_ReservedInstanceData_LINUX                              EntityDTO_ReservedInstanceData_Platform = 2
	EntityDTO_ReservedInstanceData_RHEL                               EntityDTO_ReservedInstanceData_Platform = 3
	EntityDTO_ReservedInstanceData_SUSE                               EntityDTO_ReservedInstanceData_Platform = 4
	EntityDTO_ReservedInstanceData_WINDOWS                            EntityDTO_ReservedInstanceData_Platform = 5
	EntityDTO_ReservedInstanceData_WINDOWS_WITH_SQL_STANDARD          EntityDTO_ReservedInstanceData_Platform = 6
	EntityDTO_ReservedInstanceData_WINDOWS_WITH_SQL_WEB               EntityDTO_ReservedInstanceData_Platform = 7
	EntityDTO_ReservedInstanceData_WINDOWS_WITH_SQL_SERVER_ENTERPRISE EntityDTO_ReservedInstanceData_Platform = 8
	EntityDTO_ReservedInstanceData_LINUX_WITH_SQL_STANDARD            EntityDTO_ReservedInstanceData_Platform = 9
	EntityDTO_ReservedInstanceData_LINUX_WITH_SQL_WEB                 EntityDTO_ReservedInstanceData_Platform = 10
	EntityDTO_ReservedInstanceData_LINUX_WITH_SQL_SERVER_ENTERPRISE   EntityDTO_ReservedInstanceData_Platform = 11
)

// Enum value maps for EntityDTO_ReservedInstanceData_Platform.
var (
	EntityDTO_ReservedInstanceData_Platform_name = map[int32]string{
		1:  "UNKNOWN",
		2:  "LINUX",
		3:  "RHEL",
		4:  "SUSE",
		5:  "WINDOWS",
		6:  "WINDOWS_WITH_SQL_STANDARD",
		7:  "WINDOWS_WITH_SQL_WEB",
		8:  "WINDOWS_WITH_SQL_SERVER_ENTERPRISE",
		9:  "LINUX_WITH_SQL_STANDARD",
		10: "LINUX_WITH_SQL_WEB",
		11: "LINUX_WITH_SQL_SERVER_ENTERPRISE",
	}
	EntityDTO_ReservedInstanceData_Platform_value = map[string]int32{
		"UNKNOWN":                            1,
		"LINUX":                              2,
		"RHEL":                               3,
		"SUSE":                               4,
		"WINDOWS":                            5,
		"WINDOWS_WITH_SQL_STANDARD":          6,
		"WINDOWS_WITH_SQL_WEB":               7,
		"WINDOWS_WITH_SQL_SERVER_ENTERPRISE": 8,
		"LINUX_WITH_SQL_STANDARD":            9,
		"LINUX_WITH_SQL_WEB":                 10,
		"LINUX_WITH_SQL_SERVER_ENTERPRISE":   11,
	}
)

func (x EntityDTO_ReservedInstanceData_Platform) Enum() *EntityDTO_ReservedInstanceData_Platform {
	p := new(EntityDTO_ReservedInstanceData_Platform)
	*p = x
	return p
}

func (x EntityDTO_ReservedInstanceData_Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_ReservedInstanceData_Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[45].Descriptor()
}

func (EntityDTO_ReservedInstanceData_Platform) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[45]
}

func (x EntityDTO_ReservedInstanceData_Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_ReservedInstanceData_Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_ReservedInstanceData_Platform(num)
	return nil
}

// Deprecated: Use EntityDTO_ReservedInstanceData_Platform.Descriptor instead.
func (EntityDTO_ReservedInstanceData_Platform) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 3}
}

type EntityDTO_CloudCommitmentData_ProviderType int32

const (
	EntityDTO_CloudCommitmentData_SAVINGS_PLAN      EntityDTO_CloudCommitmentData_ProviderType = 1
	EntityDTO_CloudCommitmentData_COMMITTED_USE     EntityDTO_CloudCommitmentData_ProviderType = 2
	EntityDTO_CloudCommitmentData_RESERVED_INSTANCE EntityDTO_CloudCommitmentData_ProviderType = 3
)

// Enum value maps for EntityDTO_CloudCommitmentData_ProviderType.
var (
	EntityDTO_CloudCommitmentData_ProviderType_name = map[int32]string{
		1: "SAVINGS_PLAN",
		2: "COMMITTED_USE",
		3: "RESERVED_INSTANCE",
	}
	EntityDTO_CloudCommitmentData_ProviderType_value = map[string]int32{
		"SAVINGS_PLAN":      1,
		"COMMITTED_USE":     2,
		"RESERVED_INSTANCE": 3,
	}
)

func (x EntityDTO_CloudCommitmentData_ProviderType) Enum() *EntityDTO_CloudCommitmentData_ProviderType {
	p := new(EntityDTO_CloudCommitmentData_ProviderType)
	*p = x
	return p
}

func (x EntityDTO_CloudCommitmentData_ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_CloudCommitmentData_ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[46].Descriptor()
}

func (EntityDTO_CloudCommitmentData_ProviderType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[46]
}

func (x EntityDTO_CloudCommitmentData_ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_CloudCommitmentData_ProviderType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_CloudCommitmentData_ProviderType(num)
	return nil
}

// Deprecated: Use EntityDTO_CloudCommitmentData_ProviderType.Descriptor instead.
func (EntityDTO_CloudCommitmentData_ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0}
}

type EntityDTO_CloudCommitmentData_CloudCommitmentScope int32

const (
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_UNKNOWN              EntityDTO_CloudCommitmentData_CloudCommitmentScope = 0
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_ACCOUNT              EntityDTO_CloudCommitmentData_CloudCommitmentScope = 1
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_BILLING_FAMILY_GROUP EntityDTO_CloudCommitmentData_CloudCommitmentScope = 2
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_RESOURCE_GROUP       EntityDTO_CloudCommitmentData_CloudCommitmentScope = 3
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_ACCOuNT_GROUP        EntityDTO_CloudCommitmentData_CloudCommitmentScope = 4
)

// Enum value maps for EntityDTO_CloudCommitmentData_CloudCommitmentScope.
var (
	EntityDTO_CloudCommitmentData_CloudCommitmentScope_name = map[int32]string{
		0: "CLOUD_COMMITMENT_SCOPE_UNKNOWN",
		1: "CLOUD_COMMITMENT_SCOPE_ACCOUNT",
		2: "CLOUD_COMMITMENT_SCOPE_BILLING_FAMILY_GROUP",
		3: "CLOUD_COMMITMENT_SCOPE_RESOURCE_GROUP",
		4: "CLOUD_COMMITMENT_SCOPE_ACCOuNT_GROUP",
	}
	EntityDTO_CloudCommitmentData_CloudCommitmentScope_value = map[string]int32{
		"CLOUD_COMMITMENT_SCOPE_UNKNOWN":              0,
		"CLOUD_COMMITMENT_SCOPE_ACCOUNT":              1,
		"CLOUD_COMMITMENT_SCOPE_BILLING_FAMILY_GROUP": 2,
		"CLOUD_COMMITMENT_SCOPE_RESOURCE_GROUP":       3,
		"CLOUD_COMMITMENT_SCOPE_ACCOuNT_GROUP":        4,
	}
)

func (x EntityDTO_CloudCommitmentData_CloudCommitmentScope) Enum() *EntityDTO_CloudCommitmentData_CloudCommitmentScope {
	p := new(EntityDTO_CloudCommitmentData_CloudCommitmentScope)
	*p = x
	return p
}

func (x EntityDTO_CloudCommitmentData_CloudCommitmentScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_CloudCommitmentData_CloudCommitmentScope) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[47].Descriptor()
}

func (EntityDTO_CloudCommitmentData_CloudCommitmentScope) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[47]
}

func (x EntityDTO_CloudCommitmentData_CloudCommitmentScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_CloudCommitmentData_CloudCommitmentScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_CloudCommitmentData_CloudCommitmentScope(num)
	return nil
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CloudCommitmentScope.Descriptor instead.
func (EntityDTO_CloudCommitmentData_CloudCommitmentScope) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 1}
}

type EntityDTO_CloudCommitmentData_CloudCommitmentStatus int32

const (
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_UNKNOWN  EntityDTO_CloudCommitmentData_CloudCommitmentStatus = 0
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_PENDING  EntityDTO_CloudCommitmentData_CloudCommitmentStatus = 1
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_ACTIVE   EntityDTO_CloudCommitmentData_CloudCommitmentStatus = 2
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_EXPIRED  EntityDTO_CloudCommitmentData_CloudCommitmentStatus = 3
	EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_CANCELED EntityDTO_CloudCommitmentData_CloudCommitmentStatus = 4
)

// Enum value maps for EntityDTO_CloudCommitmentData_CloudCommitmentStatus.
var (
	EntityDTO_CloudCommitmentData_CloudCommitmentStatus_name = map[int32]string{
		0: "CLOUD_COMMITMENT_STATUS_UNKNOWN",
		1: "CLOUD_COMMITMENT_STATUS_PENDING",
		2: "CLOUD_COMMITMENT_STATUS_ACTIVE",
		3: "CLOUD_COMMITMENT_STATUS_EXPIRED",
		4: "CLOUD_COMMITMENT_STATUS_CANCELED",
	}
	EntityDTO_CloudCommitmentData_CloudCommitmentStatus_value = map[string]int32{
		"CLOUD_COMMITMENT_STATUS_UNKNOWN":  0,
		"CLOUD_COMMITMENT_STATUS_PENDING":  1,
		"CLOUD_COMMITMENT_STATUS_ACTIVE":   2,
		"CLOUD_COMMITMENT_STATUS_EXPIRED":  3,
		"CLOUD_COMMITMENT_STATUS_CANCELED": 4,
	}
)

func (x EntityDTO_CloudCommitmentData_CloudCommitmentStatus) Enum() *EntityDTO_CloudCommitmentData_CloudCommitmentStatus {
	p := new(EntityDTO_CloudCommitmentData_CloudCommitmentStatus)
	*p = x
	return p
}

func (x EntityDTO_CloudCommitmentData_CloudCommitmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_CloudCommitmentData_CloudCommitmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[48].Descriptor()
}

func (EntityDTO_CloudCommitmentData_CloudCommitmentStatus) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[48]
}

func (x EntityDTO_CloudCommitmentData_CloudCommitmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_CloudCommitmentData_CloudCommitmentStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_CloudCommitmentData_CloudCommitmentStatus(num)
	return nil
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CloudCommitmentStatus.Descriptor instead.
func (EntityDTO_CloudCommitmentData_CloudCommitmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 2}
}

type EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass int32

const (
	EntityDTO_CloudCommitmentData_CommitmentPricingInfo_STANDARD    EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass = 1 // cannot be exchanged.
	EntityDTO_CloudCommitmentData_CommitmentPricingInfo_CONVERTIBLE EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass = 2 //can be exchanged for different Convertible RIs of equal or greater value.
)

// Enum value maps for EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass.
var (
	EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass_name = map[int32]string{
		1: "STANDARD",
		2: "CONVERTIBLE",
	}
	EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass_value = map[string]int32{
		"STANDARD":    1,
		"CONVERTIBLE": 2,
	}
)

func (x EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) Enum() *EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass {
	p := new(EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass)
	*p = x
	return p
}

func (x EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[49].Descriptor()
}

func (EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[49]
}

func (x EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass(num)
	return nil
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass.Descriptor instead.
func (EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 1, 0}
}

// Type of connection that this message is representing. Different types means different
// semantics
type ConnectedEntity_ConnectionType int32

const (
	// Normal connection is a basic topology connection between two entities,
	// which only serves the purpose of traversability from the one to the other.
	// No other more precise semantics is implied.
	//
	// There is no direction in this connection; it should be understood as symmetrical.
	// Examples of normal connections:
	// (a) the connection between a compute tier and a storage tier
	// (b) the connection between a VM and a virtual volume
	// (c) the connection between a virtual volume and the availability zone it resides in
	//
	//	(changing the semantics of this case is to be deferred for the future)
	//
	// Record this relationship in only  one of the records of the two connected entities.
	// (a) The connection between compute and storage tier
	//
	//	appears in the compute tier record
	//
	// (b) the connection between VM and volume appears in the VM record
	// (c) the connection between volume and zone appears in the volume record
	ConnectedEntity_NORMAL_CONNECTION ConnectedEntity_ConnectionType = 1
	// Ownership is used when two entities not only are topologically connected,
	// but, in addition, one of the entities (the owned entity) cannot meaningfully exist
	// without the other (the owner). Examples of ownerships:
	// (a) Business accounts own workloads in the cloud (e.g., VMs, DBs)
	//
	//	and applications
	//
	// (b) Business accounts can own sub-accounts
	// (c) Regions own availability zones
	// (d) Cloud services own tiers
	//
	// The relationship is directional and should never form circles.
	// Each entity can have at most one owner.
	//
	// Always represent the connection in the record of the owner.
	ConnectedEntity_OWNS_CONNECTION ConnectedEntity_ConnectionType = 2
	// Aggregation is a directional relationship between two entities, the "aggregator"
	// and the "aggregated entity". It denotes a notion of containment (e.g.,
	// the aggregated can be understood to be "inside" the aggregator), but it is less
	// strict than ownership, in two ways:
	// (a) An entity can have more than one aggregator
	// (b) An aggregated entity can exist meaningfully without its aggregator(s)
	// Aggregation should not form circles in the topology.
	//
	// Examples of aggregation:
	// (a) Availability zones aggregate cloud workloads
	// (b) In the absence of availability zones (e.g., Azure), regions aggregate cloud workloads
	// (c) Regions aggregate tiers
	// (d) Datacenters aggregate storage and PMs
	//
	// The aggregation connection should appears always in the record of the
	// *aggregated entity*. This is the opposite of the convention that we use for ownership.
	// The reason for this inconsistent convention is to:
	//  1. Be consistent with the direction of the relationship in the TopologyDTO.
	//  2. When a probe has a preference for which way it prefers to express the relationship,
	//     it tends to be easier to express from the aggregated to the aggregator.
	ConnectedEntity_AGGREGATED_BY_CONNECTION ConnectedEntity_ConnectionType = 3
	// Controlling is a directional relationship between two entities, the "controller"
	// and the "controlled entity".The semantics of a CONTROLLED_BY_CONNECTION are that the
	// "controlled" entities participate in the market and the market generates the action on these
	// "controlled" entities, but the action is actually executed on the "controller" entity.
	// The controller contains the information like size, number of instances.
	// When entities are controlled by controller:
	// 1. A controller may maintain the "desired state" for the controlled entities and will continuously
	// drive the controlled entities toward that desired state. Executing an action on the controlled entity
	// without adjusting the controller's desired state is futile because the controller will change the entity back.
	// 2. Often controlled entities are created as identical replicas specified by a configuration
	// known to and managed by the controller. When the market generates actions for these replicas, they may be
	// merged together on the controller where they are executed to minimize disruption and to make the actions
	// more understandable to the user in the UI.
	// Examples of Controls:
	// (a) WorkloadController controls the ContainerSpec
	// (b) AWS Auto-scaling-group controls the individual VMs under it
	// (c) Azure ScaleSet controls the individual VMs under it
	ConnectedEntity_CONTROLLED_BY_CONNECTION ConnectedEntity_ConnectionType = 4
)

// Enum value maps for ConnectedEntity_ConnectionType.
var (
	ConnectedEntity_ConnectionType_name = map[int32]string{
		1: "NORMAL_CONNECTION",
		2: "OWNS_CONNECTION",
		3: "AGGREGATED_BY_CONNECTION",
		4: "CONTROLLED_BY_CONNECTION",
	}
	ConnectedEntity_ConnectionType_value = map[string]int32{
		"NORMAL_CONNECTION":        1,
		"OWNS_CONNECTION":          2,
		"AGGREGATED_BY_CONNECTION": 3,
		"CONTROLLED_BY_CONNECTION": 4,
	}
)

func (x ConnectedEntity_ConnectionType) Enum() *ConnectedEntity_ConnectionType {
	p := new(ConnectedEntity_ConnectionType)
	*p = x
	return p
}

func (x ConnectedEntity_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectedEntity_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[50].Descriptor()
}

func (ConnectedEntity_ConnectionType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[50]
}

func (x ConnectedEntity_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectedEntity_ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectedEntity_ConnectionType(num)
	return nil
}

// Deprecated: Use ConnectedEntity_ConnectionType.Descriptor instead.
func (ConnectedEntity_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{1, 0}
}

type PricingIdentifier_PricingIdentifierName int32

const (
	// The id of a price offering an Azure account is using; used to identify Azure
	// subscriptions pricing
	PricingIdentifier_OFFER_ID PricingIdentifier_PricingIdentifierName = 1
	// The number associated with an Azure enterprise agreement; used to identify
	// Azure subscriptions pricing
	PricingIdentifier_ENROLLMENT_NUMBER PricingIdentifier_PricingIdentifierName = 2
	// the billing account id associated with a GCP billing account.
	PricingIdentifier_BILLING_ACCOUNT_NAME PricingIdentifier_PricingIdentifierName = 3
	// Cloud provider ID
	PricingIdentifier_CLOUD_PROVIDER_ID PricingIdentifier_PricingIdentifierName = 4
	// Azure MCA plan
	PricingIdentifier_AZURE_PLAN_ID PricingIdentifier_PricingIdentifierName = 5
	// Azure Billing Profile ID
	PricingIdentifier_BILLING_PROFILE_ID PricingIdentifier_PricingIdentifierName = 6
	// AWS Management Account Id
	PricingIdentifier_MANAGEMENT_ACCOUNT_ID PricingIdentifier_PricingIdentifierName = 7
)

// Enum value maps for PricingIdentifier_PricingIdentifierName.
var (
	PricingIdentifier_PricingIdentifierName_name = map[int32]string{
		1: "OFFER_ID",
		2: "ENROLLMENT_NUMBER",
		3: "BILLING_ACCOUNT_NAME",
		4: "CLOUD_PROVIDER_ID",
		5: "AZURE_PLAN_ID",
		6: "BILLING_PROFILE_ID",
		7: "MANAGEMENT_ACCOUNT_ID",
	}
	PricingIdentifier_PricingIdentifierName_value = map[string]int32{
		"OFFER_ID":              1,
		"ENROLLMENT_NUMBER":     2,
		"BILLING_ACCOUNT_NAME":  3,
		"CLOUD_PROVIDER_ID":     4,
		"AZURE_PLAN_ID":         5,
		"BILLING_PROFILE_ID":    6,
		"MANAGEMENT_ACCOUNT_ID": 7,
	}
)

func (x PricingIdentifier_PricingIdentifierName) Enum() *PricingIdentifier_PricingIdentifierName {
	p := new(PricingIdentifier_PricingIdentifierName)
	*p = x
	return p
}

func (x PricingIdentifier_PricingIdentifierName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PricingIdentifier_PricingIdentifierName) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[51].Descriptor()
}

func (PricingIdentifier_PricingIdentifierName) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[51]
}

func (x PricingIdentifier_PricingIdentifierName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PricingIdentifier_PricingIdentifierName) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PricingIdentifier_PricingIdentifierName(num)
	return nil
}

// Deprecated: Use PricingIdentifier_PricingIdentifierName.Descriptor instead.
func (PricingIdentifier_PricingIdentifierName) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{2, 0}
}

type CommodityDTO_CommodityType int32

const (
	CommodityDTO_CLUSTER                  CommodityDTO_CommodityType = 0
	CommodityDTO_THREADS                  CommodityDTO_CommodityType = 1
	CommodityDTO_CPU_ALLOCATION           CommodityDTO_CommodityType = 2
	CommodityDTO_NUMBER_CONSUMERS         CommodityDTO_CommodityType = 3
	CommodityDTO_FLOW_ALLOCATION          CommodityDTO_CommodityType = 4
	CommodityDTO_Q1_VCPU                  CommodityDTO_CommodityType = 5
	CommodityDTO_STORAGE_PROVISIONED      CommodityDTO_CommodityType = 6
	CommodityDTO_LICENSE_COMMODITY        CommodityDTO_CommodityType = 7
	CommodityDTO_STORAGE_AMOUNT           CommodityDTO_CommodityType = 8
	CommodityDTO_Q16_VCPU                 CommodityDTO_CommodityType = 9
	CommodityDTO_Q32_VCPU                 CommodityDTO_CommodityType = 10
	CommodityDTO_SAME_CLUSTER_MOVE_SVC    CommodityDTO_CommodityType = 11
	CommodityDTO_Q3_VCPU                  CommodityDTO_CommodityType = 12
	CommodityDTO_SLA_COMMODITY            CommodityDTO_CommodityType = 13
	CommodityDTO_CROSS_CLUSTER_MOVE_SVC   CommodityDTO_CommodityType = 14
	CommodityDTO_NUMBER_CONSUMERS_PM      CommodityDTO_CommodityType = 15
	CommodityDTO_STORAGE_ALLOCATION       CommodityDTO_CommodityType = 16
	CommodityDTO_Q8_VCPU                  CommodityDTO_CommodityType = 17
	CommodityDTO_SPACE                    CommodityDTO_CommodityType = 18
	CommodityDTO_Q6_VCPU                  CommodityDTO_CommodityType = 19
	CommodityDTO_POWER                    CommodityDTO_CommodityType = 20
	CommodityDTO_MEM                      CommodityDTO_CommodityType = 21
	CommodityDTO_STORAGE_LATENCY          CommodityDTO_CommodityType = 22
	CommodityDTO_Q7_VCPU                  CommodityDTO_CommodityType = 23
	CommodityDTO_COOLING                  CommodityDTO_CommodityType = 24
	CommodityDTO_PORT_CHANEL              CommodityDTO_CommodityType = 25
	CommodityDTO_VCPU                     CommodityDTO_CommodityType = 26
	CommodityDTO_QN_VCPU                  CommodityDTO_CommodityType = 27
	CommodityDTO_CPU_PROVISIONED          CommodityDTO_CommodityType = 28
	CommodityDTO_RIGHT_SIZE_SVC           CommodityDTO_CommodityType = 29
	CommodityDTO_MOVE                     CommodityDTO_CommodityType = 30
	CommodityDTO_Q2_VCPU                  CommodityDTO_CommodityType = 31
	CommodityDTO_Q5_VCPU                  CommodityDTO_CommodityType = 32
	CommodityDTO_SWAPPING                 CommodityDTO_CommodityType = 33
	CommodityDTO_SEGMENTATION             CommodityDTO_CommodityType = 34
	CommodityDTO_FLOW                     CommodityDTO_CommodityType = 35
	CommodityDTO_DATASTORE                CommodityDTO_CommodityType = 36
	CommodityDTO_CROSS_CLOUD_MOVE_SVC     CommodityDTO_CommodityType = 37
	CommodityDTO_RIGHT_SIZE_DOWN          CommodityDTO_CommodityType = 38
	CommodityDTO_IO_THROUGHPUT            CommodityDTO_CommodityType = 39
	CommodityDTO_CPU                      CommodityDTO_CommodityType = 40
	CommodityDTO_BALLOONING               CommodityDTO_CommodityType = 41
	CommodityDTO_VDC                      CommodityDTO_CommodityType = 42
	CommodityDTO_Q64_VCPU                 CommodityDTO_CommodityType = 43
	CommodityDTO_CONNECTION               CommodityDTO_CommodityType = 44
	CommodityDTO_MEM_PROVISIONED          CommodityDTO_CommodityType = 45
	CommodityDTO_STORAGE                  CommodityDTO_CommodityType = 46
	CommodityDTO_NET_THROUGHPUT           CommodityDTO_CommodityType = 47
	CommodityDTO_NUMBER_CONSUMERS_STORAGE CommodityDTO_CommodityType = 48
	CommodityDTO_TRANSACTION              CommodityDTO_CommodityType = 49
	CommodityDTO_MEM_ALLOCATION           CommodityDTO_CommodityType = 50
	CommodityDTO_DSPM_ACCESS              CommodityDTO_CommodityType = 51
	CommodityDTO_RESPONSE_TIME            CommodityDTO_CommodityType = 52
	CommodityDTO_VMEM                     CommodityDTO_CommodityType = 53
	CommodityDTO_ACTION_PERMIT            CommodityDTO_CommodityType = 54
	CommodityDTO_DATACENTER               CommodityDTO_CommodityType = 55
	CommodityDTO_APPLICATION              CommodityDTO_CommodityType = 56
	CommodityDTO_NETWORK                  CommodityDTO_CommodityType = 57
	CommodityDTO_Q4_VCPU                  CommodityDTO_CommodityType = 58
	CommodityDTO_STORAGE_CLUSTER          CommodityDTO_CommodityType = 59
	CommodityDTO_EXTENT                   CommodityDTO_CommodityType = 60
	CommodityDTO_ACCESS                   CommodityDTO_CommodityType = 61
	CommodityDTO_RIGHT_SIZE_UP            CommodityDTO_CommodityType = 62
	CommodityDTO_VAPP_ACCESS              CommodityDTO_CommodityType = 63
	CommodityDTO_STORAGE_ACCESS           CommodityDTO_CommodityType = 64
	CommodityDTO_VSTORAGE                 CommodityDTO_CommodityType = 65
	CommodityDTO_DRS_SEGMENTATION         CommodityDTO_CommodityType = 66
	CommodityDTO_DB_MEM                   CommodityDTO_CommodityType = 67
	CommodityDTO_TRANSACTION_LOG          CommodityDTO_CommodityType = 68
	CommodityDTO_DB_CACHE_HIT_RATE        CommodityDTO_CommodityType = 69
	CommodityDTO_HOT_STORAGE              CommodityDTO_CommodityType = 70
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_COLLECTION_TIME            CommodityDTO_CommodityType = 71
	CommodityDTO_BUFFER_COMMODITY           CommodityDTO_CommodityType = 72
	CommodityDTO_SOFTWARE_LICENSE_COMMODITY CommodityDTO_CommodityType = 73
	CommodityDTO_VMPM_ACCESS                CommodityDTO_CommodityType = 74
	CommodityDTO_HA_COMMODITY               CommodityDTO_CommodityType = 75
	CommodityDTO_NETWORK_POLICY             CommodityDTO_CommodityType = 76
	CommodityDTO_HEAP                       CommodityDTO_CommodityType = 77
	CommodityDTO_DISK_ARRAY_ACCESS          CommodityDTO_CommodityType = 78
	CommodityDTO_SERVICE_LEVEL_CLUSTER      CommodityDTO_CommodityType = 79
	CommodityDTO_PROCESSING_UNITS           CommodityDTO_CommodityType = 80
	CommodityDTO_HOST_LUN_ACCESS            CommodityDTO_CommodityType = 81
	CommodityDTO_COUPON                     CommodityDTO_CommodityType = 82
	CommodityDTO_TENANCY_ACCESS             CommodityDTO_CommodityType = 83
	CommodityDTO_LICENSE_ACCESS             CommodityDTO_CommodityType = 84
	CommodityDTO_TEMPLATE_ACCESS            CommodityDTO_CommodityType = 85
	// Max allowed data disks that can be attached to a VM on an Azure compute tier.
	// E.g Standard_A4 allows a max of 16 data disks.
	CommodityDTO_NUM_DISK        CommodityDTO_CommodityType = 86
	CommodityDTO_ZONE            CommodityDTO_CommodityType = 87
	CommodityDTO_ACTIVE_SESSIONS CommodityDTO_CommodityType = 88
	CommodityDTO_POOL_CPU        CommodityDTO_CommodityType = 89
	CommodityDTO_POOL_MEM        CommodityDTO_CommodityType = 90
	CommodityDTO_POOL_STORAGE    CommodityDTO_CommodityType = 91
	CommodityDTO_IMAGE_CPU       CommodityDTO_CommodityType = 92
	CommodityDTO_IMAGE_MEM       CommodityDTO_CommodityType = 93
	CommodityDTO_IMAGE_STORAGE   CommodityDTO_CommodityType = 94
	// Size of each instance store disk - e.g 840 GB for m2.4xlarge instance type.
	CommodityDTO_INSTANCE_DISK_SIZE CommodityDTO_CommodityType = 95
	// Type of each instance store disk - e.g 'HDD', 'NVMe SSD' etc.
	CommodityDTO_INSTANCE_DISK_TYPE CommodityDTO_CommodityType = 96
	CommodityDTO_BURST_BALANCE      CommodityDTO_CommodityType = 97
	CommodityDTO_TEMPLATE_FAMILY    CommodityDTO_CommodityType = 98
	CommodityDTO_DESIRED_COUPON     CommodityDTO_CommodityType = 99
	CommodityDTO_VCPU_REQUEST       CommodityDTO_CommodityType = 100
	CommodityDTO_VMEM_REQUEST       CommodityDTO_CommodityType = 101
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_CPU_REQUEST_ALLOCATION CommodityDTO_CommodityType = 102
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_MEM_REQUEST_ALLOCATION  CommodityDTO_CommodityType = 103
	CommodityDTO_NETWORK_INTERFACE_COUNT CommodityDTO_CommodityType = 104
	CommodityDTO_BICLIQUE                CommodityDTO_CommodityType = 105
	CommodityDTO_VCPU_LIMIT_QUOTA        CommodityDTO_CommodityType = 106
	CommodityDTO_VMEM_LIMIT_QUOTA        CommodityDTO_CommodityType = 107
	CommodityDTO_VCPU_REQUEST_QUOTA      CommodityDTO_CommodityType = 108
	CommodityDTO_VMEM_REQUEST_QUOTA      CommodityDTO_CommodityType = 109
	CommodityDTO_NUM_VCORE               CommodityDTO_CommodityType = 110
	CommodityDTO_REMAINING_GC_CAPACITY   CommodityDTO_CommodityType = 111
	// custom KPI metric that can be pushed into Turbo
	// to use as an additional measure of application performance
	CommodityDTO_KPI                CommodityDTO_CommodityType = 112
	CommodityDTO_TOTAL_SESSIONS     CommodityDTO_CommodityType = 113
	CommodityDTO_DTU                CommodityDTO_CommodityType = 114
	CommodityDTO_CONCURRENT_WORKER  CommodityDTO_CommodityType = 115
	CommodityDTO_CONCURRENT_SESSION CommodityDTO_CommodityType = 116
	// Max instance store (temporary storage) disks allowed for AWS compute tier. E.g i2.4xlarge
	// supports 4 instance store disks (exposed as ephemeral volumes), each of 800 GB capacity.
	CommodityDTO_INSTANCE_DISK_COUNT CommodityDTO_CommodityType = 117
	// Number of replicas. For example, the number of replicas sold by a Service entity has a
	// capacity value of defined service replicas, and a used value of active service instances.
	CommodityDTO_NUMBER_REPLICAS CommodityDTO_CommodityType = 118
	// VCPU Throttling depicts the percentage of time the entities VCPU usage has been throttled.
	CommodityDTO_VCPU_THROTTLING CommodityDTO_CommodityType = 119
	CommodityDTO_CPU_READY       CommodityDTO_CommodityType = 120
	// The network bandwidth outbound traffic.
	CommodityDTO_NET_THROUGHPUT_OUT CommodityDTO_CommodityType = 121
	// The network bandwidth inbound traffic.
	CommodityDTO_NET_THROUGHPUT_IN CommodityDTO_CommodityType = 122
	// IO THROUGHPUT commodities for both directions.  It should not be used with IO_THROUGHPUT
	CommodityDTO_IO_THROUGHPUT_READ  CommodityDTO_CommodityType = 123
	CommodityDTO_IO_THROUGHPUT_WRITE CommodityDTO_CommodityType = 124
	// The IOPS read on the SSD disk.
	CommodityDTO_STORAGE_ACCESS_SSD_READ CommodityDTO_CommodityType = 125
	// The IOPS write on the SSD disk.
	CommodityDTO_STORAGE_ACCESS_SSD_WRITE CommodityDTO_CommodityType = 126
	// The IOPS read on the standard disk.
	CommodityDTO_STORAGE_ACCESS_STANDARD_READ CommodityDTO_CommodityType = 127
	// The IOPS write on the standard disk.
	CommodityDTO_STORAGE_ACCESS_STANDARD_WRITE CommodityDTO_CommodityType = 128
	// Represents taints and tolerations in a Kubernetes cluster. Taints are applied to nodes
	// to repel a set of pods, whereas tolerations are applied to pods to allow them to be
	// scheduled onto nodes with matching taints. Taints and tolerations work together to ensure
	// that pods are not scheduled onto inappropriate nodes.
	// To support the above semantics, for every taint that exists in a cluster, all nodes in
	// the cluster that do not have this taint sell a TAINT commodity; for every pod, it buys
	// one TAINT commodity for a taint that it does not tolerate.
	CommodityDTO_TAINT CommodityDTO_CommodityType = 129
	// Represents a label in kubernetes. Labels are applied to nodes to attract or repel pods
	// via nodeSelector and affinity/anti-affinity rules, to ensure pods are placed onto the
	// appropriate nodes.
	CommodityDTO_LABEL                        CommodityDTO_CommodityType = 130
	CommodityDTO_HARDWARE_VERSION             CommodityDTO_CommodityType = 131
	CommodityDTO_ENERGY                       CommodityDTO_CommodityType = 132
	CommodityDTO_PROCESSING_UNITS_PROVISIONED CommodityDTO_CommodityType = 133
	CommodityDTO_CARBON                       CommodityDTO_CommodityType = 134
	CommodityDTO_DWU                          CommodityDTO_CommodityType = 135
	CommodityDTO_CONCURRENT_QUERIES           CommodityDTO_CommodityType = 136
	CommodityDTO_VIRTUAL_PROCESSORS           CommodityDTO_CommodityType = 137
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_GPU_ACCESS CommodityDTO_CommodityType = 138
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_GPU_SLICE CommodityDTO_CommodityType = 139
	CommodityDTO_RU        CommodityDTO_CommodityType = 140
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	CommodityDTO_GPU_MEM_SLICE      CommodityDTO_CommodityType = 141
	CommodityDTO_GPU_MEM_ALLOCATION CommodityDTO_CommodityType = 142
	CommodityDTO_VGPU_MEM           CommodityDTO_CommodityType = 143
	CommodityDTO_VGPU_COMPUTE       CommodityDTO_CommodityType = 144
	// Commodity to represent same level entity to entity affinity (e.g. pod to pod affinity)
	CommodityDTO_PEER_TO_PEER_AFFINITY CommodityDTO_CommodityType = 145
	// Commodity to represent same level entity-to-entity anti-affinity (e.g. pod-to-pod
	// ant-affinity)
	CommodityDTO_PEER_TO_PEER_ANTI_AFFINITY CommodityDTO_CommodityType = 146
	// Commodity to represent the core speed.
	CommodityDTO_CORE_SPEED    CommodityDTO_CommodityType = 147
	CommodityDTO_VGPU_TYPE_MEM CommodityDTO_CommodityType = 148
	// Commodities representing GPU resources, especially in Kubernetes.
	CommodityDTO_GPU               CommodityDTO_CommodityType = 149
	CommodityDTO_GPU_MEM           CommodityDTO_CommodityType = 150
	CommodityDTO_GPU_REQUEST       CommodityDTO_CommodityType = 151
	CommodityDTO_GPU_REQUEST_QUOTA CommodityDTO_CommodityType = 152
	// Commodities describing resources in a queuing-like system.
	// The two existing commodities RESPONSE_TIME and TRANSACTION also belong to this category.
	CommodityDTO_QUEUING_TIME CommodityDTO_CommodityType = 153
	CommodityDTO_SERVICE_TIME CommodityDTO_CommodityType = 154
	// Commodities describing Large Language Model (LLM) serving resources.
	// Insufficient caching drives queue growth.
	CommodityDTO_LLM_CACHE CommodityDTO_CommodityType = 155
	// Number of GPU cores
	CommodityDTO_GPU_COUNT              CommodityDTO_CommodityType = 156
	CommodityDTO_PCI_PASSTHROUGH_ACCESS CommodityDTO_CommodityType = 157
	// GPU core engine utilization
	CommodityDTO_GPU_TENSOR_ENGINE    CommodityDTO_CommodityType = 158
	CommodityDTO_GPU_FP64_ENGINE      CommodityDTO_CommodityType = 159
	CommodityDTO_GPU_FP32_ENGINE      CommodityDTO_CommodityType = 160
	CommodityDTO_GPU_MEMORY_BANDWIDTH CommodityDTO_CommodityType = 161
	CommodityDTO_GPU_FP16_ENGINE      CommodityDTO_CommodityType = 162
	// Minimum host requirement for RAID type
	CommodityDTO_RAID_HOSTS CommodityDTO_CommodityType = 163
	// PowerVM logical block size
	CommodityDTO_LOGICAL_BLOCK_SIZE_ACCESS CommodityDTO_CommodityType = 164
	// PowerVM logical block size
	CommodityDTO_POWER_CAPABILITY_ACCESS CommodityDTO_CommodityType = 165
	// The combined read/write IOPS for Hyperdisk Balanced (GCP specific).
	CommodityDTO_STORAGE_ACCESS_HD_BALANCED_READWRITE CommodityDTO_CommodityType = 166
	// The overall max read-only IOPS cap for a VM (GCP specific).
	CommodityDTO_STORAGE_ACCESS_OVERALL_VM_MAX_READ CommodityDTO_CommodityType = 167
	// The overall max write-only IOPS cap for a VM (GCP specific).
	CommodityDTO_STORAGE_ACCESS_OVERALL_VM_MAX_WRITE CommodityDTO_CommodityType = 168
	// The overall max read+write IOPS cap for a VM (GCP specific).
	CommodityDTO_STORAGE_ACCESS_OVERALL_VM_MAX_READWRITE CommodityDTO_CommodityType = 169
	// The combined read/write IO Throughput for Hyperdisk Balanced (GCP specific).
	CommodityDTO_IO_THROUGHPUT_HD_BALANCED_READWRITE CommodityDTO_CommodityType = 170
	// The overall max read-only IOPS cap for a VM (GCP specific).
	CommodityDTO_IO_THROUGHPUT_OVERALL_VM_MAX_READ CommodityDTO_CommodityType = 171
	// The overall max write-only IOPS cap for a VM (GCP specific).
	CommodityDTO_IO_THROUGHPUT_OVERALL_VM_MAX_WRITE CommodityDTO_CommodityType = 172
	// The overall max read+write IOPS cap for a VM (GCP specific).
	CommodityDTO_IO_THROUGHPUT_OVERALL_VM_MAX_READWRITE CommodityDTO_CommodityType = 173
	// 2047 is the largest tag value encoded in 2 bytes
	CommodityDTO_UNKNOWN CommodityDTO_CommodityType = 2047
)

// Enum value maps for CommodityDTO_CommodityType.
var (
	CommodityDTO_CommodityType_name = map[int32]string{
		0:    "CLUSTER",
		1:    "THREADS",
		2:    "CPU_ALLOCATION",
		3:    "NUMBER_CONSUMERS",
		4:    "FLOW_ALLOCATION",
		5:    "Q1_VCPU",
		6:    "STORAGE_PROVISIONED",
		7:    "LICENSE_COMMODITY",
		8:    "STORAGE_AMOUNT",
		9:    "Q16_VCPU",
		10:   "Q32_VCPU",
		11:   "SAME_CLUSTER_MOVE_SVC",
		12:   "Q3_VCPU",
		13:   "SLA_COMMODITY",
		14:   "CROSS_CLUSTER_MOVE_SVC",
		15:   "NUMBER_CONSUMERS_PM",
		16:   "STORAGE_ALLOCATION",
		17:   "Q8_VCPU",
		18:   "SPACE",
		19:   "Q6_VCPU",
		20:   "POWER",
		21:   "MEM",
		22:   "STORAGE_LATENCY",
		23:   "Q7_VCPU",
		24:   "COOLING",
		25:   "PORT_CHANEL",
		26:   "VCPU",
		27:   "QN_VCPU",
		28:   "CPU_PROVISIONED",
		29:   "RIGHT_SIZE_SVC",
		30:   "MOVE",
		31:   "Q2_VCPU",
		32:   "Q5_VCPU",
		33:   "SWAPPING",
		34:   "SEGMENTATION",
		35:   "FLOW",
		36:   "DATASTORE",
		37:   "CROSS_CLOUD_MOVE_SVC",
		38:   "RIGHT_SIZE_DOWN",
		39:   "IO_THROUGHPUT",
		40:   "CPU",
		41:   "BALLOONING",
		42:   "VDC",
		43:   "Q64_VCPU",
		44:   "CONNECTION",
		45:   "MEM_PROVISIONED",
		46:   "STORAGE",
		47:   "NET_THROUGHPUT",
		48:   "NUMBER_CONSUMERS_STORAGE",
		49:   "TRANSACTION",
		50:   "MEM_ALLOCATION",
		51:   "DSPM_ACCESS",
		52:   "RESPONSE_TIME",
		53:   "VMEM",
		54:   "ACTION_PERMIT",
		55:   "DATACENTER",
		56:   "APPLICATION",
		57:   "NETWORK",
		58:   "Q4_VCPU",
		59:   "STORAGE_CLUSTER",
		60:   "EXTENT",
		61:   "ACCESS",
		62:   "RIGHT_SIZE_UP",
		63:   "VAPP_ACCESS",
		64:   "STORAGE_ACCESS",
		65:   "VSTORAGE",
		66:   "DRS_SEGMENTATION",
		67:   "DB_MEM",
		68:   "TRANSACTION_LOG",
		69:   "DB_CACHE_HIT_RATE",
		70:   "HOT_STORAGE",
		71:   "COLLECTION_TIME",
		72:   "BUFFER_COMMODITY",
		73:   "SOFTWARE_LICENSE_COMMODITY",
		74:   "VMPM_ACCESS",
		75:   "HA_COMMODITY",
		76:   "NETWORK_POLICY",
		77:   "HEAP",
		78:   "DISK_ARRAY_ACCESS",
		79:   "SERVICE_LEVEL_CLUSTER",
		80:   "PROCESSING_UNITS",
		81:   "HOST_LUN_ACCESS",
		82:   "COUPON",
		83:   "TENANCY_ACCESS",
		84:   "LICENSE_ACCESS",
		85:   "TEMPLATE_ACCESS",
		86:   "NUM_DISK",
		87:   "ZONE",
		88:   "ACTIVE_SESSIONS",
		89:   "POOL_CPU",
		90:   "POOL_MEM",
		91:   "POOL_STORAGE",
		92:   "IMAGE_CPU",
		93:   "IMAGE_MEM",
		94:   "IMAGE_STORAGE",
		95:   "INSTANCE_DISK_SIZE",
		96:   "INSTANCE_DISK_TYPE",
		97:   "BURST_BALANCE",
		98:   "TEMPLATE_FAMILY",
		99:   "DESIRED_COUPON",
		100:  "VCPU_REQUEST",
		101:  "VMEM_REQUEST",
		102:  "CPU_REQUEST_ALLOCATION",
		103:  "MEM_REQUEST_ALLOCATION",
		104:  "NETWORK_INTERFACE_COUNT",
		105:  "BICLIQUE",
		106:  "VCPU_LIMIT_QUOTA",
		107:  "VMEM_LIMIT_QUOTA",
		108:  "VCPU_REQUEST_QUOTA",
		109:  "VMEM_REQUEST_QUOTA",
		110:  "NUM_VCORE",
		111:  "REMAINING_GC_CAPACITY",
		112:  "KPI",
		113:  "TOTAL_SESSIONS",
		114:  "DTU",
		115:  "CONCURRENT_WORKER",
		116:  "CONCURRENT_SESSION",
		117:  "INSTANCE_DISK_COUNT",
		118:  "NUMBER_REPLICAS",
		119:  "VCPU_THROTTLING",
		120:  "CPU_READY",
		121:  "NET_THROUGHPUT_OUT",
		122:  "NET_THROUGHPUT_IN",
		123:  "IO_THROUGHPUT_READ",
		124:  "IO_THROUGHPUT_WRITE",
		125:  "STORAGE_ACCESS_SSD_READ",
		126:  "STORAGE_ACCESS_SSD_WRITE",
		127:  "STORAGE_ACCESS_STANDARD_READ",
		128:  "STORAGE_ACCESS_STANDARD_WRITE",
		129:  "TAINT",
		130:  "LABEL",
		131:  "HARDWARE_VERSION",
		132:  "ENERGY",
		133:  "PROCESSING_UNITS_PROVISIONED",
		134:  "CARBON",
		135:  "DWU",
		136:  "CONCURRENT_QUERIES",
		137:  "VIRTUAL_PROCESSORS",
		138:  "GPU_ACCESS",
		139:  "GPU_SLICE",
		140:  "RU",
		141:  "GPU_MEM_SLICE",
		142:  "GPU_MEM_ALLOCATION",
		143:  "VGPU_MEM",
		144:  "VGPU_COMPUTE",
		145:  "PEER_TO_PEER_AFFINITY",
		146:  "PEER_TO_PEER_ANTI_AFFINITY",
		147:  "CORE_SPEED",
		148:  "VGPU_TYPE_MEM",
		149:  "GPU",
		150:  "GPU_MEM",
		151:  "GPU_REQUEST",
		152:  "GPU_REQUEST_QUOTA",
		153:  "QUEUING_TIME",
		154:  "SERVICE_TIME",
		155:  "LLM_CACHE",
		156:  "GPU_COUNT",
		157:  "PCI_PASSTHROUGH_ACCESS",
		158:  "GPU_TENSOR_ENGINE",
		159:  "GPU_FP64_ENGINE",
		160:  "GPU_FP32_ENGINE",
		161:  "GPU_MEMORY_BANDWIDTH",
		162:  "GPU_FP16_ENGINE",
		163:  "RAID_HOSTS",
		164:  "LOGICAL_BLOCK_SIZE_ACCESS",
		165:  "POWER_CAPABILITY_ACCESS",
		166:  "STORAGE_ACCESS_HD_BALANCED_READWRITE",
		167:  "STORAGE_ACCESS_OVERALL_VM_MAX_READ",
		168:  "STORAGE_ACCESS_OVERALL_VM_MAX_WRITE",
		169:  "STORAGE_ACCESS_OVERALL_VM_MAX_READWRITE",
		170:  "IO_THROUGHPUT_HD_BALANCED_READWRITE",
		171:  "IO_THROUGHPUT_OVERALL_VM_MAX_READ",
		172:  "IO_THROUGHPUT_OVERALL_VM_MAX_WRITE",
		173:  "IO_THROUGHPUT_OVERALL_VM_MAX_READWRITE",
		2047: "UNKNOWN",
	}
	CommodityDTO_CommodityType_value = map[string]int32{
		"CLUSTER":                              0,
		"THREADS":                              1,
		"CPU_ALLOCATION":                       2,
		"NUMBER_CONSUMERS":                     3,
		"FLOW_ALLOCATION":                      4,
		"Q1_VCPU":                              5,
		"STORAGE_PROVISIONED":                  6,
		"LICENSE_COMMODITY":                    7,
		"STORAGE_AMOUNT":                       8,
		"Q16_VCPU":                             9,
		"Q32_VCPU":                             10,
		"SAME_CLUSTER_MOVE_SVC":                11,
		"Q3_VCPU":                              12,
		"SLA_COMMODITY":                        13,
		"CROSS_CLUSTER_MOVE_SVC":               14,
		"NUMBER_CONSUMERS_PM":                  15,
		"STORAGE_ALLOCATION":                   16,
		"Q8_VCPU":                              17,
		"SPACE":                                18,
		"Q6_VCPU":                              19,
		"POWER":                                20,
		"MEM":                                  21,
		"STORAGE_LATENCY":                      22,
		"Q7_VCPU":                              23,
		"COOLING":                              24,
		"PORT_CHANEL":                          25,
		"VCPU":                                 26,
		"QN_VCPU":                              27,
		"CPU_PROVISIONED":                      28,
		"RIGHT_SIZE_SVC":                       29,
		"MOVE":                                 30,
		"Q2_VCPU":                              31,
		"Q5_VCPU":                              32,
		"SWAPPING":                             33,
		"SEGMENTATION":                         34,
		"FLOW":                                 35,
		"DATASTORE":                            36,
		"CROSS_CLOUD_MOVE_SVC":                 37,
		"RIGHT_SIZE_DOWN":                      38,
		"IO_THROUGHPUT":                        39,
		"CPU":                                  40,
		"BALLOONING":                           41,
		"VDC":                                  42,
		"Q64_VCPU":                             43,
		"CONNECTION":                           44,
		"MEM_PROVISIONED":                      45,
		"STORAGE":                              46,
		"NET_THROUGHPUT":                       47,
		"NUMBER_CONSUMERS_STORAGE":             48,
		"TRANSACTION":                          49,
		"MEM_ALLOCATION":                       50,
		"DSPM_ACCESS":                          51,
		"RESPONSE_TIME":                        52,
		"VMEM":                                 53,
		"ACTION_PERMIT":                        54,
		"DATACENTER":                           55,
		"APPLICATION":                          56,
		"NETWORK":                              57,
		"Q4_VCPU":                              58,
		"STORAGE_CLUSTER":                      59,
		"EXTENT":                               60,
		"ACCESS":                               61,
		"RIGHT_SIZE_UP":                        62,
		"VAPP_ACCESS":                          63,
		"STORAGE_ACCESS":                       64,
		"VSTORAGE":                             65,
		"DRS_SEGMENTATION":                     66,
		"DB_MEM":                               67,
		"TRANSACTION_LOG":                      68,
		"DB_CACHE_HIT_RATE":                    69,
		"HOT_STORAGE":                          70,
		"COLLECTION_TIME":                      71,
		"BUFFER_COMMODITY":                     72,
		"SOFTWARE_LICENSE_COMMODITY":           73,
		"VMPM_ACCESS":                          74,
		"HA_COMMODITY":                         75,
		"NETWORK_POLICY":                       76,
		"HEAP":                                 77,
		"DISK_ARRAY_ACCESS":                    78,
		"SERVICE_LEVEL_CLUSTER":                79,
		"PROCESSING_UNITS":                     80,
		"HOST_LUN_ACCESS":                      81,
		"COUPON":                               82,
		"TENANCY_ACCESS":                       83,
		"LICENSE_ACCESS":                       84,
		"TEMPLATE_ACCESS":                      85,
		"NUM_DISK":                             86,
		"ZONE":                                 87,
		"ACTIVE_SESSIONS":                      88,
		"POOL_CPU":                             89,
		"POOL_MEM":                             90,
		"POOL_STORAGE":                         91,
		"IMAGE_CPU":                            92,
		"IMAGE_MEM":                            93,
		"IMAGE_STORAGE":                        94,
		"INSTANCE_DISK_SIZE":                   95,
		"INSTANCE_DISK_TYPE":                   96,
		"BURST_BALANCE":                        97,
		"TEMPLATE_FAMILY":                      98,
		"DESIRED_COUPON":                       99,
		"VCPU_REQUEST":                         100,
		"VMEM_REQUEST":                         101,
		"CPU_REQUEST_ALLOCATION":               102,
		"MEM_REQUEST_ALLOCATION":               103,
		"NETWORK_INTERFACE_COUNT":              104,
		"BICLIQUE":                             105,
		"VCPU_LIMIT_QUOTA":                     106,
		"VMEM_LIMIT_QUOTA":                     107,
		"VCPU_REQUEST_QUOTA":                   108,
		"VMEM_REQUEST_QUOTA":                   109,
		"NUM_VCORE":                            110,
		"REMAINING_GC_CAPACITY":                111,
		"KPI":                                  112,
		"TOTAL_SESSIONS":                       113,
		"DTU":                                  114,
		"CONCURRENT_WORKER":                    115,
		"CONCURRENT_SESSION":                   116,
		"INSTANCE_DISK_COUNT":                  117,
		"NUMBER_REPLICAS":                      118,
		"VCPU_THROTTLING":                      119,
		"CPU_READY":                            120,
		"NET_THROUGHPUT_OUT":                   121,
		"NET_THROUGHPUT_IN":                    122,
		"IO_THROUGHPUT_READ":                   123,
		"IO_THROUGHPUT_WRITE":                  124,
		"STORAGE_ACCESS_SSD_READ":              125,
		"STORAGE_ACCESS_SSD_WRITE":             126,
		"STORAGE_ACCESS_STANDARD_READ":         127,
		"STORAGE_ACCESS_STANDARD_WRITE":        128,
		"TAINT":                                129,
		"LABEL":                                130,
		"HARDWARE_VERSION":                     131,
		"ENERGY":                               132,
		"PROCESSING_UNITS_PROVISIONED":         133,
		"CARBON":                               134,
		"DWU":                                  135,
		"CONCURRENT_QUERIES":                   136,
		"VIRTUAL_PROCESSORS":                   137,
		"GPU_ACCESS":                           138,
		"GPU_SLICE":                            139,
		"RU":                                   140,
		"GPU_MEM_SLICE":                        141,
		"GPU_MEM_ALLOCATION":                   142,
		"VGPU_MEM":                             143,
		"VGPU_COMPUTE":                         144,
		"PEER_TO_PEER_AFFINITY":                145,
		"PEER_TO_PEER_ANTI_AFFINITY":           146,
		"CORE_SPEED":                           147,
		"VGPU_TYPE_MEM":                        148,
		"GPU":                                  149,
		"GPU_MEM":                              150,
		"GPU_REQUEST":                          151,
		"GPU_REQUEST_QUOTA":                    152,
		"QUEUING_TIME":                         153,
		"SERVICE_TIME":                         154,
		"LLM_CACHE":                            155,
		"GPU_COUNT":                            156,
		"PCI_PASSTHROUGH_ACCESS":               157,
		"GPU_TENSOR_ENGINE":                    158,
		"GPU_FP64_ENGINE":                      159,
		"GPU_FP32_ENGINE":                      160,
		"GPU_MEMORY_BANDWIDTH":                 161,
		"GPU_FP16_ENGINE":                      162,
		"RAID_HOSTS":                           163,
		"LOGICAL_BLOCK_SIZE_ACCESS":            164,
		"POWER_CAPABILITY_ACCESS":              165,
		"STORAGE_ACCESS_HD_BALANCED_READWRITE": 166,
		"STORAGE_ACCESS_OVERALL_VM_MAX_READ":   167,
		"STORAGE_ACCESS_OVERALL_VM_MAX_WRITE":  168,
		"STORAGE_ACCESS_OVERALL_VM_MAX_READWRITE": 169,
		"IO_THROUGHPUT_HD_BALANCED_READWRITE":     170,
		"IO_THROUGHPUT_OVERALL_VM_MAX_READ":       171,
		"IO_THROUGHPUT_OVERALL_VM_MAX_WRITE":      172,
		"IO_THROUGHPUT_OVERALL_VM_MAX_READWRITE":  173,
		"UNKNOWN":                                 2047,
	}
)

func (x CommodityDTO_CommodityType) Enum() *CommodityDTO_CommodityType {
	p := new(CommodityDTO_CommodityType)
	*p = x
	return p
}

func (x CommodityDTO_CommodityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommodityDTO_CommodityType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[52].Descriptor()
}

func (CommodityDTO_CommodityType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[52]
}

func (x CommodityDTO_CommodityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommodityDTO_CommodityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommodityDTO_CommodityType(num)
	return nil
}

// Deprecated: Use CommodityDTO_CommodityType.Descriptor instead.
func (CommodityDTO_CommodityType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 0}
}

// Enumerates supported Group types
type GroupDTO_GroupType int32

const (
	GroupDTO_REGULAR  GroupDTO_GroupType = 0
	GroupDTO_RESOURCE GroupDTO_GroupType = 2
	// A host compute cluster is comprised of physical machines.
	GroupDTO_COMPUTE_HOST_CLUSTER GroupDTO_GroupType = 3
	// A virtual machine compute cluster is comprised of virtual machines.
	GroupDTO_COMPUTE_VIRTUAL_MACHINE_CLUSTER GroupDTO_GroupType = 4
	// A storage cluster is comprised of storages.
	GroupDTO_STORAGE_CLUSTER GroupDTO_GroupType = 5
	// A billing family is comprised of billing accounts.
	GroupDTO_BILLING_FAMILY GroupDTO_GroupType = 6
	// A node pool in container platform environments is comprised of virtual machines
	GroupDTO_NODE_POOL GroupDTO_GroupType = 7
	// A business account folder can contain business accounts and/or other business account folders.
	GroupDTO_BUSINESS_ACCOUNT_FOLDER GroupDTO_GroupType = 8
	// A parking group is a collection of heterogeneous parking-supported entities.
	GroupDTO_PARKING GroupDTO_GroupType = 9
)

// Enum value maps for GroupDTO_GroupType.
var (
	GroupDTO_GroupType_name = map[int32]string{
		0: "REGULAR",
		2: "RESOURCE",
		3: "COMPUTE_HOST_CLUSTER",
		4: "COMPUTE_VIRTUAL_MACHINE_CLUSTER",
		5: "STORAGE_CLUSTER",
		6: "BILLING_FAMILY",
		7: "NODE_POOL",
		8: "BUSINESS_ACCOUNT_FOLDER",
		9: "PARKING",
	}
	GroupDTO_GroupType_value = map[string]int32{
		"REGULAR":                         0,
		"RESOURCE":                        2,
		"COMPUTE_HOST_CLUSTER":            3,
		"COMPUTE_VIRTUAL_MACHINE_CLUSTER": 4,
		"STORAGE_CLUSTER":                 5,
		"BILLING_FAMILY":                  6,
		"NODE_POOL":                       7,
		"BUSINESS_ACCOUNT_FOLDER":         8,
		"PARKING":                         9,
	}
)

func (x GroupDTO_GroupType) Enum() *GroupDTO_GroupType {
	p := new(GroupDTO_GroupType)
	*p = x
	return p
}

func (x GroupDTO_GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupDTO_GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[53].Descriptor()
}

func (GroupDTO_GroupType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[53]
}

func (x GroupDTO_GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupDTO_GroupType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupDTO_GroupType(num)
	return nil
}

// Deprecated: Use GroupDTO_GroupType.Descriptor instead.
func (GroupDTO_GroupType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 0}
}

// Enum type notifying constraint's type
type GroupDTO_ConstraintType int32

const (
	GroupDTO_BUYER_SELLER_AFFINITY      GroupDTO_ConstraintType = 0
	GroupDTO_BUYER_SELLER_ANTI_AFFINITY GroupDTO_ConstraintType = 1
	GroupDTO_BUYER_BUYER_AFFINITY       GroupDTO_ConstraintType = 2
	GroupDTO_BUYER_BUYER_ANTI_AFFINITY  GroupDTO_ConstraintType = 3
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	GroupDTO_CLUSTER               GroupDTO_ConstraintType = 4
	GroupDTO_MERGE                 GroupDTO_ConstraintType = 5
	GroupDTO_SERVICE_LEVEL_CLUSTER GroupDTO_ConstraintType = 6
	GroupDTO_TEMPLATE_EXCLUSION    GroupDTO_ConstraintType = 7
	GroupDTO_LICENSE               GroupDTO_ConstraintType = 8
)

// Enum value maps for GroupDTO_ConstraintType.
var (
	GroupDTO_ConstraintType_name = map[int32]string{
		0: "BUYER_SELLER_AFFINITY",
		1: "BUYER_SELLER_ANTI_AFFINITY",
		2: "BUYER_BUYER_AFFINITY",
		3: "BUYER_BUYER_ANTI_AFFINITY",
		4: "CLUSTER",
		5: "MERGE",
		6: "SERVICE_LEVEL_CLUSTER",
		7: "TEMPLATE_EXCLUSION",
		8: "LICENSE",
	}
	GroupDTO_ConstraintType_value = map[string]int32{
		"BUYER_SELLER_AFFINITY":      0,
		"BUYER_SELLER_ANTI_AFFINITY": 1,
		"BUYER_BUYER_AFFINITY":       2,
		"BUYER_BUYER_ANTI_AFFINITY":  3,
		"CLUSTER":                    4,
		"MERGE":                      5,
		"SERVICE_LEVEL_CLUSTER":      6,
		"TEMPLATE_EXCLUSION":         7,
		"LICENSE":                    8,
	}
)

func (x GroupDTO_ConstraintType) Enum() *GroupDTO_ConstraintType {
	p := new(GroupDTO_ConstraintType)
	*p = x
	return p
}

func (x GroupDTO_ConstraintType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupDTO_ConstraintType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[54].Descriptor()
}

func (GroupDTO_ConstraintType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[54]
}

func (x GroupDTO_ConstraintType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupDTO_ConstraintType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupDTO_ConstraintType(num)
	return nil
}

// Deprecated: Use GroupDTO_ConstraintType.Descriptor instead.
func (GroupDTO_ConstraintType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 1}
}

// the type of setting.
type GroupDTO_Setting_SettingType int32

const (
	GroupDTO_Setting_VCPU_CORES_MIN_THRESHOLD              GroupDTO_Setting_SettingType = 1
	GroupDTO_Setting_VCPU_CORES_MAX_THRESHOLD              GroupDTO_Setting_SettingType = 2
	GroupDTO_Setting_MOVE_AUTOMATION_MODE                  GroupDTO_Setting_SettingType = 3
	GroupDTO_Setting_RESIZE_AUTOMATION_MODE                GroupDTO_Setting_SettingType = 4
	GroupDTO_Setting_RESPONSE_TIME_SLO                     GroupDTO_Setting_SettingType = 5
	GroupDTO_Setting_TRANSACTION_SLO                       GroupDTO_Setting_SettingType = 6
	GroupDTO_Setting_HORIZONTAL_SCALE_UP_AUTOMATION_MODE   GroupDTO_Setting_SettingType = 7
	GroupDTO_Setting_HORIZONTAL_SCALE_DOWN_AUTOMATION_MODE GroupDTO_Setting_SettingType = 8
	GroupDTO_Setting_MIN_REPLICAS                          GroupDTO_Setting_SettingType = 9
	GroupDTO_Setting_MAX_REPLICAS                          GroupDTO_Setting_SettingType = 10
	GroupDTO_Setting_MEM_OVER_PROVISIONED                  GroupDTO_Setting_SettingType = 11
	GroupDTO_Setting_ENFORCE_HYPERVISOR_METRICS            GroupDTO_Setting_SettingType = 12
	GroupDTO_Setting_VCPU_LIMIT_RESIZE_MAX                 GroupDTO_Setting_SettingType = 13
	GroupDTO_Setting_VCPU_LIMIT_RESIZE_MIN                 GroupDTO_Setting_SettingType = 14
	GroupDTO_Setting_VCPU_LIMIT_RESIZE_ABOVE_MAX           GroupDTO_Setting_SettingType = 15
	GroupDTO_Setting_VCPU_LIMIT_RESIZE_BELOW_MIN           GroupDTO_Setting_SettingType = 16
	GroupDTO_Setting_VCPU_REQUEST_RESIZE_MIN               GroupDTO_Setting_SettingType = 17
	GroupDTO_Setting_VCPU_REQUEST_RESIZE_BELOW_MIN         GroupDTO_Setting_SettingType = 18
	GroupDTO_Setting_VMEM_LIMIT_RESIZE_MAX                 GroupDTO_Setting_SettingType = 19
	GroupDTO_Setting_VMEM_LIMIT_RESIZE_MIN                 GroupDTO_Setting_SettingType = 20
	GroupDTO_Setting_VMEM_LIMIT_RESIZE_ABOVE_MAX           GroupDTO_Setting_SettingType = 21
	GroupDTO_Setting_VMEM_LIMIT_RESIZE_BELOW_MIN           GroupDTO_Setting_SettingType = 22
	GroupDTO_Setting_VMEM_REQUEST_RESIZE_MIN               GroupDTO_Setting_SettingType = 23
	GroupDTO_Setting_VMEM_REQUEST_RESIZE_BELOW_MIN         GroupDTO_Setting_SettingType = 24
	GroupDTO_Setting_INCREMENT_RESIZE_CONSTANT_VCPU        GroupDTO_Setting_SettingType = 25
	GroupDTO_Setting_INCREMENT_RESIZE_CONSTANT_VMEM        GroupDTO_Setting_SettingType = 26
	GroupDTO_Setting_RATE_OF_RESIZE                        GroupDTO_Setting_SettingType = 27
	GroupDTO_Setting_AGGRESSIVENESS                        GroupDTO_Setting_SettingType = 28
	// The observation period settings (29 and 30) will map to the container spec entity
	// settings. Since the name of setting type is not specific to container spec, this is
	// bound to cause confusion. Also, due to backwards compatibility, the name will not be
	// changed.
	GroupDTO_Setting_MIN_OBSERVATION_PERIOD                  GroupDTO_Setting_SettingType = 29
	GroupDTO_Setting_MAX_OBSERVATION_PERIOD                  GroupDTO_Setting_SettingType = 30
	GroupDTO_Setting_VCPU_MAX_THROTTLING_TOLERANCE           GroupDTO_Setting_SettingType = 31
	GroupDTO_Setting_MIN_OBSERVATION_PERIOD_VM               GroupDTO_Setting_SettingType = 32
	GroupDTO_Setting_MAX_OBSERVATION_PERIOD_VM               GroupDTO_Setting_SettingType = 33
	GroupDTO_Setting_QUEUING_TIME_SLO                        GroupDTO_Setting_SettingType = 34
	GroupDTO_Setting_SERVICE_TIME_SLO                        GroupDTO_Setting_SettingType = 35
	GroupDTO_Setting_CONCURRENT_QUERIES_SLO                  GroupDTO_Setting_SettingType = 36
	GroupDTO_Setting_VCPU_REQUEST_RESIZE_ABOVE_MAX           GroupDTO_Setting_SettingType = 37
	GroupDTO_Setting_VMEM_REQUEST_RESIZE_ABOVE_MAX           GroupDTO_Setting_SettingType = 38
	GroupDTO_Setting_VIRTUAL_MACHINE_SUSPEND_AUTOMATION_MODE GroupDTO_Setting_SettingType = 39
	// Reconfigure is not typically automatable but this is to control action generation
	// between NOT_SUPPORTED (not generated) and _NOT_EXECUTABLE (recommended)
	GroupDTO_Setting_RECONFIGURE_AUTOMATION_MODE            GroupDTO_Setting_SettingType = 40
	GroupDTO_Setting_VCPU_REQUEST_RESIZE_MAX                GroupDTO_Setting_SettingType = 41
	GroupDTO_Setting_VMEM_REQUEST_RESIZE_MAX                GroupDTO_Setting_SettingType = 42
	GroupDTO_Setting_INCREMENT_RESIZE_CONSTANT_VCPU_REQUEST GroupDTO_Setting_SettingType = 43
	GroupDTO_Setting_INCREMENT_RESIZE_CONSTANT_VMEM_REQUEST GroupDTO_Setting_SettingType = 44
	GroupDTO_Setting_LLM_CACHE_SLO                          GroupDTO_Setting_SettingType = 45
)

// Enum value maps for GroupDTO_Setting_SettingType.
var (
	GroupDTO_Setting_SettingType_name = map[int32]string{
		1:  "VCPU_CORES_MIN_THRESHOLD",
		2:  "VCPU_CORES_MAX_THRESHOLD",
		3:  "MOVE_AUTOMATION_MODE",
		4:  "RESIZE_AUTOMATION_MODE",
		5:  "RESPONSE_TIME_SLO",
		6:  "TRANSACTION_SLO",
		7:  "HORIZONTAL_SCALE_UP_AUTOMATION_MODE",
		8:  "HORIZONTAL_SCALE_DOWN_AUTOMATION_MODE",
		9:  "MIN_REPLICAS",
		10: "MAX_REPLICAS",
		11: "MEM_OVER_PROVISIONED",
		12: "ENFORCE_HYPERVISOR_METRICS",
		13: "VCPU_LIMIT_RESIZE_MAX",
		14: "VCPU_LIMIT_RESIZE_MIN",
		15: "VCPU_LIMIT_RESIZE_ABOVE_MAX",
		16: "VCPU_LIMIT_RESIZE_BELOW_MIN",
		17: "VCPU_REQUEST_RESIZE_MIN",
		18: "VCPU_REQUEST_RESIZE_BELOW_MIN",
		19: "VMEM_LIMIT_RESIZE_MAX",
		20: "VMEM_LIMIT_RESIZE_MIN",
		21: "VMEM_LIMIT_RESIZE_ABOVE_MAX",
		22: "VMEM_LIMIT_RESIZE_BELOW_MIN",
		23: "VMEM_REQUEST_RESIZE_MIN",
		24: "VMEM_REQUEST_RESIZE_BELOW_MIN",
		25: "INCREMENT_RESIZE_CONSTANT_VCPU",
		26: "INCREMENT_RESIZE_CONSTANT_VMEM",
		27: "RATE_OF_RESIZE",
		28: "AGGRESSIVENESS",
		29: "MIN_OBSERVATION_PERIOD",
		30: "MAX_OBSERVATION_PERIOD",
		31: "VCPU_MAX_THROTTLING_TOLERANCE",
		32: "MIN_OBSERVATION_PERIOD_VM",
		33: "MAX_OBSERVATION_PERIOD_VM",
		34: "QUEUING_TIME_SLO",
		35: "SERVICE_TIME_SLO",
		36: "CONCURRENT_QUERIES_SLO",
		37: "VCPU_REQUEST_RESIZE_ABOVE_MAX",
		38: "VMEM_REQUEST_RESIZE_ABOVE_MAX",
		39: "VIRTUAL_MACHINE_SUSPEND_AUTOMATION_MODE",
		40: "RECONFIGURE_AUTOMATION_MODE",
		41: "VCPU_REQUEST_RESIZE_MAX",
		42: "VMEM_REQUEST_RESIZE_MAX",
		43: "INCREMENT_RESIZE_CONSTANT_VCPU_REQUEST",
		44: "INCREMENT_RESIZE_CONSTANT_VMEM_REQUEST",
		45: "LLM_CACHE_SLO",
	}
	GroupDTO_Setting_SettingType_value = map[string]int32{
		"VCPU_CORES_MIN_THRESHOLD":                1,
		"VCPU_CORES_MAX_THRESHOLD":                2,
		"MOVE_AUTOMATION_MODE":                    3,
		"RESIZE_AUTOMATION_MODE":                  4,
		"RESPONSE_TIME_SLO":                       5,
		"TRANSACTION_SLO":                         6,
		"HORIZONTAL_SCALE_UP_AUTOMATION_MODE":     7,
		"HORIZONTAL_SCALE_DOWN_AUTOMATION_MODE":   8,
		"MIN_REPLICAS":                            9,
		"MAX_REPLICAS":                            10,
		"MEM_OVER_PROVISIONED":                    11,
		"ENFORCE_HYPERVISOR_METRICS":              12,
		"VCPU_LIMIT_RESIZE_MAX":                   13,
		"VCPU_LIMIT_RESIZE_MIN":                   14,
		"VCPU_LIMIT_RESIZE_ABOVE_MAX":             15,
		"VCPU_LIMIT_RESIZE_BELOW_MIN":             16,
		"VCPU_REQUEST_RESIZE_MIN":                 17,
		"VCPU_REQUEST_RESIZE_BELOW_MIN":           18,
		"VMEM_LIMIT_RESIZE_MAX":                   19,
		"VMEM_LIMIT_RESIZE_MIN":                   20,
		"VMEM_LIMIT_RESIZE_ABOVE_MAX":             21,
		"VMEM_LIMIT_RESIZE_BELOW_MIN":             22,
		"VMEM_REQUEST_RESIZE_MIN":                 23,
		"VMEM_REQUEST_RESIZE_BELOW_MIN":           24,
		"INCREMENT_RESIZE_CONSTANT_VCPU":          25,
		"INCREMENT_RESIZE_CONSTANT_VMEM":          26,
		"RATE_OF_RESIZE":                          27,
		"AGGRESSIVENESS":                          28,
		"MIN_OBSERVATION_PERIOD":                  29,
		"MAX_OBSERVATION_PERIOD":                  30,
		"VCPU_MAX_THROTTLING_TOLERANCE":           31,
		"MIN_OBSERVATION_PERIOD_VM":               32,
		"MAX_OBSERVATION_PERIOD_VM":               33,
		"QUEUING_TIME_SLO":                        34,
		"SERVICE_TIME_SLO":                        35,
		"CONCURRENT_QUERIES_SLO":                  36,
		"VCPU_REQUEST_RESIZE_ABOVE_MAX":           37,
		"VMEM_REQUEST_RESIZE_ABOVE_MAX":           38,
		"VIRTUAL_MACHINE_SUSPEND_AUTOMATION_MODE": 39,
		"RECONFIGURE_AUTOMATION_MODE":             40,
		"VCPU_REQUEST_RESIZE_MAX":                 41,
		"VMEM_REQUEST_RESIZE_MAX":                 42,
		"INCREMENT_RESIZE_CONSTANT_VCPU_REQUEST":  43,
		"INCREMENT_RESIZE_CONSTANT_VMEM_REQUEST":  44,
		"LLM_CACHE_SLO":                           45,
	}
)

func (x GroupDTO_Setting_SettingType) Enum() *GroupDTO_Setting_SettingType {
	p := new(GroupDTO_Setting_SettingType)
	*p = x
	return p
}

func (x GroupDTO_Setting_SettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupDTO_Setting_SettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[55].Descriptor()
}

func (GroupDTO_Setting_SettingType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[55]
}

func (x GroupDTO_Setting_SettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupDTO_Setting_SettingType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupDTO_Setting_SettingType(num)
	return nil
}

// Deprecated: Use GroupDTO_Setting_SettingType.Descriptor instead.
func (GroupDTO_Setting_SettingType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8, 0}
}

// Enum notifying expression type used to match entities' property value
// with target value in SelectionSpec
type GroupDTO_SelectionSpec_ExpressionType int32

const (
	GroupDTO_SelectionSpec_EQUAL_TO                 GroupDTO_SelectionSpec_ExpressionType = 0
	GroupDTO_SelectionSpec_NOT_EQUAL_TO             GroupDTO_SelectionSpec_ExpressionType = 1
	GroupDTO_SelectionSpec_LARGER_THAN              GroupDTO_SelectionSpec_ExpressionType = 2
	GroupDTO_SelectionSpec_LARGER_THAN_OR_EQUAL_TO  GroupDTO_SelectionSpec_ExpressionType = 3
	GroupDTO_SelectionSpec_SMALLER_THAN             GroupDTO_SelectionSpec_ExpressionType = 4
	GroupDTO_SelectionSpec_SMALLER_THAN_OR_EQUAL_TO GroupDTO_SelectionSpec_ExpressionType = 5
	GroupDTO_SelectionSpec_CONTAINS                 GroupDTO_SelectionSpec_ExpressionType = 6
	GroupDTO_SelectionSpec_NOT_CONTAINS             GroupDTO_SelectionSpec_ExpressionType = 7
	GroupDTO_SelectionSpec_CONTAINED_BY             GroupDTO_SelectionSpec_ExpressionType = 8
	GroupDTO_SelectionSpec_NOT_CONTAINED_BY         GroupDTO_SelectionSpec_ExpressionType = 9
	GroupDTO_SelectionSpec_REGEX                    GroupDTO_SelectionSpec_ExpressionType = 10
	GroupDTO_SelectionSpec_LIST_OVERLAP             GroupDTO_SelectionSpec_ExpressionType = 11
	GroupDTO_SelectionSpec_LIST_NOT_OVERLAP         GroupDTO_SelectionSpec_ExpressionType = 12
	GroupDTO_SelectionSpec_LIST_FULL_CONTAINS       GroupDTO_SelectionSpec_ExpressionType = 13
	GroupDTO_SelectionSpec_LIST_FULL_CONTAINED_BY   GroupDTO_SelectionSpec_ExpressionType = 14
)

// Enum value maps for GroupDTO_SelectionSpec_ExpressionType.
var (
	GroupDTO_SelectionSpec_ExpressionType_name = map[int32]string{
		0:  "EQUAL_TO",
		1:  "NOT_EQUAL_TO",
		2:  "LARGER_THAN",
		3:  "LARGER_THAN_OR_EQUAL_TO",
		4:  "SMALLER_THAN",
		5:  "SMALLER_THAN_OR_EQUAL_TO",
		6:  "CONTAINS",
		7:  "NOT_CONTAINS",
		8:  "CONTAINED_BY",
		9:  "NOT_CONTAINED_BY",
		10: "REGEX",
		11: "LIST_OVERLAP",
		12: "LIST_NOT_OVERLAP",
		13: "LIST_FULL_CONTAINS",
		14: "LIST_FULL_CONTAINED_BY",
	}
	GroupDTO_SelectionSpec_ExpressionType_value = map[string]int32{
		"EQUAL_TO":                 0,
		"NOT_EQUAL_TO":             1,
		"LARGER_THAN":              2,
		"LARGER_THAN_OR_EQUAL_TO":  3,
		"SMALLER_THAN":             4,
		"SMALLER_THAN_OR_EQUAL_TO": 5,
		"CONTAINS":                 6,
		"NOT_CONTAINS":             7,
		"CONTAINED_BY":             8,
		"NOT_CONTAINED_BY":         9,
		"REGEX":                    10,
		"LIST_OVERLAP":             11,
		"LIST_NOT_OVERLAP":         12,
		"LIST_FULL_CONTAINS":       13,
		"LIST_FULL_CONTAINED_BY":   14,
	}
)

func (x GroupDTO_SelectionSpec_ExpressionType) Enum() *GroupDTO_SelectionSpec_ExpressionType {
	p := new(GroupDTO_SelectionSpec_ExpressionType)
	*p = x
	return p
}

func (x GroupDTO_SelectionSpec_ExpressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupDTO_SelectionSpec_ExpressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[56].Descriptor()
}

func (GroupDTO_SelectionSpec_ExpressionType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[56]
}

func (x GroupDTO_SelectionSpec_ExpressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GroupDTO_SelectionSpec_ExpressionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GroupDTO_SelectionSpec_ExpressionType(num)
	return nil
}

// Deprecated: Use GroupDTO_SelectionSpec_ExpressionType.Descriptor instead.
func (GroupDTO_SelectionSpec_ExpressionType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 9, 0}
}

type NotificationDTO_Severity int32

const (
	NotificationDTO_UNKNOWN  NotificationDTO_Severity = 0
	NotificationDTO_NORMAL   NotificationDTO_Severity = 1
	NotificationDTO_MINOR    NotificationDTO_Severity = 2
	NotificationDTO_MAJOR    NotificationDTO_Severity = 3
	NotificationDTO_CRITICAL NotificationDTO_Severity = 4
)

// Enum value maps for NotificationDTO_Severity.
var (
	NotificationDTO_Severity_name = map[int32]string{
		0: "UNKNOWN",
		1: "NORMAL",
		2: "MINOR",
		3: "MAJOR",
		4: "CRITICAL",
	}
	NotificationDTO_Severity_value = map[string]int32{
		"UNKNOWN":  0,
		"NORMAL":   1,
		"MINOR":    2,
		"MAJOR":    3,
		"CRITICAL": 4,
	}
)

func (x NotificationDTO_Severity) Enum() *NotificationDTO_Severity {
	p := new(NotificationDTO_Severity)
	*p = x
	return p
}

func (x NotificationDTO_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationDTO_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[57].Descriptor()
}

func (NotificationDTO_Severity) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[57]
}

func (x NotificationDTO_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NotificationDTO_Severity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NotificationDTO_Severity(num)
	return nil
}

// Deprecated: Use NotificationDTO_Severity.Descriptor instead.
func (NotificationDTO_Severity) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{7, 0}
}

type CustomTypeDef_MetadataNamespace int32

const (
	CustomTypeDef_UNKNOWN            CustomTypeDef_MetadataNamespace = 0
	CustomTypeDef_NETWORK_POLICY_EPG CustomTypeDef_MetadataNamespace = 1
)

// Enum value maps for CustomTypeDef_MetadataNamespace.
var (
	CustomTypeDef_MetadataNamespace_name = map[int32]string{
		0: "UNKNOWN",
		1: "NETWORK_POLICY_EPG",
	}
	CustomTypeDef_MetadataNamespace_value = map[string]int32{
		"UNKNOWN":            0,
		"NETWORK_POLICY_EPG": 1,
	}
)

func (x CustomTypeDef_MetadataNamespace) Enum() *CustomTypeDef_MetadataNamespace {
	p := new(CustomTypeDef_MetadataNamespace)
	*p = x
	return p
}

func (x CustomTypeDef_MetadataNamespace) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTypeDef_MetadataNamespace) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[58].Descriptor()
}

func (CustomTypeDef_MetadataNamespace) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[58]
}

func (x CustomTypeDef_MetadataNamespace) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CustomTypeDef_MetadataNamespace) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CustomTypeDef_MetadataNamespace(num)
	return nil
}

// Deprecated: Use CustomTypeDef_MetadataNamespace.Descriptor instead.
func (CustomTypeDef_MetadataNamespace) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{8, 0}
}

// Only TCP and UDP are supported.
type FlowDTO_Protocol int32

const (
	FlowDTO_TCP           FlowDTO_Protocol = 1
	FlowDTO_UDP           FlowDTO_Protocol = 2
	FlowDTO_UNKNOWN_PROTO FlowDTO_Protocol = 1000
)

// Enum value maps for FlowDTO_Protocol.
var (
	FlowDTO_Protocol_name = map[int32]string{
		1:    "TCP",
		2:    "UDP",
		1000: "UNKNOWN_PROTO",
	}
	FlowDTO_Protocol_value = map[string]int32{
		"TCP":           1,
		"UDP":           2,
		"UNKNOWN_PROTO": 1000,
	}
)

func (x FlowDTO_Protocol) Enum() *FlowDTO_Protocol {
	p := new(FlowDTO_Protocol)
	*p = x
	return p
}

func (x FlowDTO_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlowDTO_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[59].Descriptor()
}

func (FlowDTO_Protocol) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[59]
}

func (x FlowDTO_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FlowDTO_Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FlowDTO_Protocol(num)
	return nil
}

// Deprecated: Use FlowDTO_Protocol.Descriptor instead.
func (FlowDTO_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{12, 0}
}

// The type of tag
type ExternalTag_TagType int32

const (
	ExternalTag_UNKNOWN_TAG        ExternalTag_TagType = 0
	ExternalTag_TAG_DIMENSION      ExternalTag_TagType = 1
	ExternalTag_BUSINESS_DIMENSION ExternalTag_TagType = 2
	ExternalTag_BUSINESS_METRIC    ExternalTag_TagType = 3
)

// Enum value maps for ExternalTag_TagType.
var (
	ExternalTag_TagType_name = map[int32]string{
		0: "UNKNOWN_TAG",
		1: "TAG_DIMENSION",
		2: "BUSINESS_DIMENSION",
		3: "BUSINESS_METRIC",
	}
	ExternalTag_TagType_value = map[string]int32{
		"UNKNOWN_TAG":        0,
		"TAG_DIMENSION":      1,
		"BUSINESS_DIMENSION": 2,
		"BUSINESS_METRIC":    3,
	}
)

func (x ExternalTag_TagType) Enum() *ExternalTag_TagType {
	p := new(ExternalTag_TagType)
	*p = x
	return p
}

func (x ExternalTag_TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalTag_TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_CommonDTO_proto_enumTypes[60].Descriptor()
}

func (ExternalTag_TagType) Type() protoreflect.EnumType {
	return &file_CommonDTO_proto_enumTypes[60]
}

func (x ExternalTag_TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExternalTag_TagType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExternalTag_TagType(num)
	return nil
}

// Deprecated: Use ExternalTag_TagType.Descriptor instead.
func (ExternalTag_TagType) EnumDescriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{16, 0}
}

// The EntityDTO message represents an Entity discovered in the target that your probe is
// monitoring
//
// Each entity must have a unique ID to identify it in the Operations Manager market.
// Many targets provide unique IDs for their entities, or you can generate your own.
// To guarantee that it's unique, you can give the ID a prefix that identifies your
// probe and the given target.
//
// Specify entity type by setting an 'EntityType' value to the 'entity' field.
//
// The 'displayName' value appears in the product GUI and in reports to identify the entity.
//
// An entity can maintain a list of commodities that it sells (see 'CommodityDTO').
//
// An entity can maintain a map of commodities bought (see {@code CommodityDTO}). Each map key is the unique ID of the
// provider entity. For each provider, the map entry is a list of the commodities bought from that provider.
//
// The entity's list of properties stores metadata about the entity - for example, you would store
// the entity's IP address as a property. To stitch this entity into the Operations Manager topology,
// you will create an ExternalEntityLink. That link includes the properties
// that Operations Manager can use to match the discovered entity and stitch it in.
type EntityDTO struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	EntityType  *EntityDTO_EntityType  `protobuf:"varint,1,req,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	Id          *string                `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	DisplayName *string                `protobuf:"bytes,3,opt,name=displayName" json:"displayName,omitempty"`
	// The {@link CommodityDTO} items this entity sells to its consumers.
	// This is a map of sold commodities where
	CommoditiesSold []*CommodityDTO `protobuf:"bytes,4,rep,name=commoditiesSold" json:"commoditiesSold,omitempty"`
	// The {@link CommodityDTO} items this entity buys from the different providers.
	// This is a map of bought commodities where:<ul>
	CommoditiesBought []*EntityDTO_CommodityBought `protobuf:"bytes,5,rep,name=commoditiesBought" json:"commoditiesBought,omitempty"`
	// List of the IDs of the entities that this entity is underlying. For example, an IO Module can underly
	// physical machines, or a physical machine can underly datastores.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	Underlying []string `protobuf:"bytes,6,rep,name=underlying" json:"underlying,omitempty"`
	// list of <string, string, string> namespace, key, value triplets
	EntityProperties []*EntityDTO_EntityProperty `protobuf:"bytes,7,rep,name=entityProperties" json:"entityProperties,omitempty"`
	// Specifies the source of the entity (ie DISCOVERED or PROXY).
	// For further details see the comments for EntityOrigin.
	Origin *EntityDTO_EntityOrigin `protobuf:"varint,8,opt,name=origin,enum=common_dto.EntityDTO_EntityOrigin,def=1" json:"origin,omitempty"`
	// Proxy entities may be replaced by entities discovered by another probe.
	// Some proxy entities are aware of the entity replacing them based on a set of property values.
	// Before replacing they may also transfer the commodity data to the server entity
	ReplacementEntityData *EntityDTO_ReplacementEntityMetaData `protobuf:"bytes,9,opt,name=replacementEntityData" json:"replacementEntityData,omitempty"`
	// Specifies if the entity is monitored or not.
	// If this field is false, state of the entity will be set to NOT_MONITORED in server.
	// NOT_MONITORED state will imply that the entity is not participating in the Market Analysis.
	Monitored *bool `protobuf:"varint,10,opt,name=monitored,def=1" json:"monitored,omitempty"`
	// Specifies the power state of the entity.
	PowerState *EntityDTO_PowerState `protobuf:"varint,11,opt,name=powerState,enum=common_dto.EntityDTO_PowerState,def=1" json:"powerState,omitempty"`
	// Specified properties required for the behavior of the entity as a consumer.
	ConsumerPolicy *EntityDTO_ConsumerPolicy `protobuf:"bytes,12,opt,name=consumerPolicy" json:"consumerPolicy,omitempty"`
	// Specified properties required for the behavior of the entity as a provider.
	ProviderPolicy *EntityDTO_ProviderPolicy `protobuf:"bytes,13,opt,name=providerPolicy" json:"providerPolicy,omitempty"`
	// Specifies ID of the entity that this entity is owned by. For example, an Chassis is
	// owned by Network.
	OwnedBy *string `protobuf:"bytes,14,opt,name=ownedBy" json:"ownedBy,omitempty"`
	// Notifications associated with the entity
	Notification []*NotificationDTO `protobuf:"bytes,15,rep,name=notification" json:"notification,omitempty"`
	// This flag indicates if proxy entity should be kept in repository if it cannot be merged
	// with any real entity. The flag has effect on proxy entities only.
	KeepStandalone *bool `protobuf:"varint,16,opt,name=keepStandalone,def=1" json:"keepStandalone,omitempty"`
	// If there is a related profile, the id can be specified here
	ProfileId *string `protobuf:"bytes,17,opt,name=profileId" json:"profileId,omitempty"`
	// Specifies entity DTO type (can be a new/existing entity or deleted entity).
	UpdateType *UpdateType `protobuf:"varint,18,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
	// List of the IDs of the entities that this entity is layeredOver. For example, a datastore
	// can be layeredOver physical machines; a physical machine can be layeredOver IO Module.
	LayeredOver []string `protobuf:"bytes,19,rep,name=layeredOver" json:"layeredOver,omitempty"`
	// An entity may replace one or more other entities in the topology
	// This attribute allows specification of specific entity or entities to replace based on
	// their id. For example - a VDC may replace a set of resource pools
	ReplacesEntityId []string `protobuf:"bytes,20,rep,name=replacesEntityId" json:"replacesEntityId,omitempty"`
	// Notifies if the entity is in maintenance.
	Maintenance *bool `protobuf:"varint,21,opt,name=maintenance,def=0" json:"maintenance,omitempty"`
	// List of the IDs of the entities that this entity consists of. For example, a
	// master account consists of sub accounts.
	ConsistsOf []string `protobuf:"bytes,22,rep,name=consistsOf" json:"consistsOf,omitempty"`
	// Contains all settings regarding the eligibility of the entity for different actions.
	ActionEligibility *EntityDTO_ActionEligibility `protobuf:"bytes,23,opt,name=actionEligibility" json:"actionEligibility,omitempty"`
	// List of entities that are topologically connected with the entity that this probuf defines.
	ConnectedEntities []*ConnectedEntity `protobuf:"bytes,24,rep,name=connectedEntities" json:"connectedEntities,omitempty"`
	// Turbonomic assigns an identifier to all the entities it knows about. This is a read only
	// field. Submitting an EntityDTO with a turbonomicInternalId will have no effect.
	// Currently used in external orchestration when external action execution needs to access
	// information about the entity not available through external orchestration. For instance,
	// an action script might want to look at a VMs historical usage before executing an action.
	TurbonomicInternalId *int64                    `protobuf:"varint,25,opt,name=turbonomicInternalId" json:"turbonomicInternalId,omitempty"`
	Details              []*EntityDTO_EntityDetail `protobuf:"bytes,26,rep,name=details" json:"details,omitempty"`
	// The number of milliseconds since January 1, 1970, 00:00:00 GMT
	CreationTimeStamp *int64 `protobuf:"varint,27,opt,name=creationTimeStamp" json:"creationTimeStamp,omitempty"`
	// Collection of entity type's specific data
	//
	// Types that are valid to be assigned to EntityData:
	//
	//	*EntityDTO_StorageData_
	//	*EntityDTO_DiskArrayData_
	//	*EntityDTO_ApplicationData_
	//	*EntityDTO_VirtualMachineData_
	//	*EntityDTO_PhysicalMachineData_
	//	*EntityDTO_VirtualDatacenterData_
	//	*EntityDTO_StorageControllerData_
	//	*EntityDTO_LogicalPoolData_
	//	*EntityDTO_VirtualApplicationData_
	//	*EntityDTO_ProcessorPoolData_
	//	*EntityDTO_ReservedInstanceData_
	//	*EntityDTO_ContainerPodData_
	//	*EntityDTO_ContainerData_
	//	*EntityDTO_BusinessAccountData_
	//	*EntityDTO_ComputeTierData_
	//	*EntityDTO_VirtualVolumeData_
	//	*EntityDTO_BusinessUserData_
	//	*EntityDTO_RegionData_
	//	*EntityDTO_WorkloadControllerData_
	//	*EntityDTO_DatabaseTierData_
	//	*EntityDTO_DatabaseServerTierData_
	//	*EntityDTO_ServiceData_
	//	*EntityDTO_CloudCommitmentData_
	//	*EntityDTO_NamespaceData_
	//	*EntityDTO_ContainerPlatformClusterData_
	//	*EntityDTO_ApplicationServiceData_
	//	*EntityDTO_ContainerSpecData_
	//	*EntityDTO_NetworkData_
	//	*EntityDTO_StorageTierData_
	//	*EntityDTO_CapacityOptionData_
	//	*EntityDTO_VirtualMachineSpecData_
	//	*EntityDTO_DataWarehouseTierData_
	//	*EntityDTO_RepositoryData_
	EntityData isEntityDTO_EntityData `protobuf_oneof:"entity_data"`
	// Data for entities related to the given entity but not specifically part of the
	// the market. For example, PhysicalMachines are related to
	// Memory, Processor, and IO entities through a composedOf relationship.
	//
	// Types that are valid to be assigned to RelatedEntityData:
	//
	//	*EntityDTO_VirtualMachineRelatedData_
	//	*EntityDTO_PhysicalMachineRelatedData_
	//	*EntityDTO_StorageControllerRelatedData_
	RelatedEntityData isEntityDTO_RelatedEntityData `protobuf_oneof:"related_entity_data"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for EntityDTO fields.
const (
	Default_EntityDTO_Origin         = EntityDTO_DISCOVERED
	Default_EntityDTO_Monitored      = bool(true)
	Default_EntityDTO_PowerState     = EntityDTO_POWERED_ON
	Default_EntityDTO_KeepStandalone = bool(true)
	Default_EntityDTO_UpdateType     = UpdateType_UPDATED
	Default_EntityDTO_Maintenance    = bool(false)
)

func (x *EntityDTO) Reset() {
	*x = EntityDTO{}
	mi := &file_CommonDTO_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO) ProtoMessage() {}

func (x *EntityDTO) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO.ProtoReflect.Descriptor instead.
func (*EntityDTO) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0}
}

func (x *EntityDTO) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *EntityDTO) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityDTO) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityDTO) GetCommoditiesSold() []*CommodityDTO {
	if x != nil {
		return x.CommoditiesSold
	}
	return nil
}

func (x *EntityDTO) GetCommoditiesBought() []*EntityDTO_CommodityBought {
	if x != nil {
		return x.CommoditiesBought
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO) GetUnderlying() []string {
	if x != nil {
		return x.Underlying
	}
	return nil
}

func (x *EntityDTO) GetEntityProperties() []*EntityDTO_EntityProperty {
	if x != nil {
		return x.EntityProperties
	}
	return nil
}

func (x *EntityDTO) GetOrigin() EntityDTO_EntityOrigin {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return Default_EntityDTO_Origin
}

func (x *EntityDTO) GetReplacementEntityData() *EntityDTO_ReplacementEntityMetaData {
	if x != nil {
		return x.ReplacementEntityData
	}
	return nil
}

func (x *EntityDTO) GetMonitored() bool {
	if x != nil && x.Monitored != nil {
		return *x.Monitored
	}
	return Default_EntityDTO_Monitored
}

func (x *EntityDTO) GetPowerState() EntityDTO_PowerState {
	if x != nil && x.PowerState != nil {
		return *x.PowerState
	}
	return Default_EntityDTO_PowerState
}

func (x *EntityDTO) GetConsumerPolicy() *EntityDTO_ConsumerPolicy {
	if x != nil {
		return x.ConsumerPolicy
	}
	return nil
}

func (x *EntityDTO) GetProviderPolicy() *EntityDTO_ProviderPolicy {
	if x != nil {
		return x.ProviderPolicy
	}
	return nil
}

func (x *EntityDTO) GetOwnedBy() string {
	if x != nil && x.OwnedBy != nil {
		return *x.OwnedBy
	}
	return ""
}

func (x *EntityDTO) GetNotification() []*NotificationDTO {
	if x != nil {
		return x.Notification
	}
	return nil
}

func (x *EntityDTO) GetKeepStandalone() bool {
	if x != nil && x.KeepStandalone != nil {
		return *x.KeepStandalone
	}
	return Default_EntityDTO_KeepStandalone
}

func (x *EntityDTO) GetProfileId() string {
	if x != nil && x.ProfileId != nil {
		return *x.ProfileId
	}
	return ""
}

func (x *EntityDTO) GetUpdateType() UpdateType {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return Default_EntityDTO_UpdateType
}

func (x *EntityDTO) GetLayeredOver() []string {
	if x != nil {
		return x.LayeredOver
	}
	return nil
}

func (x *EntityDTO) GetReplacesEntityId() []string {
	if x != nil {
		return x.ReplacesEntityId
	}
	return nil
}

func (x *EntityDTO) GetMaintenance() bool {
	if x != nil && x.Maintenance != nil {
		return *x.Maintenance
	}
	return Default_EntityDTO_Maintenance
}

func (x *EntityDTO) GetConsistsOf() []string {
	if x != nil {
		return x.ConsistsOf
	}
	return nil
}

func (x *EntityDTO) GetActionEligibility() *EntityDTO_ActionEligibility {
	if x != nil {
		return x.ActionEligibility
	}
	return nil
}

func (x *EntityDTO) GetConnectedEntities() []*ConnectedEntity {
	if x != nil {
		return x.ConnectedEntities
	}
	return nil
}

func (x *EntityDTO) GetTurbonomicInternalId() int64 {
	if x != nil && x.TurbonomicInternalId != nil {
		return *x.TurbonomicInternalId
	}
	return 0
}

func (x *EntityDTO) GetDetails() []*EntityDTO_EntityDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *EntityDTO) GetCreationTimeStamp() int64 {
	if x != nil && x.CreationTimeStamp != nil {
		return *x.CreationTimeStamp
	}
	return 0
}

func (x *EntityDTO) GetEntityData() isEntityDTO_EntityData {
	if x != nil {
		return x.EntityData
	}
	return nil
}

func (x *EntityDTO) GetStorageData() *EntityDTO_StorageData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_StorageData_); ok {
			return x.StorageData
		}
	}
	return nil
}

func (x *EntityDTO) GetDiskArrayData() *EntityDTO_DiskArrayData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_DiskArrayData_); ok {
			return x.DiskArrayData
		}
	}
	return nil
}

func (x *EntityDTO) GetApplicationData() *EntityDTO_ApplicationData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ApplicationData_); ok {
			return x.ApplicationData
		}
	}
	return nil
}

func (x *EntityDTO) GetVirtualMachineData() *EntityDTO_VirtualMachineData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_VirtualMachineData_); ok {
			return x.VirtualMachineData
		}
	}
	return nil
}

func (x *EntityDTO) GetPhysicalMachineData() *EntityDTO_PhysicalMachineData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_PhysicalMachineData_); ok {
			return x.PhysicalMachineData
		}
	}
	return nil
}

func (x *EntityDTO) GetVirtualDatacenterData() *EntityDTO_VirtualDatacenterData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_VirtualDatacenterData_); ok {
			return x.VirtualDatacenterData
		}
	}
	return nil
}

func (x *EntityDTO) GetStorageControllerData() *EntityDTO_StorageControllerData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_StorageControllerData_); ok {
			return x.StorageControllerData
		}
	}
	return nil
}

func (x *EntityDTO) GetLogicalPoolData() *EntityDTO_LogicalPoolData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_LogicalPoolData_); ok {
			return x.LogicalPoolData
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO) GetVirtualApplicationData() *EntityDTO_VirtualApplicationData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_VirtualApplicationData_); ok {
			return x.VirtualApplicationData
		}
	}
	return nil
}

func (x *EntityDTO) GetProcessorPoolData() *EntityDTO_ProcessorPoolData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ProcessorPoolData_); ok {
			return x.ProcessorPoolData
		}
	}
	return nil
}

func (x *EntityDTO) GetReservedInstanceData() *EntityDTO_ReservedInstanceData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ReservedInstanceData_); ok {
			return x.ReservedInstanceData
		}
	}
	return nil
}

func (x *EntityDTO) GetContainerPodData() *EntityDTO_ContainerPodData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ContainerPodData_); ok {
			return x.ContainerPodData
		}
	}
	return nil
}

func (x *EntityDTO) GetContainerData() *EntityDTO_ContainerData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ContainerData_); ok {
			return x.ContainerData
		}
	}
	return nil
}

func (x *EntityDTO) GetBusinessAccountData() *EntityDTO_BusinessAccountData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_BusinessAccountData_); ok {
			return x.BusinessAccountData
		}
	}
	return nil
}

func (x *EntityDTO) GetComputeTierData() *EntityDTO_ComputeTierData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ComputeTierData_); ok {
			return x.ComputeTierData
		}
	}
	return nil
}

func (x *EntityDTO) GetVirtualVolumeData() *EntityDTO_VirtualVolumeData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_VirtualVolumeData_); ok {
			return x.VirtualVolumeData
		}
	}
	return nil
}

func (x *EntityDTO) GetBusinessUserData() *EntityDTO_BusinessUserData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_BusinessUserData_); ok {
			return x.BusinessUserData
		}
	}
	return nil
}

func (x *EntityDTO) GetRegionData() *EntityDTO_RegionData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_RegionData_); ok {
			return x.RegionData
		}
	}
	return nil
}

func (x *EntityDTO) GetWorkloadControllerData() *EntityDTO_WorkloadControllerData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_WorkloadControllerData_); ok {
			return x.WorkloadControllerData
		}
	}
	return nil
}

func (x *EntityDTO) GetDatabaseTierData() *EntityDTO_DatabaseTierData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_DatabaseTierData_); ok {
			return x.DatabaseTierData
		}
	}
	return nil
}

func (x *EntityDTO) GetDatabaseServerTierData() *EntityDTO_DatabaseServerTierData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_DatabaseServerTierData_); ok {
			return x.DatabaseServerTierData
		}
	}
	return nil
}

func (x *EntityDTO) GetServiceData() *EntityDTO_ServiceData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ServiceData_); ok {
			return x.ServiceData
		}
	}
	return nil
}

func (x *EntityDTO) GetCloudCommitmentData() *EntityDTO_CloudCommitmentData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_CloudCommitmentData_); ok {
			return x.CloudCommitmentData
		}
	}
	return nil
}

func (x *EntityDTO) GetNamespaceData() *EntityDTO_NamespaceData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_NamespaceData_); ok {
			return x.NamespaceData
		}
	}
	return nil
}

func (x *EntityDTO) GetContainerPlatformClusterData() *EntityDTO_ContainerPlatformClusterData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ContainerPlatformClusterData_); ok {
			return x.ContainerPlatformClusterData
		}
	}
	return nil
}

func (x *EntityDTO) GetApplicationServiceData() *EntityDTO_ApplicationServiceData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ApplicationServiceData_); ok {
			return x.ApplicationServiceData
		}
	}
	return nil
}

func (x *EntityDTO) GetContainerSpecData() *EntityDTO_ContainerSpecData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_ContainerSpecData_); ok {
			return x.ContainerSpecData
		}
	}
	return nil
}

func (x *EntityDTO) GetNetworkData() *EntityDTO_NetworkData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_NetworkData_); ok {
			return x.NetworkData
		}
	}
	return nil
}

func (x *EntityDTO) GetStorageTierData() *EntityDTO_StorageTierData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_StorageTierData_); ok {
			return x.StorageTierData
		}
	}
	return nil
}

func (x *EntityDTO) GetCapacityOptionData() *EntityDTO_CapacityOptionData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_CapacityOptionData_); ok {
			return x.CapacityOptionData
		}
	}
	return nil
}

func (x *EntityDTO) GetVirtualMachineSpecData() *EntityDTO_VirtualMachineSpecData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_VirtualMachineSpecData_); ok {
			return x.VirtualMachineSpecData
		}
	}
	return nil
}

func (x *EntityDTO) GetDataWarehouseTierData() *EntityDTO_DataWarehouseTierData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_DataWarehouseTierData_); ok {
			return x.DataWarehouseTierData
		}
	}
	return nil
}

func (x *EntityDTO) GetRepositoryData() *EntityDTO_RepositoryData {
	if x != nil {
		if x, ok := x.EntityData.(*EntityDTO_RepositoryData_); ok {
			return x.RepositoryData
		}
	}
	return nil
}

func (x *EntityDTO) GetRelatedEntityData() isEntityDTO_RelatedEntityData {
	if x != nil {
		return x.RelatedEntityData
	}
	return nil
}

func (x *EntityDTO) GetVirtualMachineRelatedData() *EntityDTO_VirtualMachineRelatedData {
	if x != nil {
		if x, ok := x.RelatedEntityData.(*EntityDTO_VirtualMachineRelatedData_); ok {
			return x.VirtualMachineRelatedData
		}
	}
	return nil
}

func (x *EntityDTO) GetPhysicalMachineRelatedData() *EntityDTO_PhysicalMachineRelatedData {
	if x != nil {
		if x, ok := x.RelatedEntityData.(*EntityDTO_PhysicalMachineRelatedData_); ok {
			return x.PhysicalMachineRelatedData
		}
	}
	return nil
}

func (x *EntityDTO) GetStorageControllerRelatedData() *EntityDTO_StorageControllerRelatedData {
	if x != nil {
		if x, ok := x.RelatedEntityData.(*EntityDTO_StorageControllerRelatedData_); ok {
			return x.StorageControllerRelatedData
		}
	}
	return nil
}

type isEntityDTO_EntityData interface {
	isEntityDTO_EntityData()
}

type EntityDTO_StorageData_ struct {
	StorageData *EntityDTO_StorageData `protobuf:"bytes,500,opt,name=storage_data,json=storageData,oneof"`
}

type EntityDTO_DiskArrayData_ struct {
	DiskArrayData *EntityDTO_DiskArrayData `protobuf:"bytes,501,opt,name=disk_array_data,json=diskArrayData,oneof"`
}

type EntityDTO_ApplicationData_ struct {
	ApplicationData *EntityDTO_ApplicationData `protobuf:"bytes,502,opt,name=application_data,json=applicationData,oneof"`
}

type EntityDTO_VirtualMachineData_ struct {
	VirtualMachineData *EntityDTO_VirtualMachineData `protobuf:"bytes,503,opt,name=virtual_machine_data,json=virtualMachineData,oneof"`
}

type EntityDTO_PhysicalMachineData_ struct {
	PhysicalMachineData *EntityDTO_PhysicalMachineData `protobuf:"bytes,504,opt,name=physical_machine_data,json=physicalMachineData,oneof"`
}

type EntityDTO_VirtualDatacenterData_ struct {
	VirtualDatacenterData *EntityDTO_VirtualDatacenterData `protobuf:"bytes,505,opt,name=virtual_datacenter_data,json=virtualDatacenterData,oneof"`
}

type EntityDTO_StorageControllerData_ struct {
	StorageControllerData *EntityDTO_StorageControllerData `protobuf:"bytes,506,opt,name=storage_controller_data,json=storageControllerData,oneof"`
}

type EntityDTO_LogicalPoolData_ struct {
	LogicalPoolData *EntityDTO_LogicalPoolData `protobuf:"bytes,507,opt,name=logical_pool_data,json=logicalPoolData,oneof"`
}

type EntityDTO_VirtualApplicationData_ struct {
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	VirtualApplicationData *EntityDTO_VirtualApplicationData `protobuf:"bytes,508,opt,name=virtual_application_data,json=virtualApplicationData,oneof"`
}

type EntityDTO_ProcessorPoolData_ struct {
	ProcessorPoolData *EntityDTO_ProcessorPoolData `protobuf:"bytes,509,opt,name=processor_pool_data,json=processorPoolData,oneof"`
}

type EntityDTO_ReservedInstanceData_ struct {
	ReservedInstanceData *EntityDTO_ReservedInstanceData `protobuf:"bytes,510,opt,name=reserved_instance_data,json=reservedInstanceData,oneof"`
}

type EntityDTO_ContainerPodData_ struct {
	ContainerPodData *EntityDTO_ContainerPodData `protobuf:"bytes,511,opt,name=container_pod_data,json=containerPodData,oneof"`
}

type EntityDTO_ContainerData_ struct {
	ContainerData *EntityDTO_ContainerData `protobuf:"bytes,512,opt,name=container_data,json=containerData,oneof"`
}

type EntityDTO_BusinessAccountData_ struct {
	BusinessAccountData *EntityDTO_BusinessAccountData `protobuf:"bytes,513,opt,name=business_account_data,json=businessAccountData,oneof"`
}

type EntityDTO_ComputeTierData_ struct {
	ComputeTierData *EntityDTO_ComputeTierData `protobuf:"bytes,514,opt,name=compute_tier_data,json=computeTierData,oneof"`
}

type EntityDTO_VirtualVolumeData_ struct {
	VirtualVolumeData *EntityDTO_VirtualVolumeData `protobuf:"bytes,515,opt,name=virtual_volume_data,json=virtualVolumeData,oneof"`
}

type EntityDTO_BusinessUserData_ struct {
	BusinessUserData *EntityDTO_BusinessUserData `protobuf:"bytes,516,opt,name=business_user_data,json=businessUserData,oneof"`
}

type EntityDTO_RegionData_ struct {
	RegionData *EntityDTO_RegionData `protobuf:"bytes,517,opt,name=region_data,json=regionData,oneof"`
}

type EntityDTO_WorkloadControllerData_ struct {
	WorkloadControllerData *EntityDTO_WorkloadControllerData `protobuf:"bytes,518,opt,name=workload_controller_data,json=workloadControllerData,oneof"`
}

type EntityDTO_DatabaseTierData_ struct {
	DatabaseTierData *EntityDTO_DatabaseTierData `protobuf:"bytes,519,opt,name=database_tier_data,json=databaseTierData,oneof"`
}

type EntityDTO_DatabaseServerTierData_ struct {
	DatabaseServerTierData *EntityDTO_DatabaseServerTierData `protobuf:"bytes,520,opt,name=database_server_tier_data,json=databaseServerTierData,oneof"`
}

type EntityDTO_ServiceData_ struct {
	ServiceData *EntityDTO_ServiceData `protobuf:"bytes,521,opt,name=service_data,json=serviceData,oneof"`
}

type EntityDTO_CloudCommitmentData_ struct {
	CloudCommitmentData *EntityDTO_CloudCommitmentData `protobuf:"bytes,522,opt,name=cloud_commitment_data,json=cloudCommitmentData,oneof"`
}

type EntityDTO_NamespaceData_ struct {
	NamespaceData *EntityDTO_NamespaceData `protobuf:"bytes,523,opt,name=namespace_data,json=namespaceData,oneof"`
}

type EntityDTO_ContainerPlatformClusterData_ struct {
	ContainerPlatformClusterData *EntityDTO_ContainerPlatformClusterData `protobuf:"bytes,524,opt,name=container_platform_cluster_data,json=containerPlatformClusterData,oneof"`
}

type EntityDTO_ApplicationServiceData_ struct {
	ApplicationServiceData *EntityDTO_ApplicationServiceData `protobuf:"bytes,525,opt,name=application_service_data,json=applicationServiceData,oneof"`
}

type EntityDTO_ContainerSpecData_ struct {
	ContainerSpecData *EntityDTO_ContainerSpecData `protobuf:"bytes,526,opt,name=container_spec_data,json=containerSpecData,oneof"`
}

type EntityDTO_NetworkData_ struct {
	NetworkData *EntityDTO_NetworkData `protobuf:"bytes,527,opt,name=network_data,json=networkData,oneof"`
}

type EntityDTO_StorageTierData_ struct {
	StorageTierData *EntityDTO_StorageTierData `protobuf:"bytes,528,opt,name=storage_tier_data,json=storageTierData,oneof"`
}

type EntityDTO_CapacityOptionData_ struct {
	CapacityOptionData *EntityDTO_CapacityOptionData `protobuf:"bytes,529,opt,name=capacity_option_data,json=capacityOptionData,oneof"`
}

type EntityDTO_VirtualMachineSpecData_ struct {
	VirtualMachineSpecData *EntityDTO_VirtualMachineSpecData `protobuf:"bytes,530,opt,name=virtual_machine_spec_data,json=virtualMachineSpecData,oneof"`
}

type EntityDTO_DataWarehouseTierData_ struct {
	DataWarehouseTierData *EntityDTO_DataWarehouseTierData `protobuf:"bytes,531,opt,name=data_warehouse_tier_data,json=dataWarehouseTierData,oneof"`
}

type EntityDTO_RepositoryData_ struct {
	RepositoryData *EntityDTO_RepositoryData `protobuf:"bytes,532,opt,name=repository_data,json=repositoryData,oneof"`
}

func (*EntityDTO_StorageData_) isEntityDTO_EntityData() {}

func (*EntityDTO_DiskArrayData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ApplicationData_) isEntityDTO_EntityData() {}

func (*EntityDTO_VirtualMachineData_) isEntityDTO_EntityData() {}

func (*EntityDTO_PhysicalMachineData_) isEntityDTO_EntityData() {}

func (*EntityDTO_VirtualDatacenterData_) isEntityDTO_EntityData() {}

func (*EntityDTO_StorageControllerData_) isEntityDTO_EntityData() {}

func (*EntityDTO_LogicalPoolData_) isEntityDTO_EntityData() {}

func (*EntityDTO_VirtualApplicationData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ProcessorPoolData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ReservedInstanceData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ContainerPodData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ContainerData_) isEntityDTO_EntityData() {}

func (*EntityDTO_BusinessAccountData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ComputeTierData_) isEntityDTO_EntityData() {}

func (*EntityDTO_VirtualVolumeData_) isEntityDTO_EntityData() {}

func (*EntityDTO_BusinessUserData_) isEntityDTO_EntityData() {}

func (*EntityDTO_RegionData_) isEntityDTO_EntityData() {}

func (*EntityDTO_WorkloadControllerData_) isEntityDTO_EntityData() {}

func (*EntityDTO_DatabaseTierData_) isEntityDTO_EntityData() {}

func (*EntityDTO_DatabaseServerTierData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ServiceData_) isEntityDTO_EntityData() {}

func (*EntityDTO_CloudCommitmentData_) isEntityDTO_EntityData() {}

func (*EntityDTO_NamespaceData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ContainerPlatformClusterData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ApplicationServiceData_) isEntityDTO_EntityData() {}

func (*EntityDTO_ContainerSpecData_) isEntityDTO_EntityData() {}

func (*EntityDTO_NetworkData_) isEntityDTO_EntityData() {}

func (*EntityDTO_StorageTierData_) isEntityDTO_EntityData() {}

func (*EntityDTO_CapacityOptionData_) isEntityDTO_EntityData() {}

func (*EntityDTO_VirtualMachineSpecData_) isEntityDTO_EntityData() {}

func (*EntityDTO_DataWarehouseTierData_) isEntityDTO_EntityData() {}

func (*EntityDTO_RepositoryData_) isEntityDTO_EntityData() {}

type isEntityDTO_RelatedEntityData interface {
	isEntityDTO_RelatedEntityData()
}

type EntityDTO_VirtualMachineRelatedData_ struct {
	VirtualMachineRelatedData *EntityDTO_VirtualMachineRelatedData `protobuf:"bytes,1000,opt,name=virtual_machine_related_data,json=virtualMachineRelatedData,oneof"`
}

type EntityDTO_PhysicalMachineRelatedData_ struct {
	PhysicalMachineRelatedData *EntityDTO_PhysicalMachineRelatedData `protobuf:"bytes,1001,opt,name=physical_machine_related_data,json=physicalMachineRelatedData,oneof"`
}

type EntityDTO_StorageControllerRelatedData_ struct {
	StorageControllerRelatedData *EntityDTO_StorageControllerRelatedData `protobuf:"bytes,1002,opt,name=storage_controller_related_data,json=storageControllerRelatedData,oneof"`
}

func (*EntityDTO_VirtualMachineRelatedData_) isEntityDTO_RelatedEntityData() {}

func (*EntityDTO_PhysicalMachineRelatedData_) isEntityDTO_RelatedEntityData() {}

func (*EntityDTO_StorageControllerRelatedData_) isEntityDTO_RelatedEntityData() {}

// This message defines a topological connection between 2 entities.
// This message needs to be used only to represent a topological relationship where the 2
// entities are connected to each other, but they are not trading any resources between them.
//
// For efficiency, we represent only one side of a connection, either as one of the
// connections of A or as one of the connections of B. Which one is used depends on
// the type of the connection. See comments for the specific connection types for
// details on which side to represent when sending information for a ConnectedEntity.
type ConnectedEntity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of the entity on the other side of the connection
	ConnectedEntityId *string `protobuf:"bytes,1,opt,name=connectedEntityId" json:"connectedEntityId,omitempty"`
	// Type of connection that this message is representing.
	ConnectionType *ConnectedEntity_ConnectionType `protobuf:"varint,2,opt,name=connectionType,enum=common_dto.ConnectedEntity_ConnectionType" json:"connectionType,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConnectedEntity) Reset() {
	*x = ConnectedEntity{}
	mi := &file_CommonDTO_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectedEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedEntity) ProtoMessage() {}

func (x *ConnectedEntity) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedEntity.ProtoReflect.Descriptor instead.
func (*ConnectedEntity) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectedEntity) GetConnectedEntityId() string {
	if x != nil && x.ConnectedEntityId != nil {
		return *x.ConnectedEntityId
	}
	return ""
}

func (x *ConnectedEntity) GetConnectionType() ConnectedEntity_ConnectionType {
	if x != nil && x.ConnectionType != nil {
		return *x.ConnectionType
	}
	return ConnectedEntity_NORMAL_CONNECTION
}

type PricingIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of an account attribute that identify its pricing. e.g offerId for Azure
	// accounts
	IdentifierName *PricingIdentifier_PricingIdentifierName `protobuf:"varint,1,req,name=identifier_name,json=identifierName,enum=common_dto.PricingIdentifier_PricingIdentifierName" json:"identifier_name,omitempty"`
	// The value of an account attribute that identify its pricing. e.g MS-AZR-0003 as
	// an offerId value for Azure accounts
	IdentifierValue *string `protobuf:"bytes,2,req,name=identifier_value,json=identifierValue" json:"identifier_value,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PricingIdentifier) Reset() {
	*x = PricingIdentifier{}
	mi := &file_CommonDTO_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PricingIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricingIdentifier) ProtoMessage() {}

func (x *PricingIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PricingIdentifier.ProtoReflect.Descriptor instead.
func (*PricingIdentifier) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{2}
}

func (x *PricingIdentifier) GetIdentifierName() PricingIdentifier_PricingIdentifierName {
	if x != nil && x.IdentifierName != nil {
		return *x.IdentifierName
	}
	return PricingIdentifier_OFFER_ID
}

func (x *PricingIdentifier) GetIdentifierValue() string {
	if x != nil && x.IdentifierValue != nil {
		return *x.IdentifierValue
	}
	return ""
}

// Represents a specific resource (like Mem, Cpu, Network, ...) that an entity can sell to another
// entity or wants to buy from another entity.
// A commodity has multiple metrics (like used, capacity, reservation, ...) that are used to track
// the state/utilization level of that resource.
//
// Note: Some of those metrics can be extracted from the device itself, and the probe should populate
// its value here. Other metrics will be generated automatically on the server side (like the ones
// that depends on a user setting value). In addition, some metrics can have both the behavior.
// By convention, if the probe is populating the metric value, then the server side will assume that
// the probe value is final, and will not try to generate another value for it (so it will not
// override the probe value). If the probe wants the server side to generate the value, if should
// leave the metric unset.
type CommodityDTO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the type of commodity. Check {@link Commodity} enumeration for the available
	// types.
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
	// Represents the key of this commodity.<br>
	// It is a String that represents a specific constraint for this commodity. A commodity bought
	// with a specific key can only buy from a commodity sold that has the same specific key (i.e.
	// those strings should match).
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Represents how much of this resource is used.
	// Used is meaningful on both the buying and selling side.
	Used *float64 `protobuf:"fixed64,3,opt,name=used" json:"used,omitempty"`
	// Represents the reservation for this resource.
	// Reservation is only meaningful on the buying side and reserves resources for the buying
	// entity. For example, a VirtualMachine may only be using 1GB of RAM, but but if the VM
	// specifies a reservation of 2GB, it ensures the resources are available if its usage spikes.
	Reservation *float64 `protobuf:"fixed64,4,opt,name=reservation" json:"reservation,omitempty"`
	// Represents the maximum capacity of this resource.
	// Capacity should only be given on the selling side and is used to specify the quantity of a commodity
	// being provided by a given entity.
	Capacity *float64 `protobuf:"fixed64,5,opt,name=capacity" json:"capacity,omitempty"`
	// Represents the limit on this resource.
	// Limit is only meaningful on the selling side and is used to limit the amount of a commodity available
	// for sale on the market to below the value specified in the capacity. For example, a VM may have
	// a VMem capacity of 4GB, but 1GB of that is needed by its operating system. In this example, specify
	// a capacity of 4GB and a limit of 3GB to limit VMem available for sale to applications on the VM.
	Limit *float64 `protobuf:"fixed64,6,opt,name=limit" json:"limit,omitempty"`
	Peak  *float64 `protobuf:"fixed64,7,opt,name=peak" json:"peak,omitempty"`
	// Has meaning on both the buying and selling side.
	// Represents whether the commodity is active and currently participating in the market.
	// Commodities that are inactive will not factor into market recommendations but will still be visible
	// in the Operations Manager UI.
	// Commodities are active by default.
	Active *bool `protobuf:"varint,8,opt,name=active,def=1" json:"active,omitempty"`
	// Has meaning on both the buying and selling side.
	// Represents whether the commodity can be resized. This flag is used to signal to the market
	// whether a commodity is eligible to receive resize up and resize down recommendations.
	// Commodities are not resizable by default.
	Resizable *bool `protobuf:"varint,9,opt,name=resizable,def=0" json:"resizable,omitempty"`
	// The 'displayName' value appears in the product GUI and in reports to identify the commodity.
	DisplayName *string `protobuf:"bytes,10,opt,name=displayName" json:"displayName,omitempty"`
	// Implies if the commodity is thin provisioned.
	// If the commodity is thin provisioned it can be overprovisioned by resizing it.
	// By setting to false. we say overprovision by resizing up is not allowed.
	Thin *bool `protobuf:"varint,11,opt,name=thin,def=1" json:"thin,omitempty"`
	// Property to indicate if the 'used' value for the commodity will be computed by the server
	// or if it is provided by Mediation.
	// The default is 'false' since the Mediation will provide the used value and that will be
	// returned by the server.
	// In situations where Mediation is not able to obtain the used values, it should set
	// this property to 'true'.
	// Warning: This is obsolete in XL and will be removed eventually.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ComputedUsed *bool `protobuf:"varint,12,opt,name=computedUsed" json:"computedUsed,omitempty"`
	// Property to indicate the amount by which the commodity will be resized.
	UsedIncrement *float64 `protobuf:"fixed64,13,opt,name=usedIncrement" json:"usedIncrement,omitempty"`
	// Commodity properties map
	PropMap []*CommodityDTO_PropertiesList `protobuf:"bytes,14,rep,name=propMap" json:"propMap,omitempty"`
	// Specifies if 'used' value is reported as percentage
	IsUsedPct *bool `protobuf:"varint,15,opt,name=isUsedPct,def=0" json:"isUsedPct,omitempty"`
	// Specifies if 'peak' value is reported as percentage
	IsPeakPct *bool `protobuf:"varint,23,opt,name=isPeakPct,def=0" json:"isPeakPct,omitempty"`
	// Maximum acceptable level of resource utilization (as percentage).
	// All the remainder of the resource above this value is considered as reserved.
	// E.g. for VMware host with a utilizationThresholdPct of 70, 70% of the commodity would be
	// permitted for use by consumers of the resource and 30% would be reserved as HA failover
	// capacity.
	UtilizationThresholdPct *float64 `protobuf:"fixed64,16,opt,name=utilizationThresholdPct" json:"utilizationThresholdPct,omitempty"`
	// Metadata for the invoking a custom pricing function for the commodity.
	PricingMetadata *CommodityDTO_PricingMetadata `protobuf:"bytes,17,opt,name=pricingMetadata" json:"pricingMetadata,omitempty"`
	// Collection of commodity utilization points. The collection contains series of usage points
	// with given timestamp and interval between points. It is used to calculate percentile on
	// server side.
	UtilizationData *CommodityDTO_UtilizationData `protobuf:"bytes,18,opt,name=utilizationData" json:"utilizationData,omitempty"`
	// The min amount resource can be provided to consumer
	MinAmountForConsumer *float64 `protobuf:"fixed64,19,opt,name=min_amount_for_consumer,json=minAmountForConsumer" json:"min_amount_for_consumer,omitempty"`
	// The max amount resource can be provided to consumer
	MaxAmountForConsumer *float64 `protobuf:"fixed64,20,opt,name=max_amount_for_consumer,json=maxAmountForConsumer" json:"max_amount_for_consumer,omitempty"`
	// The max ratio between this commodity and a base commodity
	RatioDependency *CommodityDTO_RatioDependency `protobuf:"bytes,21,opt,name=ratio_dependency,json=ratioDependency" json:"ratio_dependency,omitempty"`
	// Represents the utilization percent (range of 0 to 100), corresponding to the 95th percentile
	// (or other as specified) for the given resource. This field is set for CommodityDTOs that are
	// a part of targetSE in ActionItemDTO, created during Action Execution. This field is not
	// intended to be set as a part of DiscoveryResponse and doing so will have no effect.
	PercentileUtilization *float64 `protobuf:"fixed64,22,opt,name=percentileUtilization" json:"percentileUtilization,omitempty"`
	// Whether min is a strict constraint. True when consumer must consume amount above min.
	CheckMinAmountForConsumer *bool `protobuf:"varint,24,opt,name=check_min_amount_for_consumer,json=checkMinAmountForConsumer,def=0" json:"check_min_amount_for_consumer,omitempty"`
	// Max amount will be decided by another commodity's capacity on the consumer.
	RangeDependency *CommodityDTO_RangeDependency `protobuf:"bytes,25,opt,name=range_dependency,json=rangeDependency" json:"range_dependency,omitempty"`
	// We pass in historical data weight factor for a commodity if you want to override the
	// default in historical editor in topology processor
	DecayingAverageWeightFactor *CommodityDTO_DecayingAverageWeightFactor `protobuf:"bytes,26,opt,name=decaying_average_weight_factor,json=decayingAverageWeightFactor" json:"decaying_average_weight_factor,omitempty"`
	// Whether min should be additive. True when there is a minimum additive baseline.
	IsMinAmountAdditive *bool `protobuf:"varint,27,opt,name=is_min_amount_additive,json=isMinAmountAdditive,def=0" json:"is_min_amount_additive,omitempty"`
	// Collection of commodity type's specific data
	//
	// Types that are valid to be assigned to CommodityData:
	//
	//	*CommodityDTO_StorageLatencyData_
	//	*CommodityDTO_StorageAccessData_
	//	*CommodityDTO_VstoragePartitionData
	//	*CommodityDTO_StorageProvisionedData_
	//	*CommodityDTO_GpuData_
	//	*CommodityDTO_GpuMemData_
	CommodityData isCommodityDTO_CommodityData `protobuf_oneof:"commodity_data"`
	// for VMem and VCpu include info on hot add/hot remove
	//
	// Types that are valid to be assigned to HotresizeData:
	//
	//	*CommodityDTO_VmemData
	//	*CommodityDTO_VcpuData
	HotresizeData isCommodityDTO_HotresizeData `protobuf_oneof:"hotresize_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CommodityDTO fields.
const (
	Default_CommodityDTO_Active                    = bool(true)
	Default_CommodityDTO_Resizable                 = bool(false)
	Default_CommodityDTO_Thin                      = bool(true)
	Default_CommodityDTO_IsUsedPct                 = bool(false)
	Default_CommodityDTO_IsPeakPct                 = bool(false)
	Default_CommodityDTO_CheckMinAmountForConsumer = bool(false)
	Default_CommodityDTO_IsMinAmountAdditive       = bool(false)
)

func (x *CommodityDTO) Reset() {
	*x = CommodityDTO{}
	mi := &file_CommonDTO_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO) ProtoMessage() {}

func (x *CommodityDTO) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO.ProtoReflect.Descriptor instead.
func (*CommodityDTO) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3}
}

func (x *CommodityDTO) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *CommodityDTO) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CommodityDTO) GetUsed() float64 {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return 0
}

func (x *CommodityDTO) GetReservation() float64 {
	if x != nil && x.Reservation != nil {
		return *x.Reservation
	}
	return 0
}

func (x *CommodityDTO) GetCapacity() float64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *CommodityDTO) GetLimit() float64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *CommodityDTO) GetPeak() float64 {
	if x != nil && x.Peak != nil {
		return *x.Peak
	}
	return 0
}

func (x *CommodityDTO) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return Default_CommodityDTO_Active
}

func (x *CommodityDTO) GetResizable() bool {
	if x != nil && x.Resizable != nil {
		return *x.Resizable
	}
	return Default_CommodityDTO_Resizable
}

func (x *CommodityDTO) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *CommodityDTO) GetThin() bool {
	if x != nil && x.Thin != nil {
		return *x.Thin
	}
	return Default_CommodityDTO_Thin
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *CommodityDTO) GetComputedUsed() bool {
	if x != nil && x.ComputedUsed != nil {
		return *x.ComputedUsed
	}
	return false
}

func (x *CommodityDTO) GetUsedIncrement() float64 {
	if x != nil && x.UsedIncrement != nil {
		return *x.UsedIncrement
	}
	return 0
}

func (x *CommodityDTO) GetPropMap() []*CommodityDTO_PropertiesList {
	if x != nil {
		return x.PropMap
	}
	return nil
}

func (x *CommodityDTO) GetIsUsedPct() bool {
	if x != nil && x.IsUsedPct != nil {
		return *x.IsUsedPct
	}
	return Default_CommodityDTO_IsUsedPct
}

func (x *CommodityDTO) GetIsPeakPct() bool {
	if x != nil && x.IsPeakPct != nil {
		return *x.IsPeakPct
	}
	return Default_CommodityDTO_IsPeakPct
}

func (x *CommodityDTO) GetUtilizationThresholdPct() float64 {
	if x != nil && x.UtilizationThresholdPct != nil {
		return *x.UtilizationThresholdPct
	}
	return 0
}

func (x *CommodityDTO) GetPricingMetadata() *CommodityDTO_PricingMetadata {
	if x != nil {
		return x.PricingMetadata
	}
	return nil
}

func (x *CommodityDTO) GetUtilizationData() *CommodityDTO_UtilizationData {
	if x != nil {
		return x.UtilizationData
	}
	return nil
}

func (x *CommodityDTO) GetMinAmountForConsumer() float64 {
	if x != nil && x.MinAmountForConsumer != nil {
		return *x.MinAmountForConsumer
	}
	return 0
}

func (x *CommodityDTO) GetMaxAmountForConsumer() float64 {
	if x != nil && x.MaxAmountForConsumer != nil {
		return *x.MaxAmountForConsumer
	}
	return 0
}

func (x *CommodityDTO) GetRatioDependency() *CommodityDTO_RatioDependency {
	if x != nil {
		return x.RatioDependency
	}
	return nil
}

func (x *CommodityDTO) GetPercentileUtilization() float64 {
	if x != nil && x.PercentileUtilization != nil {
		return *x.PercentileUtilization
	}
	return 0
}

func (x *CommodityDTO) GetCheckMinAmountForConsumer() bool {
	if x != nil && x.CheckMinAmountForConsumer != nil {
		return *x.CheckMinAmountForConsumer
	}
	return Default_CommodityDTO_CheckMinAmountForConsumer
}

func (x *CommodityDTO) GetRangeDependency() *CommodityDTO_RangeDependency {
	if x != nil {
		return x.RangeDependency
	}
	return nil
}

func (x *CommodityDTO) GetDecayingAverageWeightFactor() *CommodityDTO_DecayingAverageWeightFactor {
	if x != nil {
		return x.DecayingAverageWeightFactor
	}
	return nil
}

func (x *CommodityDTO) GetIsMinAmountAdditive() bool {
	if x != nil && x.IsMinAmountAdditive != nil {
		return *x.IsMinAmountAdditive
	}
	return Default_CommodityDTO_IsMinAmountAdditive
}

func (x *CommodityDTO) GetCommodityData() isCommodityDTO_CommodityData {
	if x != nil {
		return x.CommodityData
	}
	return nil
}

func (x *CommodityDTO) GetStorageLatencyData() *CommodityDTO_StorageLatencyData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_StorageLatencyData_); ok {
			return x.StorageLatencyData
		}
	}
	return nil
}

func (x *CommodityDTO) GetStorageAccessData() *CommodityDTO_StorageAccessData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_StorageAccessData_); ok {
			return x.StorageAccessData
		}
	}
	return nil
}

func (x *CommodityDTO) GetVstoragePartitionData() *VStoragePartitionData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_VstoragePartitionData); ok {
			return x.VstoragePartitionData
		}
	}
	return nil
}

func (x *CommodityDTO) GetStorageProvisionedData() *CommodityDTO_StorageProvisionedData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_StorageProvisionedData_); ok {
			return x.StorageProvisionedData
		}
	}
	return nil
}

func (x *CommodityDTO) GetGpuData() *CommodityDTO_GpuData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_GpuData_); ok {
			return x.GpuData
		}
	}
	return nil
}

func (x *CommodityDTO) GetGpuMemData() *CommodityDTO_GpuMemData {
	if x != nil {
		if x, ok := x.CommodityData.(*CommodityDTO_GpuMemData_); ok {
			return x.GpuMemData
		}
	}
	return nil
}

func (x *CommodityDTO) GetHotresizeData() isCommodityDTO_HotresizeData {
	if x != nil {
		return x.HotresizeData
	}
	return nil
}

func (x *CommodityDTO) GetVmemData() *CommodityDTO_VMemData {
	if x != nil {
		if x, ok := x.HotresizeData.(*CommodityDTO_VmemData); ok {
			return x.VmemData
		}
	}
	return nil
}

func (x *CommodityDTO) GetVcpuData() *CommodityDTO_VCpuData {
	if x != nil {
		if x, ok := x.HotresizeData.(*CommodityDTO_VcpuData); ok {
			return x.VcpuData
		}
	}
	return nil
}

type isCommodityDTO_CommodityData interface {
	isCommodityDTO_CommodityData()
}

type CommodityDTO_StorageLatencyData_ struct {
	StorageLatencyData *CommodityDTO_StorageLatencyData `protobuf:"bytes,500,opt,name=storage_latency_data,json=storageLatencyData,oneof"`
}

type CommodityDTO_StorageAccessData_ struct {
	StorageAccessData *CommodityDTO_StorageAccessData `protobuf:"bytes,501,opt,name=storage_access_data,json=storageAccessData,oneof"`
}

type CommodityDTO_VstoragePartitionData struct {
	VstoragePartitionData *VStoragePartitionData `protobuf:"bytes,502,opt,name=vstorage_partition_data,json=vstoragePartitionData,oneof"`
}

type CommodityDTO_StorageProvisionedData_ struct {
	StorageProvisionedData *CommodityDTO_StorageProvisionedData `protobuf:"bytes,503,opt,name=storage_provisioned_data,json=storageProvisionedData,oneof"`
}

type CommodityDTO_GpuData_ struct {
	GpuData *CommodityDTO_GpuData `protobuf:"bytes,504,opt,name=gpu_data,json=gpuData,oneof"`
}

type CommodityDTO_GpuMemData_ struct {
	GpuMemData *CommodityDTO_GpuMemData `protobuf:"bytes,505,opt,name=gpu_mem_data,json=gpuMemData,oneof"`
}

func (*CommodityDTO_StorageLatencyData_) isCommodityDTO_CommodityData() {}

func (*CommodityDTO_StorageAccessData_) isCommodityDTO_CommodityData() {}

func (*CommodityDTO_VstoragePartitionData) isCommodityDTO_CommodityData() {}

func (*CommodityDTO_StorageProvisionedData_) isCommodityDTO_CommodityData() {}

func (*CommodityDTO_GpuData_) isCommodityDTO_CommodityData() {}

func (*CommodityDTO_GpuMemData_) isCommodityDTO_CommodityData() {}

type isCommodityDTO_HotresizeData interface {
	isCommodityDTO_HotresizeData()
}

type CommodityDTO_VmemData struct {
	VmemData *CommodityDTO_VMemData `protobuf:"bytes,200,opt,name=vmem_data,json=vmemData,oneof"`
}

type CommodityDTO_VcpuData struct {
	VcpuData *CommodityDTO_VCpuData `protobuf:"bytes,201,opt,name=vcpu_data,json=vcpuData,oneof"`
}

func (*CommodityDTO_VmemData) isCommodityDTO_HotresizeData() {}

func (*CommodityDTO_VcpuData) isCommodityDTO_HotresizeData() {}

// The partition that the VStorage sits on.  Used for display in the UI.
type VStoragePartitionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partition     *string                `protobuf:"bytes,1,opt,name=partition" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VStoragePartitionData) Reset() {
	*x = VStoragePartitionData{}
	mi := &file_CommonDTO_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VStoragePartitionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VStoragePartitionData) ProtoMessage() {}

func (x *VStoragePartitionData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VStoragePartitionData.ProtoReflect.Descriptor instead.
func (*VStoragePartitionData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{4}
}

func (x *VStoragePartitionData) GetPartition() string {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return ""
}

// GroupDTO message carries information to setup Group and Constraint in server.
type GroupDTO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of entities included in this group
	// Entity type is optional. If group already exists it can be retrieved from group entities.
	// Entity type can be empty for incremental discovery.
	EntityType *EntityDTO_EntityType `protobuf:"varint,1,opt,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	// Display name for the group
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Information about the group
	// If the group is associated with any constraint, this is the place containing constraint information
	// Otherwise, it will be group name
	//
	// Types that are valid to be assigned to Info:
	//
	//	*GroupDTO_GroupName
	//	*GroupDTO_ConstraintInfo_
	//	*GroupDTO_SettingPolicy_
	Info isGroupDTO_Info `protobuf_oneof:"info"`
	// Members information for the group
	// The group can be either dynamic or static
	// For dynamic group, it will be SelectionSpec used to select group members
	// For static group, it will be MembersList which contains a list of member uuids
	// For merge policy, it will be cluster uuid
	//
	// Types that are valid to be assigned to Members:
	//
	//	*GroupDTO_SelectionSpecList_
	//	*GroupDTO_MemberList
	//	*GroupDTO_AddedAndRemovedMembers
	//	*GroupDTO_SourceGroupId
	Members isGroupDTO_Members `protobuf_oneof:"members"`
	// list of <string, string, string> namespace, key, value triplets
	EntityProperties []*EntityDTO_EntityProperty `protobuf:"bytes,9,rep,name=entityProperties" json:"entityProperties,omitempty"`
	// Specifies group DTO Update type (can be a new/existing group or deleted group).
	UpdateType *UpdateType `protobuf:"varint,10,opt,name=updateType,enum=common_dto.UpdateType,def=0" json:"updateType,omitempty"`
	// Specifies group DTO type (can be either a regular group or a resource group).
	GroupType *GroupDTO_GroupType `protobuf:"varint,11,opt,name=groupType,enum=common_dto.GroupDTO_GroupType,def=0" json:"groupType,omitempty"`
	// Specifies if the group should be resized consistently or not
	IsConsistentResizing *bool `protobuf:"varint,12,opt,name=isConsistentResizing,def=0" json:"isConsistentResizing,omitempty"`
	// Tags related to group.
	Tags map[string]*GroupDTO_TagValues `protobuf:"bytes,13,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// "Owner" of the group.
	// The main use case (Sept 5 2019) is Business Accounts (account id) that own Resource
	// Groups.
	Owner               *string `protobuf:"bytes,14,opt,name=owner" json:"owner,omitempty"`
	StitchAcrossTargets *bool   `protobuf:"varint,15,opt,name=stitch_across_targets,json=stitchAcrossTargets,def=0" json:"stitch_across_targets,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for GroupDTO fields.
const (
	Default_GroupDTO_UpdateType           = UpdateType_UPDATED
	Default_GroupDTO_GroupType            = GroupDTO_REGULAR
	Default_GroupDTO_IsConsistentResizing = bool(false)
	Default_GroupDTO_StitchAcrossTargets  = bool(false)
)

func (x *GroupDTO) Reset() {
	*x = GroupDTO{}
	mi := &file_CommonDTO_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO) ProtoMessage() {}

func (x *GroupDTO) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO.ProtoReflect.Descriptor instead.
func (*GroupDTO) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5}
}

func (x *GroupDTO) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *GroupDTO) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *GroupDTO) GetInfo() isGroupDTO_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GroupDTO) GetGroupName() string {
	if x != nil {
		if x, ok := x.Info.(*GroupDTO_GroupName); ok {
			return x.GroupName
		}
	}
	return ""
}

func (x *GroupDTO) GetConstraintInfo() *GroupDTO_ConstraintInfo {
	if x != nil {
		if x, ok := x.Info.(*GroupDTO_ConstraintInfo_); ok {
			return x.ConstraintInfo
		}
	}
	return nil
}

func (x *GroupDTO) GetSettingPolicy() *GroupDTO_SettingPolicy {
	if x != nil {
		if x, ok := x.Info.(*GroupDTO_SettingPolicy_); ok {
			return x.SettingPolicy
		}
	}
	return nil
}

func (x *GroupDTO) GetMembers() isGroupDTO_Members {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupDTO) GetSelectionSpecList() *GroupDTO_SelectionSpecList {
	if x != nil {
		if x, ok := x.Members.(*GroupDTO_SelectionSpecList_); ok {
			return x.SelectionSpecList
		}
	}
	return nil
}

func (x *GroupDTO) GetMemberList() *GroupDTO_MembersList {
	if x != nil {
		if x, ok := x.Members.(*GroupDTO_MemberList); ok {
			return x.MemberList
		}
	}
	return nil
}

func (x *GroupDTO) GetAddedAndRemovedMembers() *GroupDTO_AddedAndRemovedMembersList {
	if x != nil {
		if x, ok := x.Members.(*GroupDTO_AddedAndRemovedMembers); ok {
			return x.AddedAndRemovedMembers
		}
	}
	return nil
}

func (x *GroupDTO) GetSourceGroupId() string {
	if x != nil {
		if x, ok := x.Members.(*GroupDTO_SourceGroupId); ok {
			return x.SourceGroupId
		}
	}
	return ""
}

func (x *GroupDTO) GetEntityProperties() []*EntityDTO_EntityProperty {
	if x != nil {
		return x.EntityProperties
	}
	return nil
}

func (x *GroupDTO) GetUpdateType() UpdateType {
	if x != nil && x.UpdateType != nil {
		return *x.UpdateType
	}
	return Default_GroupDTO_UpdateType
}

func (x *GroupDTO) GetGroupType() GroupDTO_GroupType {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return Default_GroupDTO_GroupType
}

func (x *GroupDTO) GetIsConsistentResizing() bool {
	if x != nil && x.IsConsistentResizing != nil {
		return *x.IsConsistentResizing
	}
	return Default_GroupDTO_IsConsistentResizing
}

func (x *GroupDTO) GetTags() map[string]*GroupDTO_TagValues {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupDTO) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *GroupDTO) GetStitchAcrossTargets() bool {
	if x != nil && x.StitchAcrossTargets != nil {
		return *x.StitchAcrossTargets
	}
	return Default_GroupDTO_StitchAcrossTargets
}

type isGroupDTO_Info interface {
	isGroupDTO_Info()
}

type GroupDTO_GroupName struct {
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName,oneof"`
}

type GroupDTO_ConstraintInfo_ struct {
	ConstraintInfo *GroupDTO_ConstraintInfo `protobuf:"bytes,4,opt,name=constraint_info,json=constraintInfo,oneof"`
}

type GroupDTO_SettingPolicy_ struct {
	// the setting policy associated with the group
	SettingPolicy *GroupDTO_SettingPolicy `protobuf:"bytes,16,opt,name=setting_policy,json=settingPolicy,oneof"`
}

func (*GroupDTO_GroupName) isGroupDTO_Info() {}

func (*GroupDTO_ConstraintInfo_) isGroupDTO_Info() {}

func (*GroupDTO_SettingPolicy_) isGroupDTO_Info() {}

type isGroupDTO_Members interface {
	isGroupDTO_Members()
}

type GroupDTO_SelectionSpecList_ struct {
	SelectionSpecList *GroupDTO_SelectionSpecList `protobuf:"bytes,5,opt,name=selection_spec_list,json=selectionSpecList,oneof"`
}

type GroupDTO_MemberList struct {
	MemberList *GroupDTO_MembersList `protobuf:"bytes,6,opt,name=member_list,json=memberList,oneof"`
}

type GroupDTO_AddedAndRemovedMembers struct {
	AddedAndRemovedMembers *GroupDTO_AddedAndRemovedMembersList `protobuf:"bytes,7,opt,name=added_and_removed_members,json=addedAndRemovedMembers,oneof"`
}

type GroupDTO_SourceGroupId struct {
	SourceGroupId string `protobuf:"bytes,8,opt,name=source_group_id,json=sourceGroupId,oneof"`
}

func (*GroupDTO_SelectionSpecList_) isGroupDTO_Members() {}

func (*GroupDTO_MemberList) isGroupDTO_Members() {}

func (*GroupDTO_AddedAndRemovedMembers) isGroupDTO_Members() {}

func (*GroupDTO_SourceGroupId) isGroupDTO_Members() {}

// Context data.  This data may be related to action execution
// or this data may be used more generally.
type ContextData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContextKey    *string                `protobuf:"bytes,1,req,name=contextKey" json:"contextKey,omitempty"`
	ContextValue  *string                `protobuf:"bytes,2,req,name=contextValue" json:"contextValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextData) Reset() {
	*x = ContextData{}
	mi := &file_CommonDTO_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextData) ProtoMessage() {}

func (x *ContextData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextData.ProtoReflect.Descriptor instead.
func (*ContextData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{6}
}

func (x *ContextData) GetContextKey() string {
	if x != nil && x.ContextKey != nil {
		return *x.ContextKey
	}
	return ""
}

func (x *ContextData) GetContextValue() string {
	if x != nil && x.ContextValue != nil {
		return *x.ContextValue
	}
	return ""
}

// Notification on some event or condition.
type NotificationDTO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Event name.
	Event *string `protobuf:"bytes,1,req,name=event" json:"event,omitempty"`
	// Notification category. For known notification categories use NotificationCategoryDTO enumeration.
	Category *string `protobuf:"bytes,2,req,name=category" json:"category,omitempty"`
	// Optional notification sub-category.
	SubCategory *string `protobuf:"bytes,3,opt,name=subCategory" json:"subCategory,omitempty"`
	// Optional notification description.
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// Notification severity.
	Severity      *NotificationDTO_Severity `protobuf:"varint,5,opt,name=severity,enum=common_dto.NotificationDTO_Severity,def=0" json:"severity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for NotificationDTO fields.
const (
	Default_NotificationDTO_Severity = NotificationDTO_UNKNOWN
)

func (x *NotificationDTO) Reset() {
	*x = NotificationDTO{}
	mi := &file_CommonDTO_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotificationDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationDTO) ProtoMessage() {}

func (x *NotificationDTO) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationDTO.ProtoReflect.Descriptor instead.
func (*NotificationDTO) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{7}
}

func (x *NotificationDTO) GetEvent() string {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return ""
}

func (x *NotificationDTO) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *NotificationDTO) GetSubCategory() string {
	if x != nil && x.SubCategory != nil {
		return *x.SubCategory
	}
	return ""
}

func (x *NotificationDTO) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *NotificationDTO) GetSeverity() NotificationDTO_Severity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return Default_NotificationDTO_Severity
}

// Metadata for creating custom data objects in the Operations Manager
type CustomTypeDef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique namespace for the data
	Namespace     *CustomTypeDef_MetadataNamespace `protobuf:"varint,1,req,name=namespace,enum=common_dto.CustomTypeDef_MetadataNamespace,def=0" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CustomTypeDef fields.
const (
	Default_CustomTypeDef_Namespace = CustomTypeDef_UNKNOWN
)

func (x *CustomTypeDef) Reset() {
	*x = CustomTypeDef{}
	mi := &file_CommonDTO_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomTypeDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTypeDef) ProtoMessage() {}

func (x *CustomTypeDef) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTypeDef.ProtoReflect.Descriptor instead.
func (*CustomTypeDef) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{8}
}

func (x *CustomTypeDef) GetNamespace() CustomTypeDef_MetadataNamespace {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return Default_CustomTypeDef_Namespace
}

// The ServerEntityPropDef class provides metadata properties for entities
// in the Operations Manager topology that have not been discovered by this probe.
// Operations Manager uses these property values to stitch external entities to the
// entities discovered by the probe.
// An external entity is one that exists in the Operations Manager topology, but has
// not been discovered by the probe.
//
// The link definition identifies:
//   - The entity type for this external entity
//   - An attribute of the entity to use to identify it (for example a physical machine's IP address)
//   - A flag to set whether to fetch the attribute from an entity that is related in the
//     Operations Manager topology (for example, use the IP address of a VM's host physical machine)
//   - Optionally, a handler that can traverse the topology to find the identifying value
//
// This class includes a set of constants for properties that apply to some of the supported
// entity types. Use these constants to create external links with the most common entity
// types in the Operations Manager topology. You can also use this class to create
// custom external entity link definitions.
//
// EXAMPLE: Connecting a DiskArray to Storage. To connect storage objects to disk arrays that the probe discovers,
// the entity link can use either the LUN ID, WWN, or export path properties. This class includes
// the STORAGE_LUNID, STORAGE_WWN, and STORAGE_REMOTE_HOST constants.
// You can use one of these constants as the ExternalEntityLinkDef in the
// ExternalEntityLink that you create for the discovered disk array.
//
// EXAMPLE: Connecting an Application to a VM. To connect an application the probe discovers to a VM,
// you typically use the VM's IP address. You could also use the VM's unique ID. This class includes
// the VM_IP constant for VM IP addresses, and the VM_UUID constant for the VM unique ID.
// You can use one of these constants as the ExternalEntityLinkDef in the
// ExternalEntityLink that you create for the discovered VM.
type ServerEntityPropDef struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Entity          *EntityDTO_EntityType  `protobuf:"varint,1,req,name=entity,enum=common_dto.EntityDTO_EntityType" json:"entity,omitempty"`
	Attribute       *string                `protobuf:"bytes,2,req,name=attribute" json:"attribute,omitempty"`
	UseTopoExt      *bool                  `protobuf:"varint,3,opt,name=useTopoExt" json:"useTopoExt,omitempty"`
	PropertyHandler *PropertyHandler       `protobuf:"bytes,4,opt,name=propertyHandler" json:"propertyHandler,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ServerEntityPropDef) Reset() {
	*x = ServerEntityPropDef{}
	mi := &file_CommonDTO_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerEntityPropDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEntityPropDef) ProtoMessage() {}

func (x *ServerEntityPropDef) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEntityPropDef.ProtoReflect.Descriptor instead.
func (*ServerEntityPropDef) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{9}
}

func (x *ServerEntityPropDef) GetEntity() EntityDTO_EntityType {
	if x != nil && x.Entity != nil {
		return *x.Entity
	}
	return EntityDTO_SWITCH
}

func (x *ServerEntityPropDef) GetAttribute() string {
	if x != nil && x.Attribute != nil {
		return *x.Attribute
	}
	return ""
}

func (x *ServerEntityPropDef) GetUseTopoExt() bool {
	if x != nil && x.UseTopoExt != nil {
		return *x.UseTopoExt
	}
	return false
}

func (x *ServerEntityPropDef) GetPropertyHandler() *PropertyHandler {
	if x != nil {
		return x.PropertyHandler
	}
	return nil
}

// The PropertyHandler class manages handler methods that
// Operations Manager can use to traverse the topology to get value(s) of the specified attribute.
// The class assembles a linked list of handlers that can be used to inspect multiple
// layers of the topology to get properties from different entity types.
// Forms LinkedList structure to maintain multiple layers of property names and entity types.
// Example:
//
//	PropertyHandler ipHandler {
//	               nextHandler: null
//	               methodName: "getAddress"
//	               entity: Entity.IP
//	               directlyApply: false
//	               }</pre></code>
//
// ipHandler can be used to retrieve IP address string values from IP object.
type PropertyHandler struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	MethodName *string                `protobuf:"bytes,1,req,name=methodName" json:"methodName,omitempty"`
	EntityType *EntityDTO_EntityType  `protobuf:"varint,2,opt,name=entityType,enum=common_dto.EntityDTO_EntityType" json:"entityType,omitempty"`
	// it notifies if the method can be directly applied to what returned from the previous layer
	// For example, if it's for IP from VM.getUsesEndPoints(), then directlyApply should be false.
	// Since what returned from VM.getUsesEndPoints() is a list of IPs. So should go to each
	// instance and apply that method.
	DirectlyApply *bool            `protobuf:"varint,3,opt,name=directlyApply" json:"directlyApply,omitempty"`
	NextHandler   *PropertyHandler `protobuf:"bytes,4,opt,name=next_handler,json=nextHandler" json:"next_handler,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PropertyHandler) Reset() {
	*x = PropertyHandler{}
	mi := &file_CommonDTO_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PropertyHandler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyHandler) ProtoMessage() {}

func (x *PropertyHandler) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyHandler.ProtoReflect.Descriptor instead.
func (*PropertyHandler) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{10}
}

func (x *PropertyHandler) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *PropertyHandler) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *PropertyHandler) GetDirectlyApply() bool {
	if x != nil && x.DirectlyApply != nil {
		return *x.DirectlyApply
	}
	return false
}

func (x *PropertyHandler) GetNextHandler() *PropertyHandler {
	if x != nil {
		return x.NextHandler
	}
	return nil
}

// This message is mainly used to identify an entity such as VM, via the fields ipAddress,
// port (we can add more identifiers later).
type EntityIdentityData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target entity's IP address.
	IpAddress *string `protobuf:"bytes,1,req,name=ipAddress" json:"ipAddress,omitempty"`
	// The target entity's port number.
	Port          *int32 `protobuf:"varint,2,req,name=port" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityIdentityData) Reset() {
	*x = EntityIdentityData{}
	mi := &file_CommonDTO_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityIdentityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdentityData) ProtoMessage() {}

func (x *EntityIdentityData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdentityData.ProtoReflect.Descriptor instead.
func (*EntityIdentityData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{11}
}

func (x *EntityIdentityData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityIdentityData) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// The Flow DTO. This data is used for describing the communication between two entities
// (VMs in NCM). It includes the source, destination entity identity data and flow data
// (protocol, flow amount, latency).
type FlowDTO struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source entity identity data
	SourceEntityIdentityData *EntityIdentityData `protobuf:"bytes,1,req,name=sourceEntityIdentityData" json:"sourceEntityIdentityData,omitempty"`
	// Destination entity identity data
	DestEntityIdentityData *EntityIdentityData `protobuf:"bytes,2,req,name=destEntityIdentityData" json:"destEntityIdentityData,omitempty"`
	// The protocol.
	Protocol *FlowDTO_Protocol `protobuf:"varint,3,req,name=protocol,enum=common_dto.FlowDTO_Protocol" json:"protocol,omitempty"`
	// Flow Amount
	FlowAmount *float64 `protobuf:"fixed64,4,req,name=flowAmount" json:"flowAmount,omitempty"`
	// Flow latency
	Latency *int64 `protobuf:"varint,5,req,name=latency" json:"latency,omitempty"`
	// Transmitted amount
	TransmittedAmount *int64 `protobuf:"varint,6,req,name=transmittedAmount" json:"transmittedAmount,omitempty"`
	// Received amount
	ReceivedAmount *int64 `protobuf:"varint,7,req,name=receivedAmount" json:"receivedAmount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlowDTO) Reset() {
	*x = FlowDTO{}
	mi := &file_CommonDTO_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowDTO) ProtoMessage() {}

func (x *FlowDTO) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowDTO.ProtoReflect.Descriptor instead.
func (*FlowDTO) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{12}
}

func (x *FlowDTO) GetSourceEntityIdentityData() *EntityIdentityData {
	if x != nil {
		return x.SourceEntityIdentityData
	}
	return nil
}

func (x *FlowDTO) GetDestEntityIdentityData() *EntityIdentityData {
	if x != nil {
		return x.DestEntityIdentityData
	}
	return nil
}

func (x *FlowDTO) GetProtocol() FlowDTO_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return FlowDTO_TCP
}

func (x *FlowDTO) GetFlowAmount() float64 {
	if x != nil && x.FlowAmount != nil {
		return *x.FlowAmount
	}
	return 0
}

func (x *FlowDTO) GetLatency() int64 {
	if x != nil && x.Latency != nil {
		return *x.Latency
	}
	return 0
}

func (x *FlowDTO) GetTransmittedAmount() int64 {
	if x != nil && x.TransmittedAmount != nil {
		return *x.TransmittedAmount
	}
	return 0
}

func (x *FlowDTO) GetReceivedAmount() int64 {
	if x != nil && x.ReceivedAmount != nil {
		return *x.ReceivedAmount
	}
	return 0
}

// geo data location with latitude and longitude to determine physical location of entity
type GeoData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the latitude of the entity used along with longitude to determine physical location
	Latitude *float64 `protobuf:"fixed64,1,req,name=latitude" json:"latitude,omitempty"`
	// the longitude of the entity used along with latitude to determine physical location
	Longitude     *float64 `protobuf:"fixed64,2,req,name=longitude" json:"longitude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeoData) Reset() {
	*x = GeoData{}
	mi := &file_CommonDTO_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoData) ProtoMessage() {}

func (x *GeoData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoData.ProtoReflect.Descriptor instead.
func (*GeoData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{13}
}

func (x *GeoData) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *GeoData) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

// Captures a capacity limits for a give commodity type.
type CommodityCapacityLimit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommodityType *int32                 `protobuf:"varint,1,opt,name=commodityType" json:"commodityType,omitempty"`
	Capacity      *float32               `protobuf:"fixed32,2,opt,name=capacity" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommodityCapacityLimit) Reset() {
	*x = CommodityCapacityLimit{}
	mi := &file_CommonDTO_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityCapacityLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityCapacityLimit) ProtoMessage() {}

func (x *CommodityCapacityLimit) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityCapacityLimit.ProtoReflect.Descriptor instead.
func (*CommodityCapacityLimit) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{14}
}

func (x *CommodityCapacityLimit) GetCommodityType() int32 {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return 0
}

func (x *CommodityCapacityLimit) GetCapacity() float32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// Identifying properties and values for entities that may not have a corresponding EntityDTO in the DiscoveryResponse.
// The properties and entity_type set must be per the definition in the probe's identity-metadata.yml file.
// Upon successful validation of the properties in identifying_property_values against the identity metadata submitted
// by the probe, the IdentityService may generate an OID for the property values.
type EntityIdentifyingPropertyValues struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	EntityId                  *string                `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	EntityType                *EntityDTO_EntityType  `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	IdentifyingPropertyValues map[string]string      `protobuf:"bytes,3,rep,name=identifying_property_values,json=identifyingPropertyValues" json:"identifying_property_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *EntityIdentifyingPropertyValues) Reset() {
	*x = EntityIdentifyingPropertyValues{}
	mi := &file_CommonDTO_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityIdentifyingPropertyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityIdentifyingPropertyValues) ProtoMessage() {}

func (x *EntityIdentifyingPropertyValues) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityIdentifyingPropertyValues.ProtoReflect.Descriptor instead.
func (*EntityIdentifyingPropertyValues) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{15}
}

func (x *EntityIdentifyingPropertyValues) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *EntityIdentifyingPropertyValues) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *EntityIdentifyingPropertyValues) GetIdentifyingPropertyValues() map[string]string {
	if x != nil {
		return x.IdentifyingPropertyValues
	}
	return nil
}

// A tag that comes from an external service that we have discovered. Other services like Apptio
// Cloudability may tag resources that Turbo also knows about, we represent them as ExternalTags
type ExternalTag struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The tag's ID
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The type of tag.
	Type *ExternalTag_TagType `protobuf:"varint,2,opt,name=type,enum=common_dto.ExternalTag_TagType,def=0" json:"type,omitempty"`
	// The name of the tag
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The tag's environment id
	EnvironmentId *string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId" json:"environment_id,omitempty"`
	// The tag's default value.
	DefaultValue *string `protobuf:"bytes,5,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// The possible values of a tag
	PossibleValues []string `protobuf:"bytes,6,rep,name=possible_values,json=possibleValues" json:"possible_values,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ExternalTag fields.
const (
	Default_ExternalTag_Type = ExternalTag_UNKNOWN_TAG
)

func (x *ExternalTag) Reset() {
	*x = ExternalTag{}
	mi := &file_CommonDTO_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTag) ProtoMessage() {}

func (x *ExternalTag) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTag.ProtoReflect.Descriptor instead.
func (*ExternalTag) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{16}
}

func (x *ExternalTag) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ExternalTag) GetType() ExternalTag_TagType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_ExternalTag_Type
}

func (x *ExternalTag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExternalTag) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

func (x *ExternalTag) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *ExternalTag) GetPossibleValues() []string {
	if x != nil {
		return x.PossibleValues
	}
	return nil
}

// An ExternalResourceInfo represents information about a resource from an external system which
// may correspond to a resource (i.e. entity) in Turbo. The data within the ExternalResourceInfo
// should make it possible to identify the Turbo resource, if one exists.
type ExternalResourceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The external resource's ID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The entity type of the external resource
	EntityType *EntityDTO_EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	// The external resource's name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The tag's environment id
	EnvironmentId *string `protobuf:"bytes,4,opt,name=environment_id,json=environmentId" json:"environment_id,omitempty"`
	// The cloud service provider name, e.g. AWS, Azure, GCP.
	CloudServiceProviderName *string `protobuf:"bytes,5,opt,name=cloud_service_provider_name,json=cloudServiceProviderName" json:"cloud_service_provider_name,omitempty"`
	// The cloud service name, e.g. AWS CloudTrail, AWS CloudWatch, Azure Compute, Azure Storage
	CloudServiceName *string `protobuf:"bytes,6,opt,name=cloud_service_name,json=cloudServiceName" json:"cloud_service_name,omitempty"`
	// The account ID of the external resource
	AccountId *string `protobuf:"bytes,7,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// The account name of the external resource
	AccountName *string `protobuf:"bytes,8,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// A resource may have several tags associated with it.
	ExternalTags  []*ExternalResourceInfo_TagRef `protobuf:"bytes,9,rep,name=external_tags,json=externalTags" json:"external_tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalResourceInfo) Reset() {
	*x = ExternalResourceInfo{}
	mi := &file_CommonDTO_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalResourceInfo) ProtoMessage() {}

func (x *ExternalResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalResourceInfo.ProtoReflect.Descriptor instead.
func (*ExternalResourceInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{17}
}

func (x *ExternalResourceInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ExternalResourceInfo) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *ExternalResourceInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExternalResourceInfo) GetEnvironmentId() string {
	if x != nil && x.EnvironmentId != nil {
		return *x.EnvironmentId
	}
	return ""
}

func (x *ExternalResourceInfo) GetCloudServiceProviderName() string {
	if x != nil && x.CloudServiceProviderName != nil {
		return *x.CloudServiceProviderName
	}
	return ""
}

func (x *ExternalResourceInfo) GetCloudServiceName() string {
	if x != nil && x.CloudServiceName != nil {
		return *x.CloudServiceName
	}
	return ""
}

func (x *ExternalResourceInfo) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *ExternalResourceInfo) GetAccountName() string {
	if x != nil && x.AccountName != nil {
		return *x.AccountName
	}
	return ""
}

func (x *ExternalResourceInfo) GetExternalTags() []*ExternalResourceInfo_TagRef {
	if x != nil {
		return x.ExternalTags
	}
	return nil
}

// A list of details about the entity in form of key-values pairs.
// The key should be the ordinal of one of the EntityDetailType enum.
type EntityDTO_EntityDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *int32                 `protobuf:"varint,1,opt,name=key" json:"key,omitempty"`
	Values        []string               `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_EntityDetail) Reset() {
	*x = EntityDTO_EntityDetail{}
	mi := &file_CommonDTO_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_EntityDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_EntityDetail) ProtoMessage() {}

func (x *EntityDTO_EntityDetail) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_EntityDetail.ProtoReflect.Descriptor instead.
func (*EntityDTO_EntityDetail) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EntityDTO_EntityDetail) GetKey() int32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *EntityDTO_EntityDetail) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type EntityDTO_CommodityBought struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the provider entity
	ProviderId *string `protobuf:"bytes,1,req,name=providerId" json:"providerId,omitempty"`
	// list of CommodityDTO items bought from the provider entity
	Bought []*CommodityDTO `protobuf:"bytes,2,rep,name=bought" json:"bought,omitempty"`
	// The provider type should be specified along with the provider id
	ProviderType *EntityDTO_EntityType `protobuf:"varint,3,opt,name=providerType,enum=common_dto.EntityDTO_EntityType" json:"providerType,omitempty"`
	// Define a related sub division of the commodities bought - for example vDisk
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	SubDivision *EntityDTO_SubDivisionData `protobuf:"bytes,4,opt,name=subDivision" json:"subDivision,omitempty"`
	// Eligibility for actions on this provider
	ActionEligibility *EntityDTO_ActionOnProviderEligibility `protobuf:"bytes,6,opt,name=actionEligibility" json:"actionEligibility,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EntityDTO_CommodityBought) Reset() {
	*x = EntityDTO_CommodityBought{}
	mi := &file_CommonDTO_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CommodityBought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CommodityBought) ProtoMessage() {}

func (x *EntityDTO_CommodityBought) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CommodityBought.ProtoReflect.Descriptor instead.
func (*EntityDTO_CommodityBought) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 1}
}

func (x *EntityDTO_CommodityBought) GetProviderId() string {
	if x != nil && x.ProviderId != nil {
		return *x.ProviderId
	}
	return ""
}

func (x *EntityDTO_CommodityBought) GetBought() []*CommodityDTO {
	if x != nil {
		return x.Bought
	}
	return nil
}

func (x *EntityDTO_CommodityBought) GetProviderType() EntityDTO_EntityType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return EntityDTO_SWITCH
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_CommodityBought) GetSubDivision() *EntityDTO_SubDivisionData {
	if x != nil {
		return x.SubDivision
	}
	return nil
}

func (x *EntityDTO_CommodityBought) GetActionEligibility() *EntityDTO_ActionOnProviderEligibility {
	if x != nil {
		return x.ActionEligibility
	}
	return nil
}

// Setting to determine eligibility of the entity for various analysis actions that have an
// effect on the whole entity.
// It is defined as a member of the EntityDTO message.
// See also the ActionOnProviderEligibility setting for actions that have effect on the
// relationship/combination of the entity and a specific provider it is buying from.
// Therefore, there can be multiple ActionOnProviderEligibility on a single entity, possibly
// one per provider. It is defined as the member of the CommodityBought section.
//
// Note: The ProbeActionCapability has effect on all the entities of a specific type.
// Probe writer should use the correct option for action settings. The probe wide entity type
// action setting is usually preferred. However, the entity level action eligibility can be used
// if further granularity is required to control entity actions.
// In conjunction with the ProbeActionCapability, analysis will determine whether to recommend
// a particular action for an entity.
// If the probe has disabled the support for a particular action, then the action eligibility
// setting of the entity is ignored.
// Similarly, if the probe has indicated support for a particular action, but the action
// eligibility of the entity is false, then the action cannot be recommended by analysis.
// In summary, the most restrictive action setting will be applied by analysis.
//
// Note: the action eligibility section strictly pertains to the actions that can be applied on
// the entity by the Analysis engine. These settings in Consumer Policy apply to the state
// of the entity in the market.
type EntityDTO_ActionEligibility struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the Market should generate suspend action for this entity
	Suspendable *bool `protobuf:"varint,1,opt,name=suspendable,def=1" json:"suspendable,omitempty"`
	// Whether the Market should generate clone or provision action this entity.
	Cloneable     *bool `protobuf:"varint,2,opt,name=cloneable,def=1" json:"cloneable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ActionEligibility fields.
const (
	Default_EntityDTO_ActionEligibility_Suspendable = bool(true)
	Default_EntityDTO_ActionEligibility_Cloneable   = bool(true)
)

func (x *EntityDTO_ActionEligibility) Reset() {
	*x = EntityDTO_ActionEligibility{}
	mi := &file_CommonDTO_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ActionEligibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ActionEligibility) ProtoMessage() {}

func (x *EntityDTO_ActionEligibility) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ActionEligibility.ProtoReflect.Descriptor instead.
func (*EntityDTO_ActionEligibility) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 2}
}

func (x *EntityDTO_ActionEligibility) GetSuspendable() bool {
	if x != nil && x.Suspendable != nil {
		return *x.Suspendable
	}
	return Default_EntityDTO_ActionEligibility_Suspendable
}

func (x *EntityDTO_ActionEligibility) GetCloneable() bool {
	if x != nil && x.Cloneable != nil {
		return *x.Cloneable
	}
	return Default_EntityDTO_ActionEligibility_Cloneable
}

// Eligibility for actions that will have effect on the combination of the entity
// and a specific provider it is buying from.
// It is defined as the member of the CommodityBought section.
type EntityDTO_ActionOnProviderEligibility struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the Market should generate a move for this entity to another provider of the same type.
	Movable *bool `protobuf:"varint,1,opt,name=movable" json:"movable,omitempty"`
	// Whether the entity should generate a start for this entity on this provider
	Startable *bool `protobuf:"varint,2,opt,name=startable,def=1" json:"startable,omitempty"`
	// Where the Market should generate scale action this entity, relevant for cloud entities
	Scalable      *bool `protobuf:"varint,3,opt,name=scalable,def=1" json:"scalable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ActionOnProviderEligibility fields.
const (
	Default_EntityDTO_ActionOnProviderEligibility_Startable = bool(true)
	Default_EntityDTO_ActionOnProviderEligibility_Scalable  = bool(true)
)

func (x *EntityDTO_ActionOnProviderEligibility) Reset() {
	*x = EntityDTO_ActionOnProviderEligibility{}
	mi := &file_CommonDTO_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ActionOnProviderEligibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ActionOnProviderEligibility) ProtoMessage() {}

func (x *EntityDTO_ActionOnProviderEligibility) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ActionOnProviderEligibility.ProtoReflect.Descriptor instead.
func (*EntityDTO_ActionOnProviderEligibility) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 3}
}

func (x *EntityDTO_ActionOnProviderEligibility) GetMovable() bool {
	if x != nil && x.Movable != nil {
		return *x.Movable
	}
	return false
}

func (x *EntityDTO_ActionOnProviderEligibility) GetStartable() bool {
	if x != nil && x.Startable != nil {
		return *x.Startable
	}
	return Default_EntityDTO_ActionOnProviderEligibility_Startable
}

func (x *EntityDTO_ActionOnProviderEligibility) GetScalable() bool {
	if x != nil && x.Scalable != nil {
		return *x.Scalable
	}
	return Default_EntityDTO_ActionOnProviderEligibility_Scalable
}

// representation of a virtual disk (AWS EBS volume)
// A VM can have multiple virtual disks from the same storage
type EntityDTO_SubDivisionData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the SubDivision
	SubDivisionId *string `protobuf:"bytes,1,req,name=subDivisionId" json:"subDivisionId,omitempty"`
	// String identifying the replication type needed for cost calculations
	RedundancyType *string `protobuf:"bytes,2,opt,name=redundancyType" json:"redundancyType,omitempty"`
	// float iops capacity of SubDivision needed for cost calculations
	StorageAccessCapacity *float32 `protobuf:"fixed32,3,opt,name=storageAccessCapacity" json:"storageAccessCapacity,omitempty"`
	// float storage capacity of SubDivision needed for cost calculations
	StorageAmountCapacity *float32 `protobuf:"fixed32,4,opt,name=storageAmountCapacity" json:"storageAmountCapacity,omitempty"`
	// display name for the SubDivision
	DisplayName   *string `protobuf:"bytes,5,opt,name=displayName" json:"displayName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_SubDivisionData) Reset() {
	*x = EntityDTO_SubDivisionData{}
	mi := &file_CommonDTO_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_SubDivisionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_SubDivisionData) ProtoMessage() {}

func (x *EntityDTO_SubDivisionData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_SubDivisionData.ProtoReflect.Descriptor instead.
func (*EntityDTO_SubDivisionData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 4}
}

func (x *EntityDTO_SubDivisionData) GetSubDivisionId() string {
	if x != nil && x.SubDivisionId != nil {
		return *x.SubDivisionId
	}
	return ""
}

func (x *EntityDTO_SubDivisionData) GetRedundancyType() string {
	if x != nil && x.RedundancyType != nil {
		return *x.RedundancyType
	}
	return ""
}

func (x *EntityDTO_SubDivisionData) GetStorageAccessCapacity() float32 {
	if x != nil && x.StorageAccessCapacity != nil {
		return *x.StorageAccessCapacity
	}
	return 0
}

func (x *EntityDTO_SubDivisionData) GetStorageAmountCapacity() float32 {
	if x != nil && x.StorageAmountCapacity != nil {
		return *x.StorageAmountCapacity
	}
	return 0
}

func (x *EntityDTO_SubDivisionData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

type EntityDTO_StorageData struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	StorageType *EntityDTO_StorageType `protobuf:"varint,1,opt,name=storageType,enum=common_dto.EntityDTO_StorageType" json:"storageType,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	IpAddress *string `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ExportPath *string `protobuf:"bytes,3,opt,name=exportPath" json:"exportPath,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	StorageId *string `protobuf:"bytes,4,opt,name=storageId" json:"storageId,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	LunUuid *string `protobuf:"bytes,5,opt,name=lunUuid" json:"lunUuid,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	LunId *int32 `protobuf:"varint,6,opt,name=lunId" json:"lunId,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	Wwn            *string                              `protobuf:"bytes,7,opt,name=wwn" json:"wwn,omitempty"`
	NotClusterable *bool                                `protobuf:"varint,8,opt,name=notClusterable,def=0" json:"notClusterable,omitempty"`
	ExternalName   []string                             `protobuf:"bytes,9,rep,name=externalName" json:"externalName,omitempty"`
	StorageTier    *string                              `protobuf:"bytes,11,opt,name=storageTier" json:"storageTier,omitempty"`
	Policy         *EntityDTO_StorageData_StoragePolicy `protobuf:"bytes,12,opt,name=policy" json:"policy,omitempty"`
	RawCapacity    *EntityDTO_StorageData_RawCapacity   `protobuf:"bytes,13,opt,name=rawCapacity" json:"rawCapacity,omitempty"`
	IsHciStorage   *bool                                `protobuf:"varint,14,opt,name=isHciStorage" json:"isHciStorage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for EntityDTO_StorageData fields.
const (
	Default_EntityDTO_StorageData_NotClusterable = bool(false)
)

func (x *EntityDTO_StorageData) Reset() {
	*x = EntityDTO_StorageData{}
	mi := &file_CommonDTO_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageData) ProtoMessage() {}

func (x *EntityDTO_StorageData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageData.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 5}
}

func (x *EntityDTO_StorageData) GetStorageType() EntityDTO_StorageType {
	if x != nil && x.StorageType != nil {
		return *x.StorageType
	}
	return EntityDTO_GENERIC_BLOCK
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetExportPath() string {
	if x != nil && x.ExportPath != nil {
		return *x.ExportPath
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetStorageId() string {
	if x != nil && x.StorageId != nil {
		return *x.StorageId
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetLunUuid() string {
	if x != nil && x.LunUuid != nil {
		return *x.LunUuid
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetLunId() int32 {
	if x != nil && x.LunId != nil {
		return *x.LunId
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData) GetWwn() string {
	if x != nil && x.Wwn != nil {
		return *x.Wwn
	}
	return ""
}

func (x *EntityDTO_StorageData) GetNotClusterable() bool {
	if x != nil && x.NotClusterable != nil {
		return *x.NotClusterable
	}
	return Default_EntityDTO_StorageData_NotClusterable
}

func (x *EntityDTO_StorageData) GetExternalName() []string {
	if x != nil {
		return x.ExternalName
	}
	return nil
}

func (x *EntityDTO_StorageData) GetStorageTier() string {
	if x != nil && x.StorageTier != nil {
		return *x.StorageTier
	}
	return ""
}

func (x *EntityDTO_StorageData) GetPolicy() *EntityDTO_StorageData_StoragePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *EntityDTO_StorageData) GetRawCapacity() *EntityDTO_StorageData_RawCapacity {
	if x != nil {
		return x.RawCapacity
	}
	return nil
}

func (x *EntityDTO_StorageData) GetIsHciStorage() bool {
	if x != nil && x.IsHciStorage != nil {
		return *x.IsHciStorage
	}
	return false
}

type EntityDTO_StorageTierData struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	SupportedConsumerTypes []EntityDTO_EntityType `protobuf:"varint,14,rep,name=supported_consumer_types,json=supportedConsumerTypes,enum=common_dto.EntityDTO_EntityType" json:"supported_consumer_types,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *EntityDTO_StorageTierData) Reset() {
	*x = EntityDTO_StorageTierData{}
	mi := &file_CommonDTO_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageTierData) ProtoMessage() {}

func (x *EntityDTO_StorageTierData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageTierData.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageTierData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 6}
}

func (x *EntityDTO_StorageTierData) GetSupportedConsumerTypes() []EntityDTO_EntityType {
	if x != nil {
		return x.SupportedConsumerTypes
	}
	return nil
}

type EntityDTO_CapacityOptionData struct {
	state           protoimpl.MessageState                         `protogen:"open.v1"`
	CommodityType   *CommodityDTO_CommodityType                    `protobuf:"varint,1,req,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	FamilyKey       *string                                        `protobuf:"bytes,2,req,name=family_key,json=familyKey" json:"family_key,omitempty"`
	CapacityOption  []*EntityDTO_CapacityOptionData_CapacityOption `protobuf:"bytes,3,rep,name=capacity_option,json=capacityOption" json:"capacity_option,omitempty"`
	CommodityHasKey *bool                                          `protobuf:"varint,4,opt,name=commodity_has_key,json=commodityHasKey" json:"commodity_has_key,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityDTO_CapacityOptionData) Reset() {
	*x = EntityDTO_CapacityOptionData{}
	mi := &file_CommonDTO_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CapacityOptionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CapacityOptionData) ProtoMessage() {}

func (x *EntityDTO_CapacityOptionData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CapacityOptionData.ProtoReflect.Descriptor instead.
func (*EntityDTO_CapacityOptionData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 7}
}

func (x *EntityDTO_CapacityOptionData) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *EntityDTO_CapacityOptionData) GetFamilyKey() string {
	if x != nil && x.FamilyKey != nil {
		return *x.FamilyKey
	}
	return ""
}

func (x *EntityDTO_CapacityOptionData) GetCapacityOption() []*EntityDTO_CapacityOptionData_CapacityOption {
	if x != nil {
		return x.CapacityOption
	}
	return nil
}

func (x *EntityDTO_CapacityOptionData) GetCommodityHasKey() bool {
	if x != nil && x.CommodityHasKey != nil {
		return *x.CommodityHasKey
	}
	return false
}

// business user details
type EntityDTO_BusinessUserData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// connection sessions, if any
	SessionData   []*EntityDTO_SessionData `protobuf:"bytes,1,rep,name=sessionData" json:"sessionData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_BusinessUserData) Reset() {
	*x = EntityDTO_BusinessUserData{}
	mi := &file_CommonDTO_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_BusinessUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_BusinessUserData) ProtoMessage() {}

func (x *EntityDTO_BusinessUserData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_BusinessUserData.ProtoReflect.Descriptor instead.
func (*EntityDTO_BusinessUserData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 8}
}

func (x *EntityDTO_BusinessUserData) GetSessionData() []*EntityDTO_SessionData {
	if x != nil {
		return x.SessionData
	}
	return nil
}

// Specific data for region
type EntityDTO_RegionData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// region should have a geo data info
	GeoData       *GeoData `protobuf:"bytes,1,opt,name=geo_data,json=geoData" json:"geo_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_RegionData) Reset() {
	*x = EntityDTO_RegionData{}
	mi := &file_CommonDTO_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_RegionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_RegionData) ProtoMessage() {}

func (x *EntityDTO_RegionData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_RegionData.ProtoReflect.Descriptor instead.
func (*EntityDTO_RegionData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 9}
}

func (x *EntityDTO_RegionData) GetGeoData() *GeoData {
	if x != nil {
		return x.GeoData
	}
	return nil
}

// describes a session (remote connection) to virtual machine by a business user
type EntityDTO_SessionData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// virtual machine to which the business user has established a session
	VirtualMachine *string `protobuf:"bytes,1,req,name=virtualMachine" json:"virtualMachine,omitempty"`
	// session duration in milliseconds
	SessionDuration *int64 `protobuf:"varint,2,req,name=sessionDuration" json:"sessionDuration,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityDTO_SessionData) Reset() {
	*x = EntityDTO_SessionData{}
	mi := &file_CommonDTO_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_SessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_SessionData) ProtoMessage() {}

func (x *EntityDTO_SessionData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_SessionData.ProtoReflect.Descriptor instead.
func (*EntityDTO_SessionData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 10}
}

func (x *EntityDTO_SessionData) GetVirtualMachine() string {
	if x != nil && x.VirtualMachine != nil {
		return *x.VirtualMachine
	}
	return ""
}

func (x *EntityDTO_SessionData) GetSessionDuration() int64 {
	if x != nil && x.SessionDuration != nil {
		return *x.SessionDuration
	}
	return 0
}

type EntityDTO_DiskArrayData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	StorageId []string               `protobuf:"bytes,1,rep,name=storageId" json:"storageId,omitempty"`
	// Optionally provide information about the IOPS the disk array is capable of.
	// Either provide the estimated IOPS capacity directly, or supply
	// the counts for various types of disks so that it can be computed.
	//
	// Types that are valid to be assigned to IopsData:
	//
	//	*EntityDTO_DiskArrayData_IopsCapacity
	//	*EntityDTO_DiskArrayData_IopsComputeData
	IopsData             isEntityDTO_DiskArrayData_IopsData `protobuf_oneof:"iops_data"`
	SupportsVolumeResize *bool                              `protobuf:"varint,4,opt,name=supportsVolumeResize,def=0" json:"supportsVolumeResize,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

// Default values for EntityDTO_DiskArrayData fields.
const (
	Default_EntityDTO_DiskArrayData_SupportsVolumeResize = bool(false)
)

func (x *EntityDTO_DiskArrayData) Reset() {
	*x = EntityDTO_DiskArrayData{}
	mi := &file_CommonDTO_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DiskArrayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DiskArrayData) ProtoMessage() {}

func (x *EntityDTO_DiskArrayData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DiskArrayData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DiskArrayData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 11}
}

func (x *EntityDTO_DiskArrayData) GetStorageId() []string {
	if x != nil {
		return x.StorageId
	}
	return nil
}

func (x *EntityDTO_DiskArrayData) GetIopsData() isEntityDTO_DiskArrayData_IopsData {
	if x != nil {
		return x.IopsData
	}
	return nil
}

func (x *EntityDTO_DiskArrayData) GetIopsCapacity() int64 {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_DiskArrayData_IopsCapacity); ok {
			return x.IopsCapacity
		}
	}
	return 0
}

func (x *EntityDTO_DiskArrayData) GetIopsComputeData() *EntityDTO_ComputeIopsData {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_DiskArrayData_IopsComputeData); ok {
			return x.IopsComputeData
		}
	}
	return nil
}

func (x *EntityDTO_DiskArrayData) GetSupportsVolumeResize() bool {
	if x != nil && x.SupportsVolumeResize != nil {
		return *x.SupportsVolumeResize
	}
	return Default_EntityDTO_DiskArrayData_SupportsVolumeResize
}

type isEntityDTO_DiskArrayData_IopsData interface {
	isEntityDTO_DiskArrayData_IopsData()
}

type EntityDTO_DiskArrayData_IopsCapacity struct {
	IopsCapacity int64 `protobuf:"varint,2,opt,name=iopsCapacity,oneof"`
}

type EntityDTO_DiskArrayData_IopsComputeData struct {
	IopsComputeData *EntityDTO_ComputeIopsData `protobuf:"bytes,3,opt,name=iopsComputeData,oneof"`
}

func (*EntityDTO_DiskArrayData_IopsCapacity) isEntityDTO_DiskArrayData_IopsData() {}

func (*EntityDTO_DiskArrayData_IopsComputeData) isEntityDTO_DiskArrayData_IopsData() {}

type EntityDTO_LogicalPoolData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	StorageId             []string               `protobuf:"bytes,1,rep,name=storageId" json:"storageId,omitempty"`
	ServiceLevelObjective *string                `protobuf:"bytes,2,opt,name=serviceLevelObjective" json:"serviceLevelObjective,omitempty"`
	// Optionally provide information about the IOPS the logical pool is capable of.
	// Either provide the estimated IOPS capacity directly, or supply
	// the counts for various types of disks so that it can be computed.
	//
	// Types that are valid to be assigned to IopsData:
	//
	//	*EntityDTO_LogicalPoolData_IopsCapacity
	//	*EntityDTO_LogicalPoolData_IopsComputeData
	IopsData      isEntityDTO_LogicalPoolData_IopsData `protobuf_oneof:"iops_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_LogicalPoolData) Reset() {
	*x = EntityDTO_LogicalPoolData{}
	mi := &file_CommonDTO_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_LogicalPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_LogicalPoolData) ProtoMessage() {}

func (x *EntityDTO_LogicalPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_LogicalPoolData.ProtoReflect.Descriptor instead.
func (*EntityDTO_LogicalPoolData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 12}
}

func (x *EntityDTO_LogicalPoolData) GetStorageId() []string {
	if x != nil {
		return x.StorageId
	}
	return nil
}

func (x *EntityDTO_LogicalPoolData) GetServiceLevelObjective() string {
	if x != nil && x.ServiceLevelObjective != nil {
		return *x.ServiceLevelObjective
	}
	return ""
}

func (x *EntityDTO_LogicalPoolData) GetIopsData() isEntityDTO_LogicalPoolData_IopsData {
	if x != nil {
		return x.IopsData
	}
	return nil
}

func (x *EntityDTO_LogicalPoolData) GetIopsCapacity() int64 {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_LogicalPoolData_IopsCapacity); ok {
			return x.IopsCapacity
		}
	}
	return 0
}

func (x *EntityDTO_LogicalPoolData) GetIopsComputeData() *EntityDTO_ComputeIopsData {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_LogicalPoolData_IopsComputeData); ok {
			return x.IopsComputeData
		}
	}
	return nil
}

type isEntityDTO_LogicalPoolData_IopsData interface {
	isEntityDTO_LogicalPoolData_IopsData()
}

type EntityDTO_LogicalPoolData_IopsCapacity struct {
	IopsCapacity int64 `protobuf:"varint,3,opt,name=iopsCapacity,oneof"`
}

type EntityDTO_LogicalPoolData_IopsComputeData struct {
	IopsComputeData *EntityDTO_ComputeIopsData `protobuf:"bytes,4,opt,name=iopsComputeData,oneof"`
}

func (*EntityDTO_LogicalPoolData_IopsCapacity) isEntityDTO_LogicalPoolData_IopsData() {}

func (*EntityDTO_LogicalPoolData_IopsComputeData) isEntityDTO_LogicalPoolData_IopsData() {}

type EntityDTO_ApplicationData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      *string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	IpAddress *string                `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Port      *string                `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
	// IP address of related application/VM. E.g. it can be database IP for application server.
	RelatedIpAddress *string `protobuf:"bytes,4,opt,name=relatedIpAddress" json:"relatedIpAddress,omitempty"`
	// Information related to database applications
	DbData *EntityDTO_DatabaseData `protobuf:"bytes,5,opt,name=dbData" json:"dbData,omitempty"`
	// The CPU frequency of the kubernetes node hosting this application.
	// This value as of now is needed only to be able to convert the vcpu capacity of this
	// application in capacity and usage widgets, if its hosted on a container.
	// We show container data in millicores but the app data in Mhz because that is
	// more consistent for the application when stitched with APM probes or when the
	// application is reported without the cloud native entities.
	HostingNodeCpuFrequency *float64 `protobuf:"fixed64,6,opt,name=hostingNodeCpuFrequency" json:"hostingNodeCpuFrequency,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EntityDTO_ApplicationData) Reset() {
	*x = EntityDTO_ApplicationData{}
	mi := &file_CommonDTO_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ApplicationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ApplicationData) ProtoMessage() {}

func (x *EntityDTO_ApplicationData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ApplicationData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ApplicationData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 13}
}

func (x *EntityDTO_ApplicationData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EntityDTO_ApplicationData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityDTO_ApplicationData) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *EntityDTO_ApplicationData) GetRelatedIpAddress() string {
	if x != nil && x.RelatedIpAddress != nil {
		return *x.RelatedIpAddress
	}
	return ""
}

func (x *EntityDTO_ApplicationData) GetDbData() *EntityDTO_DatabaseData {
	if x != nil {
		return x.DbData
	}
	return nil
}

func (x *EntityDTO_ApplicationData) GetHostingNodeCpuFrequency() float64 {
	if x != nil && x.HostingNodeCpuFrequency != nil {
		return *x.HostingNodeCpuFrequency
	}
	return 0
}

type EntityDTO_ApplicationServiceData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Platform (can also be OS)
	Platform *EntityDTO_ApplicationServiceData_Platform `protobuf:"varint,1,opt,name=platform,enum=common_dto.EntityDTO_ApplicationServiceData_Platform" json:"platform,omitempty"`
	// Tier (also known as Pricing Tier)
	Tier *EntityDTO_ApplicationServiceData_Tier `protobuf:"varint,2,opt,name=tier,enum=common_dto.EntityDTO_ApplicationServiceData_Tier,def=0" json:"tier,omitempty"`
	// Maximum number of worker VMs for this component.
	MaxInstanceCount *int32 `protobuf:"varint,3,opt,name=max_instance_count,json=maxInstanceCount" json:"max_instance_count,omitempty"`
	// Number of worker VMs for this component.
	CurrentInstanceCount *int32 `protobuf:"varint,4,opt,name=current_instance_count,json=currentInstanceCount" json:"current_instance_count,omitempty"`
	// Number of apps contained within this app service
	AppCount *int32 `protobuf:"varint,5,opt,name=app_count,json=appCount" json:"app_count,omitempty"`
	// Whether or not the app service is zone redundant
	ZoneRedundant *bool `protobuf:"varint,6,opt,name=zone_redundant,json=zoneRedundant" json:"zone_redundant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ApplicationServiceData fields.
const (
	Default_EntityDTO_ApplicationServiceData_Tier = EntityDTO_ApplicationServiceData_OTHER_APP_SERVICE_PLAN_SERVICE_TIER
)

func (x *EntityDTO_ApplicationServiceData) Reset() {
	*x = EntityDTO_ApplicationServiceData{}
	mi := &file_CommonDTO_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ApplicationServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ApplicationServiceData) ProtoMessage() {}

func (x *EntityDTO_ApplicationServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ApplicationServiceData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ApplicationServiceData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 14}
}

func (x *EntityDTO_ApplicationServiceData) GetPlatform() EntityDTO_ApplicationServiceData_Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return EntityDTO_ApplicationServiceData_UNKNOWN
}

func (x *EntityDTO_ApplicationServiceData) GetTier() EntityDTO_ApplicationServiceData_Tier {
	if x != nil && x.Tier != nil {
		return *x.Tier
	}
	return Default_EntityDTO_ApplicationServiceData_Tier
}

func (x *EntityDTO_ApplicationServiceData) GetMaxInstanceCount() int32 {
	if x != nil && x.MaxInstanceCount != nil {
		return *x.MaxInstanceCount
	}
	return 0
}

func (x *EntityDTO_ApplicationServiceData) GetCurrentInstanceCount() int32 {
	if x != nil && x.CurrentInstanceCount != nil {
		return *x.CurrentInstanceCount
	}
	return 0
}

func (x *EntityDTO_ApplicationServiceData) GetAppCount() int32 {
	if x != nil && x.AppCount != nil {
		return *x.AppCount
	}
	return 0
}

func (x *EntityDTO_ApplicationServiceData) GetZoneRedundant() bool {
	if x != nil && x.ZoneRedundant != nil {
		return *x.ZoneRedundant
	}
	return false
}

type EntityDTO_VirtualMachineSpecData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinSize       *int32                 `protobuf:"varint,1,opt,name=min_size,json=minSize" json:"min_size,omitempty"`
	MaxSize       *int32                 `protobuf:"varint,2,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	DesiredSize   *int32                 `protobuf:"varint,3,opt,name=desired_size,json=desiredSize" json:"desired_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualMachineSpecData) Reset() {
	*x = EntityDTO_VirtualMachineSpecData{}
	mi := &file_CommonDTO_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualMachineSpecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualMachineSpecData) ProtoMessage() {}

func (x *EntityDTO_VirtualMachineSpecData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualMachineSpecData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualMachineSpecData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 15}
}

func (x *EntityDTO_VirtualMachineSpecData) GetMinSize() int32 {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return 0
}

func (x *EntityDTO_VirtualMachineSpecData) GetMaxSize() int32 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

func (x *EntityDTO_VirtualMachineSpecData) GetDesiredSize() int32 {
	if x != nil && x.DesiredSize != nil {
		return *x.DesiredSize
	}
	return 0
}

type EntityDTO_VirtualApplicationData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *string                `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	IpAddress     *string                `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Port          *int32                 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	ServiceType   *string                `protobuf:"bytes,4,opt,name=serviceType" json:"serviceType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualApplicationData) Reset() {
	*x = EntityDTO_VirtualApplicationData{}
	mi := &file_CommonDTO_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualApplicationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualApplicationData) ProtoMessage() {}

func (x *EntityDTO_VirtualApplicationData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualApplicationData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualApplicationData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 16}
}

func (x *EntityDTO_VirtualApplicationData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EntityDTO_VirtualApplicationData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityDTO_VirtualApplicationData) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *EntityDTO_VirtualApplicationData) GetServiceType() string {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ""
}

type EntityDTO_ServiceData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service type
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Service IP address
	IpAddress *string `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	// Service port
	Port *int32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Type of service (protocol)
	ServiceType *string `protobuf:"bytes,4,opt,name=serviceType" json:"serviceType,omitempty"`
	// Service data of a specific platform
	//
	// Types that are valid to be assigned to ServiceData:
	//
	//	*EntityDTO_ServiceData_KubernetesServiceData
	ServiceData   isEntityDTO_ServiceData_ServiceData `protobuf_oneof:"service_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ServiceData) Reset() {
	*x = EntityDTO_ServiceData{}
	mi := &file_CommonDTO_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ServiceData) ProtoMessage() {}

func (x *EntityDTO_ServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ServiceData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ServiceData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 17}
}

func (x *EntityDTO_ServiceData) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EntityDTO_ServiceData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityDTO_ServiceData) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *EntityDTO_ServiceData) GetServiceType() string {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return ""
}

func (x *EntityDTO_ServiceData) GetServiceData() isEntityDTO_ServiceData_ServiceData {
	if x != nil {
		return x.ServiceData
	}
	return nil
}

func (x *EntityDTO_ServiceData) GetKubernetesServiceData() *EntityDTO_KubernetesServiceData {
	if x != nil {
		if x, ok := x.ServiceData.(*EntityDTO_ServiceData_KubernetesServiceData); ok {
			return x.KubernetesServiceData
		}
	}
	return nil
}

type isEntityDTO_ServiceData_ServiceData interface {
	isEntityDTO_ServiceData_ServiceData()
}

type EntityDTO_ServiceData_KubernetesServiceData struct {
	KubernetesServiceData *EntityDTO_KubernetesServiceData `protobuf:"bytes,5,opt,name=kubernetes_service_data,json=kubernetesServiceData,oneof"`
}

func (*EntityDTO_ServiceData_KubernetesServiceData) isEntityDTO_ServiceData_ServiceData() {}

// Service data related to Kubernetes
type EntityDTO_KubernetesServiceData struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	ServiceType   *EntityDTO_KubernetesServiceData_ServiceType `protobuf:"varint,1,opt,name=service_type,json=serviceType,enum=common_dto.EntityDTO_KubernetesServiceData_ServiceType" json:"service_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_KubernetesServiceData) Reset() {
	*x = EntityDTO_KubernetesServiceData{}
	mi := &file_CommonDTO_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_KubernetesServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_KubernetesServiceData) ProtoMessage() {}

func (x *EntityDTO_KubernetesServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_KubernetesServiceData.ProtoReflect.Descriptor instead.
func (*EntityDTO_KubernetesServiceData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 18}
}

func (x *EntityDTO_KubernetesServiceData) GetServiceType() EntityDTO_KubernetesServiceData_ServiceType {
	if x != nil && x.ServiceType != nil {
		return *x.ServiceType
	}
	return EntityDTO_KubernetesServiceData_ClusterIP
}

type EntityDTO_BusinessAccountData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates whether data for this business account was discovered by the probe who is
	// creating this business account EntityDTO
	DataDiscovered *bool `protobuf:"varint,1,opt,name=dataDiscovered,def=0" json:"dataDiscovered,omitempty"`
	// The account id given by a 3rd party provider. e.g. in Azure its the subscription ID
	AccountId *string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	// Provider-specific account attributes that together identify the pricing used by an
	// account. e.g. in Azure, the offer ID and enrollment number associated with an account
	// to determine its pricing
	PricingIdentifiers []*PricingIdentifier `protobuf:"bytes,3,rep,name=pricing_identifiers,json=pricingIdentifiers" json:"pricing_identifiers,omitempty"`
	// Information used to uniquely associate this business account with a price table.
	PriceTableKeys []*PricingIdentifier `protobuf:"bytes,4,rep,name=price_table_keys,json=priceTableKeys" json:"price_table_keys,omitempty"`
	// Account type: Standard, Government_US, etc.
	AccountType   *EntityDTO_BusinessAccountData_AccountType `protobuf:"varint,5,opt,name=account_type,json=accountType,enum=common_dto.EntityDTO_BusinessAccountData_AccountType" json:"account_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_BusinessAccountData fields.
const (
	Default_EntityDTO_BusinessAccountData_DataDiscovered = bool(false)
)

func (x *EntityDTO_BusinessAccountData) Reset() {
	*x = EntityDTO_BusinessAccountData{}
	mi := &file_CommonDTO_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_BusinessAccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_BusinessAccountData) ProtoMessage() {}

func (x *EntityDTO_BusinessAccountData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_BusinessAccountData.ProtoReflect.Descriptor instead.
func (*EntityDTO_BusinessAccountData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 19}
}

func (x *EntityDTO_BusinessAccountData) GetDataDiscovered() bool {
	if x != nil && x.DataDiscovered != nil {
		return *x.DataDiscovered
	}
	return Default_EntityDTO_BusinessAccountData_DataDiscovered
}

func (x *EntityDTO_BusinessAccountData) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *EntityDTO_BusinessAccountData) GetPricingIdentifiers() []*PricingIdentifier {
	if x != nil {
		return x.PricingIdentifiers
	}
	return nil
}

func (x *EntityDTO_BusinessAccountData) GetPriceTableKeys() []*PricingIdentifier {
	if x != nil {
		return x.PriceTableKeys
	}
	return nil
}

func (x *EntityDTO_BusinessAccountData) GetAccountType() EntityDTO_BusinessAccountData_AccountType {
	if x != nil && x.AccountType != nil {
		return *x.AccountType
	}
	return EntityDTO_BusinessAccountData_Standard
}

// specific data for compute tier
type EntityDTO_ComputeTierData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier for matching compute tiers that belong to the same family.
	// TODO(OM-50516): Rename field to instanceSizeFamily.
	Family *string `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	// Quota family is the group that comprises of profiles that count towards the usage limit for
	// a defined category imposed on a Business Account.
	QuotaFamily *string `protobuf:"bytes,5,opt,name=quota_family,json=quotaFamily" json:"quota_family,omitempty"`
	// Specifies the dedicated storage configuration state for the compute tier.
	// Market uses this to decide whether or not to combine IOThroughput and NetThroughput that
	// vm is buying and add them together as consumption, then check with compute tier.
	DedicatedStorageNetworkState *EntityDTO_ComputeTierData_DedicatedStorageNetworkState `protobuf:"varint,2,opt,name=dedicated_storage_network_state,json=dedicatedStorageNetworkState,enum=common_dto.EntityDTO_ComputeTierData_DedicatedStorageNetworkState" json:"dedicated_storage_network_state,omitempty"`
	// A quantitative way to compare different tiers in a family. Each tier provides a certain
	// number of coupons, with the smallest tier in a family providing 1. Coupon is a our
	// internal way compare different tiers in a family. AWS defines Normalization
	// Factor (NFU) for different tier size:
	// https://aws.amazon.com/blogs/aws/new-instance-size-flexibility-for-ec2-reserved-instances/
	// In our internal mode, we defined the coupon to be NFU * 4. For example, "nano" has a NFU
	// of 0.25, so its coupon size is 0.25 * 4 = 1.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	XDeprecated_NumCoupons *int32   `protobuf:"varint,3,opt,name=__deprecated__num_coupons,json=DeprecatedNumCoupons" json:"__deprecated__num_coupons,omitempty"`
	NumCoupons             *float64 `protobuf:"fixed64,11,opt,name=num_coupons,json=numCoupons" json:"num_coupons,omitempty"`
	// Specifies the number of cores that matches the tier
	// This is used for license price calculation (since not all templates are used by VMs)
	// DEPRECATED: Use newer 'num_of_cores' instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	NumCores *int32 `protobuf:"varint,4,opt,name=num_cores,json=numCores" json:"num_cores,omitempty"`
	// DEPRECATED: Use newer 'instance_disk_counts' instead.
	// Number of Ephemeral disks supported by this tier
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	NumInstanceDisks *int32 `protobuf:"varint,6,opt,name=num_instance_disks,json=numInstanceDisks" json:"num_instance_disks,omitempty"`
	// Size of each Ephemeral disk supported by this tier in GB.
	InstanceDiskSizeGb *int32 `protobuf:"varint,7,opt,name=instance_disk_size_gb,json=instanceDiskSizeGb" json:"instance_disk_size_gb,omitempty"`
	// disk type of Ephemeral storage
	InstanceDiskType *EntityDTO_InstanceDiskType `protobuf:"varint,8,opt,name=instance_disk_type,json=instanceDiskType,enum=common_dto.EntityDTO_InstanceDiskType" json:"instance_disk_type,omitempty"`
	// property to determine if this ComputeTier supports burstable CPUs.
	BurstableCPU *bool                                     `protobuf:"varint,9,opt,name=burstableCPU" json:"burstableCPU,omitempty"`
	ScalePenalty *EntityDTO_ComputeTierData_ScalingPenalty `protobuf:"bytes,10,opt,name=scale_penalty,json=scalePenalty" json:"scale_penalty,omitempty"`
	// Possible disk counts supported for compute tier. Normally single value like 8 for AWS,
	// but others like GCP support multiple options like: 2, 4, 8, 16, or 24
	InstanceDiskCounts []int32 `protobuf:"varint,12,rep,name=instance_disk_counts,json=instanceDiskCounts" json:"instance_disk_counts,omitempty"`
	// new field to support machine types with fractional cores.
	NumOfCores             *float64               `protobuf:"fixed64,13,opt,name=num_of_cores,json=numOfCores" json:"num_of_cores,omitempty"`
	SupportedConsumerTypes []EntityDTO_EntityType `protobuf:"varint,14,rep,name=supported_consumer_types,json=supportedConsumerTypes,enum=common_dto.EntityDTO_EntityType" json:"supported_consumer_types,omitempty"`
	// If this instance type (e.g. 'g4dn.xlarge') supports GPU, then info about it.
	// Each instance here represents a GPU card type.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	GpuInfo []*EntityDTO_GpuInfo `protobuf:"bytes,15,rep,name=gpuInfo" json:"gpuInfo,omitempty"`
	// Generic accelerator card (e.g. GPU).
	AcceleratorCard []*EntityDTO_AcceleratorCardInfo `protobuf:"bytes,16,rep,name=accelerator_card,json=acceleratorCard" json:"accelerator_card,omitempty"`
	// If the compute tier has commodities can be configured per VM base.
	CustomConfigurable *bool `protobuf:"varint,17,opt,name=custom_configurable,json=customConfigurable" json:"custom_configurable,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EntityDTO_ComputeTierData) Reset() {
	*x = EntityDTO_ComputeTierData{}
	mi := &file_CommonDTO_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ComputeTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ComputeTierData) ProtoMessage() {}

func (x *EntityDTO_ComputeTierData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ComputeTierData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ComputeTierData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 20}
}

func (x *EntityDTO_ComputeTierData) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

func (x *EntityDTO_ComputeTierData) GetQuotaFamily() string {
	if x != nil && x.QuotaFamily != nil {
		return *x.QuotaFamily
	}
	return ""
}

func (x *EntityDTO_ComputeTierData) GetDedicatedStorageNetworkState() EntityDTO_ComputeTierData_DedicatedStorageNetworkState {
	if x != nil && x.DedicatedStorageNetworkState != nil {
		return *x.DedicatedStorageNetworkState
	}
	return EntityDTO_ComputeTierData_NOT_SUPPORTED
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ComputeTierData) GetXDeprecated_NumCoupons() int32 {
	if x != nil && x.XDeprecated_NumCoupons != nil {
		return *x.XDeprecated_NumCoupons
	}
	return 0
}

func (x *EntityDTO_ComputeTierData) GetNumCoupons() float64 {
	if x != nil && x.NumCoupons != nil {
		return *x.NumCoupons
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ComputeTierData) GetNumCores() int32 {
	if x != nil && x.NumCores != nil {
		return *x.NumCores
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ComputeTierData) GetNumInstanceDisks() int32 {
	if x != nil && x.NumInstanceDisks != nil {
		return *x.NumInstanceDisks
	}
	return 0
}

func (x *EntityDTO_ComputeTierData) GetInstanceDiskSizeGb() int32 {
	if x != nil && x.InstanceDiskSizeGb != nil {
		return *x.InstanceDiskSizeGb
	}
	return 0
}

func (x *EntityDTO_ComputeTierData) GetInstanceDiskType() EntityDTO_InstanceDiskType {
	if x != nil && x.InstanceDiskType != nil {
		return *x.InstanceDiskType
	}
	return EntityDTO_NONE
}

func (x *EntityDTO_ComputeTierData) GetBurstableCPU() bool {
	if x != nil && x.BurstableCPU != nil {
		return *x.BurstableCPU
	}
	return false
}

func (x *EntityDTO_ComputeTierData) GetScalePenalty() *EntityDTO_ComputeTierData_ScalingPenalty {
	if x != nil {
		return x.ScalePenalty
	}
	return nil
}

func (x *EntityDTO_ComputeTierData) GetInstanceDiskCounts() []int32 {
	if x != nil {
		return x.InstanceDiskCounts
	}
	return nil
}

func (x *EntityDTO_ComputeTierData) GetNumOfCores() float64 {
	if x != nil && x.NumOfCores != nil {
		return *x.NumOfCores
	}
	return 0
}

func (x *EntityDTO_ComputeTierData) GetSupportedConsumerTypes() []EntityDTO_EntityType {
	if x != nil {
		return x.SupportedConsumerTypes
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ComputeTierData) GetGpuInfo() []*EntityDTO_GpuInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

func (x *EntityDTO_ComputeTierData) GetAcceleratorCard() []*EntityDTO_AcceleratorCardInfo {
	if x != nil {
		return x.AcceleratorCard
	}
	return nil
}

func (x *EntityDTO_ComputeTierData) GetCustomConfigurable() bool {
	if x != nil && x.CustomConfigurable != nil {
		return *x.CustomConfigurable
	}
	return false
}

// specific data for dataWarehouse tier
type EntityDTO_DataWarehouseTierData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier for matching dataWarehouse tiers that belong to the same family.
	InstanceSizeFamily *string `protobuf:"bytes,1,opt,name=instance_size_family,json=instanceSizeFamily" json:"instance_size_family,omitempty"`
	// new field to support machine types with fractional cores.
	NumOfCores    *float64 `protobuf:"fixed64,2,opt,name=num_of_cores,json=numOfCores" json:"num_of_cores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DataWarehouseTierData) Reset() {
	*x = EntityDTO_DataWarehouseTierData{}
	mi := &file_CommonDTO_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DataWarehouseTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DataWarehouseTierData) ProtoMessage() {}

func (x *EntityDTO_DataWarehouseTierData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DataWarehouseTierData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DataWarehouseTierData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 21}
}

func (x *EntityDTO_DataWarehouseTierData) GetInstanceSizeFamily() string {
	if x != nil && x.InstanceSizeFamily != nil {
		return *x.InstanceSizeFamily
	}
	return ""
}

func (x *EntityDTO_DataWarehouseTierData) GetNumOfCores() float64 {
	if x != nil && x.NumOfCores != nil {
		return *x.NumOfCores
	}
	return 0
}

// specific data for repository
type EntityDTO_RepositoryData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Owner of repository.
	RepositoryOwner *string `protobuf:"bytes,1,opt,name=repository_owner,json=repositoryOwner" json:"repository_owner,omitempty"`
	// URL of repository.
	RepositoryUrl *string `protobuf:"bytes,2,opt,name=repository_url,json=repositoryUrl" json:"repository_url,omitempty"`
	// Data stored in the repository.
	//
	// Types that are valid to be assigned to RepositoryData:
	//
	//	*EntityDTO_RepositoryData_TerraformData_
	RepositoryData isEntityDTO_RepositoryData_RepositoryData `protobuf_oneof:"repository_data"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EntityDTO_RepositoryData) Reset() {
	*x = EntityDTO_RepositoryData{}
	mi := &file_CommonDTO_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_RepositoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_RepositoryData) ProtoMessage() {}

func (x *EntityDTO_RepositoryData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_RepositoryData.ProtoReflect.Descriptor instead.
func (*EntityDTO_RepositoryData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22}
}

func (x *EntityDTO_RepositoryData) GetRepositoryOwner() string {
	if x != nil && x.RepositoryOwner != nil {
		return *x.RepositoryOwner
	}
	return ""
}

func (x *EntityDTO_RepositoryData) GetRepositoryUrl() string {
	if x != nil && x.RepositoryUrl != nil {
		return *x.RepositoryUrl
	}
	return ""
}

func (x *EntityDTO_RepositoryData) GetRepositoryData() isEntityDTO_RepositoryData_RepositoryData {
	if x != nil {
		return x.RepositoryData
	}
	return nil
}

func (x *EntityDTO_RepositoryData) GetTerraformData() *EntityDTO_RepositoryData_TerraformData {
	if x != nil {
		if x, ok := x.RepositoryData.(*EntityDTO_RepositoryData_TerraformData_); ok {
			return x.TerraformData
		}
	}
	return nil
}

type isEntityDTO_RepositoryData_RepositoryData interface {
	isEntityDTO_RepositoryData_RepositoryData()
}

type EntityDTO_RepositoryData_TerraformData_ struct {
	TerraformData *EntityDTO_RepositoryData_TerraformData `protobuf:"bytes,3,opt,name=terraform_data,json=terraformData,oneof"` // stores all data regarding Terraform
}

func (*EntityDTO_RepositoryData_TerraformData_) isEntityDTO_RepositoryData_RepositoryData() {}

// DEPRECATED: Use AcceleratorCardInfo instead.
// Info about a single GPU graphics card. A VM's instance type could support multiple such
// cards. Initially at least, we will scale only b/w compute tiers that support same number
// of graphics cards
// Stores info about GPU cards of a particular type. There will be 1 instance of this if the
// VM instance type has cards of only 1 type. If there are 2 types of cards supported for
// a VM instance type (e.g. AMD and Nvidia), then we will have 2 instances of this GpuInfo.
//
// Deprecated: Marked as deprecated in CommonDTO.proto.
type EntityDTO_GpuInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Model of the GPU.
	Model *EntityDTO_GpuModel `protobuf:"varint,1,req,name=model,enum=common_dto.EntityDTO_GpuModel" json:"model,omitempty"`
	// How many cards of this type are present.
	Count *int32 `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	// How much memory in MiB each card supports.
	MemoryMiB     *float64 `protobuf:"fixed64,3,req,name=memoryMiB" json:"memoryMiB,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_GpuInfo) Reset() {
	*x = EntityDTO_GpuInfo{}
	mi := &file_CommonDTO_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_GpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_GpuInfo) ProtoMessage() {}

func (x *EntityDTO_GpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_GpuInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_GpuInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 23}
}

func (x *EntityDTO_GpuInfo) GetModel() EntityDTO_GpuModel {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return EntityDTO_NVIDIA_T4
}

func (x *EntityDTO_GpuInfo) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EntityDTO_GpuInfo) GetMemoryMiB() float64 {
	if x != nil && x.MemoryMiB != nil {
		return *x.MemoryMiB
	}
	return 0
}

// Stores info about a passthrough PCI GPU card in a VM. There will be a list of this if multiple
// cards are passthroughed to the VM.
type EntityDTO_PCIPassthroughGpuInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the GPU(pci bus id)
	// e.g. 0000:81:00.0
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Model of the GPU.
	// e.g. NVIDIA A100-PCIE-40GB
	Model         *string `protobuf:"bytes,2,req,name=model" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_PCIPassthroughGpuInfo) Reset() {
	*x = EntityDTO_PCIPassthroughGpuInfo{}
	mi := &file_CommonDTO_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_PCIPassthroughGpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_PCIPassthroughGpuInfo) ProtoMessage() {}

func (x *EntityDTO_PCIPassthroughGpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_PCIPassthroughGpuInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_PCIPassthroughGpuInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 24}
}

func (x *EntityDTO_PCIPassthroughGpuInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityDTO_PCIPassthroughGpuInfo) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

// Info about different type of accelerator cards.
// One instance of this has info about any single type of accelerator card.
type EntityDTO_AcceleratorCardInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Broad architecture family type.
	Family *EntityDTO_AcceleratorFamily `protobuf:"varint,1,opt,name=family,enum=common_dto.EntityDTO_AcceleratorFamily" json:"family,omitempty"`
	// Specific model/chip type within the family.
	Model *EntityDTO_AcceleratorModel `protobuf:"varint,2,opt,name=model,enum=common_dto.EntityDTO_AcceleratorModel" json:"model,omitempty"`
	// How many cards of this type are present.
	Count *int32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	// How much memory in MiB each card supports.
	MemoryMiB *int32 `protobuf:"varint,4,opt,name=memoryMiB" json:"memoryMiB,omitempty"`
	// GPU partition - applicable for only instance types supporting partial GPUs.
	// Certain Azure tiers (e.g. Standard_NV4as_v4) have 1/8 of full GPU, in which case
	// count is still 1 (representing full GPU), but this factor will be 8.
	Partition     *int32 `protobuf:"varint,5,opt,name=partition" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_AcceleratorCardInfo) Reset() {
	*x = EntityDTO_AcceleratorCardInfo{}
	mi := &file_CommonDTO_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_AcceleratorCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_AcceleratorCardInfo) ProtoMessage() {}

func (x *EntityDTO_AcceleratorCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_AcceleratorCardInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_AcceleratorCardInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 25}
}

func (x *EntityDTO_AcceleratorCardInfo) GetFamily() EntityDTO_AcceleratorFamily {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return EntityDTO_NVIDIA_TURING
}

func (x *EntityDTO_AcceleratorCardInfo) GetModel() EntityDTO_AcceleratorModel {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return EntityDTO_T4_NVIDIA
}

func (x *EntityDTO_AcceleratorCardInfo) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *EntityDTO_AcceleratorCardInfo) GetMemoryMiB() int32 {
	if x != nil && x.MemoryMiB != nil {
		return *x.MemoryMiB
	}
	return 0
}

func (x *EntityDTO_AcceleratorCardInfo) GetPartition() int32 {
	if x != nil && x.Partition != nil {
		return *x.Partition
	}
	return 0
}

// specific data for virtual volume
type EntityDTO_VirtualVolumeData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// float iops capacity of volume needed for cost calculations
	// The field is deprecated because the value is now carried in the sold commodity
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	StorageAccessCapacity *float32 `protobuf:"fixed32,1,opt,name=storage_access_capacity,json=storageAccessCapacity" json:"storage_access_capacity,omitempty"`
	// float storage capacity (MB) of volume needed for cost calculations
	// The field is deprecated because the value is now carried in the sold commodity
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	StorageAmountCapacity *float32 `protobuf:"fixed32,2,opt,name=storage_amount_capacity,json=storageAmountCapacity" json:"storage_amount_capacity,omitempty"`
	// enum identifying the replication type needed for cost calculations
	RedundancyType *EntityDTO_VirtualVolumeData_RedundancyType `protobuf:"varint,3,opt,name=redundancy_type,json=redundancyType,enum=common_dto.EntityDTO_VirtualVolumeData_RedundancyType" json:"redundancy_type,omitempty"`
	// files associated with this Virtual Volume
	File []*EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor `protobuf:"bytes,4,rep,name=file" json:"file,omitempty"`
	// string snapshot ID of volume needed for entity details
	SnapshotId *string `protobuf:"bytes,5,opt,name=snapshotId" json:"snapshotId,omitempty"`
	// Creation time (Unix ms)
	CreationTime *int64 `protobuf:"varint,6,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// volume's IO Throughput capacity
	// The field is deprecated because the value is now carried in the sold commodity
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	IoThroughputCapacity *float64 `protobuf:"fixed64,7,opt,name=io_throughput_capacity,json=ioThroughputCapacity" json:"io_throughput_capacity,omitempty"`
	// volume's IO Throughput used
	IoThroughputUsage *float64 `protobuf:"fixed64,8,opt,name=io_throughput_usage,json=ioThroughputUsage" json:"io_throughput_usage,omitempty"`
	// Whether the volume belongs to a VM
	AttachmentState *EntityDTO_VirtualVolumeData_AttachmentState `protobuf:"varint,9,opt,name=attachment_state,json=attachmentState,enum=common_dto.EntityDTO_VirtualVolumeData_AttachmentState" json:"attachment_state,omitempty"`
	// Whether the volume is encrypted
	Encrypted *bool `protobuf:"varint,10,opt,name=encrypted" json:"encrypted,omitempty"`
	// Whether the volume is Ephemeral
	IsEphemeral *bool `protobuf:"varint,11,opt,name=isEphemeral" json:"isEphemeral,omitempty"`
	// Average number of billed operations (e.g. reads, writes) per hour.
	HourlyBilledOps *float64 `protobuf:"fixed64,12,opt,name=hourly_billed_ops,json=hourlyBilledOps" json:"hourly_billed_ops,omitempty"`
	// Storage compatibility type for volume's consumer(VM that consumes the volume).
	// Consumer's compatibility type will affect volume's analysis. If consumer is
	// Premium compatible, the volume can be Premium/Standard storage type. However,
	// if consumer is Standard only compatible, the volume can only stay on Standard type.
	StorageCompatibilityForConsumer *EntityDTO_VirtualVolumeData_StorageCompatibilityType `protobuf:"varint,13,opt,name=storage_compatibility_for_consumer,json=storageCompatibilityForConsumer,enum=common_dto.EntityDTO_VirtualVolumeData_StorageCompatibilityType" json:"storage_compatibility_for_consumer,omitempty"`
	// Usage for the volume, i.e. what the volume is used for.
	UsageType *EntityDTO_VirtualVolumeData_UsageType `protobuf:"varint,14,opt,name=usage_type,json=usageType,enum=common_dto.EntityDTO_VirtualVolumeData_UsageType" json:"usage_type,omitempty"`
	// Last detach time, if known (Unix ms). If it is known that a volume has never been
	// attached, then should be equal to creation_time.
	LastDetachTime *int64 `protobuf:"varint,15,opt,name=last_detach_time,json=lastDetachTime" json:"last_detach_time,omitempty"`
	// If true, indicates that the probe needs more time to resolve last_detach_time. This can happen, for
	// example, if there is a lag in availability of information in the source API
	LastDetachTimePending *bool `protobuf:"varint,16,opt,name=last_detach_time_pending,json=lastDetachTimePending" json:"last_detach_time_pending,omitempty"`
	// the type of disk role mapped to a disk.
	DiskRole      *string `protobuf:"bytes,17,opt,name=disk_role,json=diskRole" json:"disk_role,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualVolumeData) Reset() {
	*x = EntityDTO_VirtualVolumeData{}
	mi := &file_CommonDTO_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualVolumeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualVolumeData) ProtoMessage() {}

func (x *EntityDTO_VirtualVolumeData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualVolumeData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualVolumeData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26}
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_VirtualVolumeData) GetStorageAccessCapacity() float32 {
	if x != nil && x.StorageAccessCapacity != nil {
		return *x.StorageAccessCapacity
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_VirtualVolumeData) GetStorageAmountCapacity() float32 {
	if x != nil && x.StorageAmountCapacity != nil {
		return *x.StorageAmountCapacity
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData) GetRedundancyType() EntityDTO_VirtualVolumeData_RedundancyType {
	if x != nil && x.RedundancyType != nil {
		return *x.RedundancyType
	}
	return EntityDTO_VirtualVolumeData_LRS
}

func (x *EntityDTO_VirtualVolumeData) GetFile() []*EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *EntityDTO_VirtualVolumeData) GetSnapshotId() string {
	if x != nil && x.SnapshotId != nil {
		return *x.SnapshotId
	}
	return ""
}

func (x *EntityDTO_VirtualVolumeData) GetCreationTime() int64 {
	if x != nil && x.CreationTime != nil {
		return *x.CreationTime
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_VirtualVolumeData) GetIoThroughputCapacity() float64 {
	if x != nil && x.IoThroughputCapacity != nil {
		return *x.IoThroughputCapacity
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData) GetIoThroughputUsage() float64 {
	if x != nil && x.IoThroughputUsage != nil {
		return *x.IoThroughputUsage
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData) GetAttachmentState() EntityDTO_VirtualVolumeData_AttachmentState {
	if x != nil && x.AttachmentState != nil {
		return *x.AttachmentState
	}
	return EntityDTO_VirtualVolumeData_ATTACHED
}

func (x *EntityDTO_VirtualVolumeData) GetEncrypted() bool {
	if x != nil && x.Encrypted != nil {
		return *x.Encrypted
	}
	return false
}

func (x *EntityDTO_VirtualVolumeData) GetIsEphemeral() bool {
	if x != nil && x.IsEphemeral != nil {
		return *x.IsEphemeral
	}
	return false
}

func (x *EntityDTO_VirtualVolumeData) GetHourlyBilledOps() float64 {
	if x != nil && x.HourlyBilledOps != nil {
		return *x.HourlyBilledOps
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData) GetStorageCompatibilityForConsumer() EntityDTO_VirtualVolumeData_StorageCompatibilityType {
	if x != nil && x.StorageCompatibilityForConsumer != nil {
		return *x.StorageCompatibilityForConsumer
	}
	return EntityDTO_VirtualVolumeData_PREMIUM
}

func (x *EntityDTO_VirtualVolumeData) GetUsageType() EntityDTO_VirtualVolumeData_UsageType {
	if x != nil && x.UsageType != nil {
		return *x.UsageType
	}
	return EntityDTO_VirtualVolumeData_SITE_RECOVERY
}

func (x *EntityDTO_VirtualVolumeData) GetLastDetachTime() int64 {
	if x != nil && x.LastDetachTime != nil {
		return *x.LastDetachTime
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData) GetLastDetachTimePending() bool {
	if x != nil && x.LastDetachTimePending != nil {
		return *x.LastDetachTimePending
	}
	return false
}

func (x *EntityDTO_VirtualVolumeData) GetDiskRole() string {
	if x != nil && x.DiskRole != nil {
		return *x.DiskRole
	}
	return ""
}

type EntityDTO_VirtualMachineData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	IpAddress []string               `protobuf:"bytes,1,rep,name=ipAddress" json:"ipAddress,omitempty"`
	// Carries specific properties for setting Entity State of this VM.
	VmState   *EntityDTO_VMState `protobuf:"bytes,2,opt,name=vmState" json:"vmState,omitempty"`
	GuestName *string            `protobuf:"bytes,3,opt,name=guestName" json:"guestName,omitempty"`
	// Annotation notes
	AnnotationNote []*EntityDTO_VirtualMachineData_AnnotationNote `protobuf:"bytes,4,rep,name=annotationNote" json:"annotationNote,omitempty"`
	// Total number of CPUs for the VM
	NumCpus *int32 `protobuf:"varint,6,opt,name=numCpus" json:"numCpus,omitempty"`
	// Billing type of a cloud VM -
	// on-demand vs bidding vs dedicated vs reserved
	// Please see {@link VMBillingType}
	BillingType *EntityDTO_VirtualMachineData_VMBillingType `protobuf:"varint,7,opt,name=billingType,enum=common_dto.EntityDTO_VirtualMachineData_VMBillingType" json:"billingType,omitempty"`
	// Cloud bidding VM product description -
	// which is one of the factors contributing to cloud VM cost
	BiddingProductDescription *string `protobuf:"bytes,8,opt,name=biddingProductDescription" json:"biddingProductDescription,omitempty"`
	// Number of Elastic Ips
	NumElasticIps *int32 `protobuf:"varint,9,opt,name=numElasticIps" json:"numElasticIps,omitempty"`
	// Display name list of the connected networks, this field is
	// current for XL only.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ConnectedNetwork []string `protobuf:"bytes,10,rep,name=connectedNetwork" json:"connectedNetwork,omitempty"`
	// VM Disk ID to Storage ID mapping. Multiple disks can point to the same storage.
	DiskToStorage map[string]string `protobuf:"bytes,11,rep,name=diskToStorage" json:"diskToStorage,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The licensing model of the VM (license included in compute price vs. BYOL)
	LicenseModel *EntityDTO_LicenseModel `protobuf:"varint,12,opt,name=licenseModel,enum=common_dto.EntityDTO_LicenseModel,def=1" json:"licenseModel,omitempty"`
	// The number of ephemeral storages attached to this VM
	NumEphemeralStorages *int32 `protobuf:"varint,13,opt,name=numEphemeralStorages" json:"numEphemeralStorages,omitempty"`
	// The number of cores which is provided by one socket
	CoresPerSocketRatio *int32 `protobuf:"varint,14,opt,name=coresPerSocketRatio,def=1" json:"coresPerSocketRatio,omitempty"`
	// The mark that shows whether cores per socket property of the VM can be changed or not
	CoresPerSocketChangeable *bool                                                 `protobuf:"varint,15,opt,name=coresPerSocketChangeable,def=0" json:"coresPerSocketChangeable,omitempty"`
	AgentSoftwareProperties  *EntityDTO_VirtualMachineData_AgentSoftwareProperties `protobuf:"bytes,16,opt,name=agentSoftwareProperties" json:"agentSoftwareProperties,omitempty"`
	// The virtual gpu profile of the VM
	VgpuProfile *string `protobuf:"bytes,17,opt,name=vgpuProfile" json:"vgpuProfile,omitempty"`
	// If VM is on a GPU instance type (e.g. 'g4dn.xlarge'), then this field has the GPU info.
	// Each instance of this represents a graphics card type. VM instance could have different
	// types of graphics cards, which case there will be more than 1 instance of this GpuInfo.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	GpuInfo []*EntityDTO_GpuInfo `protobuf:"bytes,18,rep,name=gpuInfo" json:"gpuInfo,omitempty"`
	// If this instance has a pass throughed GPU, then info about it.
	PciPassthroughGpuInfo []*EntityDTO_PCIPassthroughGpuInfo `protobuf:"bytes,19,rep,name=pciPassthroughGpuInfo" json:"pciPassthroughGpuInfo,omitempty"`
	// Generic accelerator card (e.g. GPU).
	AcceleratorCard []*EntityDTO_AcceleratorCardInfo `protobuf:"bytes,20,rep,name=accelerator_card,json=acceleratorCard" json:"accelerator_card,omitempty"`
	// ComputeTier Display Name for a custom VM
	CustomComputeTierName *string `protobuf:"bytes,21,opt,name=customComputeTierName" json:"customComputeTierName,omitempty"`
	// Minimum required hosts based on storage policy assigned to the VM
	MinimumHosts *int32 `protobuf:"varint,22,opt,name=minimumHosts" json:"minimumHosts,omitempty"`
	// The name of the scaling group (i.e. GCP Managed Instance Group) the VM belongs to.
	ScalingGroupName *string `protobuf:"bytes,23,opt,name=scalingGroupName" json:"scalingGroupName,omitempty"`
	// The vm template name used for the VMs in the scaling group.
	ScalingGroupTemplateName *string `protobuf:"bytes,24,opt,name=scalingGroupTemplateName" json:"scalingGroupTemplateName,omitempty"`
	// The mac addresses of the VM's network interfaces, if present
	MacAddress []string `protobuf:"bytes,25,rep,name=macAddress" json:"macAddress,omitempty"`
	// The mode of the APM agent running on this VM, if applicable
	AgentMode                *string                             `protobuf:"bytes,26,opt,name=agentMode" json:"agentMode,omitempty"`
	InfrastructureAsCodeData *EntityDTO_InfrastructureAsCodeData `protobuf:"bytes,27,opt,name=infrastructureAsCodeData" json:"infrastructureAsCodeData,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

// Default values for EntityDTO_VirtualMachineData fields.
const (
	Default_EntityDTO_VirtualMachineData_LicenseModel             = EntityDTO_LICENSE_INCLUDED
	Default_EntityDTO_VirtualMachineData_CoresPerSocketRatio      = int32(1)
	Default_EntityDTO_VirtualMachineData_CoresPerSocketChangeable = bool(false)
)

func (x *EntityDTO_VirtualMachineData) Reset() {
	*x = EntityDTO_VirtualMachineData{}
	mi := &file_CommonDTO_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualMachineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualMachineData) ProtoMessage() {}

func (x *EntityDTO_VirtualMachineData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualMachineData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualMachineData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 27}
}

func (x *EntityDTO_VirtualMachineData) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetVmState() *EntityDTO_VMState {
	if x != nil {
		return x.VmState
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetGuestName() string {
	if x != nil && x.GuestName != nil {
		return *x.GuestName
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetAnnotationNote() []*EntityDTO_VirtualMachineData_AnnotationNote {
	if x != nil {
		return x.AnnotationNote
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetNumCpus() int32 {
	if x != nil && x.NumCpus != nil {
		return *x.NumCpus
	}
	return 0
}

func (x *EntityDTO_VirtualMachineData) GetBillingType() EntityDTO_VirtualMachineData_VMBillingType {
	if x != nil && x.BillingType != nil {
		return *x.BillingType
	}
	return EntityDTO_VirtualMachineData_ONDEMAND
}

func (x *EntityDTO_VirtualMachineData) GetBiddingProductDescription() string {
	if x != nil && x.BiddingProductDescription != nil {
		return *x.BiddingProductDescription
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetNumElasticIps() int32 {
	if x != nil && x.NumElasticIps != nil {
		return *x.NumElasticIps
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_VirtualMachineData) GetConnectedNetwork() []string {
	if x != nil {
		return x.ConnectedNetwork
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetDiskToStorage() map[string]string {
	if x != nil {
		return x.DiskToStorage
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetLicenseModel() EntityDTO_LicenseModel {
	if x != nil && x.LicenseModel != nil {
		return *x.LicenseModel
	}
	return Default_EntityDTO_VirtualMachineData_LicenseModel
}

func (x *EntityDTO_VirtualMachineData) GetNumEphemeralStorages() int32 {
	if x != nil && x.NumEphemeralStorages != nil {
		return *x.NumEphemeralStorages
	}
	return 0
}

func (x *EntityDTO_VirtualMachineData) GetCoresPerSocketRatio() int32 {
	if x != nil && x.CoresPerSocketRatio != nil {
		return *x.CoresPerSocketRatio
	}
	return Default_EntityDTO_VirtualMachineData_CoresPerSocketRatio
}

func (x *EntityDTO_VirtualMachineData) GetCoresPerSocketChangeable() bool {
	if x != nil && x.CoresPerSocketChangeable != nil {
		return *x.CoresPerSocketChangeable
	}
	return Default_EntityDTO_VirtualMachineData_CoresPerSocketChangeable
}

func (x *EntityDTO_VirtualMachineData) GetAgentSoftwareProperties() *EntityDTO_VirtualMachineData_AgentSoftwareProperties {
	if x != nil {
		return x.AgentSoftwareProperties
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetVgpuProfile() string {
	if x != nil && x.VgpuProfile != nil {
		return *x.VgpuProfile
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_VirtualMachineData) GetGpuInfo() []*EntityDTO_GpuInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetPciPassthroughGpuInfo() []*EntityDTO_PCIPassthroughGpuInfo {
	if x != nil {
		return x.PciPassthroughGpuInfo
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetAcceleratorCard() []*EntityDTO_AcceleratorCardInfo {
	if x != nil {
		return x.AcceleratorCard
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetCustomComputeTierName() string {
	if x != nil && x.CustomComputeTierName != nil {
		return *x.CustomComputeTierName
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetMinimumHosts() int32 {
	if x != nil && x.MinimumHosts != nil {
		return *x.MinimumHosts
	}
	return 0
}

func (x *EntityDTO_VirtualMachineData) GetScalingGroupName() string {
	if x != nil && x.ScalingGroupName != nil {
		return *x.ScalingGroupName
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetScalingGroupTemplateName() string {
	if x != nil && x.ScalingGroupTemplateName != nil {
		return *x.ScalingGroupTemplateName
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetMacAddress() []string {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *EntityDTO_VirtualMachineData) GetAgentMode() string {
	if x != nil && x.AgentMode != nil {
		return *x.AgentMode
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData) GetInfrastructureAsCodeData() *EntityDTO_InfrastructureAsCodeData {
	if x != nil {
		return x.InfrastructureAsCodeData
	}
	return nil
}

type EntityDTO_InfrastructureAsCodeData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Usually in the format of organization/projectName.
	// Allows us to to filter which repo, state files have already been discovered and
	// we can stop reminding the customer to give us access.
	Repository *string `protobuf:"bytes,1,opt,name=repository" json:"repository,omitempty"`
	// Allows us to to filter which repo, state files have already been discovered and
	// we can stop reminding the customer to give us access.
	TerraformStateFileLocation *EntityDTO_RepositoryData_TerraformData_StateFileLocation `protobuf:"bytes,2,opt,name=terraformStateFileLocation" json:"terraformStateFileLocation,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *EntityDTO_InfrastructureAsCodeData) Reset() {
	*x = EntityDTO_InfrastructureAsCodeData{}
	mi := &file_CommonDTO_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_InfrastructureAsCodeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_InfrastructureAsCodeData) ProtoMessage() {}

func (x *EntityDTO_InfrastructureAsCodeData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_InfrastructureAsCodeData.ProtoReflect.Descriptor instead.
func (*EntityDTO_InfrastructureAsCodeData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 28}
}

func (x *EntityDTO_InfrastructureAsCodeData) GetRepository() string {
	if x != nil && x.Repository != nil {
		return *x.Repository
	}
	return ""
}

func (x *EntityDTO_InfrastructureAsCodeData) GetTerraformStateFileLocation() *EntityDTO_RepositoryData_TerraformData_StateFileLocation {
	if x != nil {
		return x.TerraformStateFileLocation
	}
	return nil
}

// Describes information related to cloud database/database server information
type EntityDTO_DatabaseData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Engine type of the related entity
	Engine *string `protobuf:"bytes,1,opt,name=engine" json:"engine,omitempty"`
	// Edition type of the specified database engine
	Edition *string `protobuf:"bytes,2,opt,name=edition" json:"edition,omitempty"`
	// Version of the specified database engine
	Version *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// deployment type of database server; e.g. Single-AZ or Multi-AZ
	DeploymentType *string `protobuf:"bytes,4,opt,name=deploymentType" json:"deploymentType,omitempty"`
	// license model of database server; e.g. BYOL or license included
	LicenseModel *string `protobuf:"bytes,5,opt,name=licenseModel" json:"licenseModel,omitempty"`
	// list of capacity limits per commodity that applies to this Database.
	LowerBoundScaleUp []*CommodityCapacityLimit `protobuf:"bytes,6,rep,name=lower_bound_scale_up,json=lowerBoundScaleUp" json:"lower_bound_scale_up,omitempty"`
	// Average number of billed operations (e.g. reads, writes) per hour.
	HourlyBilledOps *float64 `protobuf:"fixed64,7,opt,name=hourly_billed_ops,json=hourlyBilledOps" json:"hourly_billed_ops,omitempty"`
	// Total number of HA replicas for Azure vCore Hyperscale SQL DB.
	HaReplicaCount *int64 `protobuf:"varint,8,opt,name=ha_replica_count,json=haReplicaCount,def=0" json:"ha_replica_count,omitempty"`
	// Whether the DB's server instance configured to be a clustered node in failover
	// cluster or not.
	ServerConfiguration *string `protobuf:"bytes,9,opt,name=serverConfiguration" json:"serverConfiguration,omitempty"`
	// Multi-master (multiple region/location write) database.
	Replicas []*EntityDTO_DatabaseReplica `protobuf:"bytes,12,rep,name=replicas" json:"replicas,omitempty"`
	// Names of databases belonging to a SQL managed instance.
	MiDatabases   []string `protobuf:"bytes,13,rep,name=mi_databases,json=miDatabases" json:"mi_databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_DatabaseData fields.
const (
	Default_EntityDTO_DatabaseData_HaReplicaCount = int64(0)
)

func (x *EntityDTO_DatabaseData) Reset() {
	*x = EntityDTO_DatabaseData{}
	mi := &file_CommonDTO_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DatabaseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DatabaseData) ProtoMessage() {}

func (x *EntityDTO_DatabaseData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DatabaseData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DatabaseData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 29}
}

func (x *EntityDTO_DatabaseData) GetEngine() string {
	if x != nil && x.Engine != nil {
		return *x.Engine
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetEdition() string {
	if x != nil && x.Edition != nil {
		return *x.Edition
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetDeploymentType() string {
	if x != nil && x.DeploymentType != nil {
		return *x.DeploymentType
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetLicenseModel() string {
	if x != nil && x.LicenseModel != nil {
		return *x.LicenseModel
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetLowerBoundScaleUp() []*CommodityCapacityLimit {
	if x != nil {
		return x.LowerBoundScaleUp
	}
	return nil
}

func (x *EntityDTO_DatabaseData) GetHourlyBilledOps() float64 {
	if x != nil && x.HourlyBilledOps != nil {
		return *x.HourlyBilledOps
	}
	return 0
}

func (x *EntityDTO_DatabaseData) GetHaReplicaCount() int64 {
	if x != nil && x.HaReplicaCount != nil {
		return *x.HaReplicaCount
	}
	return Default_EntityDTO_DatabaseData_HaReplicaCount
}

func (x *EntityDTO_DatabaseData) GetServerConfiguration() string {
	if x != nil && x.ServerConfiguration != nil {
		return *x.ServerConfiguration
	}
	return ""
}

func (x *EntityDTO_DatabaseData) GetReplicas() []*EntityDTO_DatabaseReplica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *EntityDTO_DatabaseData) GetMiDatabases() []string {
	if x != nil {
		return x.MiDatabases
	}
	return nil
}

// Used to describe replicas within Databases/DBServers
type EntityDTO_DatabaseReplica struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the replica (can sometimes be a region)
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Some CSPs represent failover priority as a string and some do so as a number.
	// priority level of this standby location/worker taking over if there's a failure.
	FailoverPriority *string `protobuf:"bytes,2,opt,name=failover_priority,json=failoverPriority" json:"failover_priority,omitempty"`
	// role of this cluster ie reader or writer.
	ClusterRole *EntityDTO_ClusterRole `protobuf:"varint,3,opt,name=cluster_role,json=clusterRole,enum=common_dto.EntityDTO_ClusterRole" json:"cluster_role,omitempty"`
	// deployment type of this replica ie if it's zone redundant (Multi-az).
	DeploymentType *EntityDTO_DeploymentType `protobuf:"varint,4,opt,name=deployment_type,json=deploymentType,enum=common_dto.EntityDTO_DeploymentType" json:"deployment_type,omitempty"`
	// The region of this replica
	Region        *string `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DatabaseReplica) Reset() {
	*x = EntityDTO_DatabaseReplica{}
	mi := &file_CommonDTO_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DatabaseReplica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DatabaseReplica) ProtoMessage() {}

func (x *EntityDTO_DatabaseReplica) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DatabaseReplica.ProtoReflect.Descriptor instead.
func (*EntityDTO_DatabaseReplica) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 30}
}

func (x *EntityDTO_DatabaseReplica) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EntityDTO_DatabaseReplica) GetFailoverPriority() string {
	if x != nil && x.FailoverPriority != nil {
		return *x.FailoverPriority
	}
	return ""
}

func (x *EntityDTO_DatabaseReplica) GetClusterRole() EntityDTO_ClusterRole {
	if x != nil && x.ClusterRole != nil {
		return *x.ClusterRole
	}
	return EntityDTO_READER
}

func (x *EntityDTO_DatabaseReplica) GetDeploymentType() EntityDTO_DeploymentType {
	if x != nil && x.DeploymentType != nil {
		return *x.DeploymentType
	}
	return EntityDTO_SINGLE_AZ
}

func (x *EntityDTO_DatabaseReplica) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

// Describes information related to cloud database tier information
type EntityDTO_DatabaseTierData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Edition type of the specified database engine
	Edition *string `protobuf:"bytes,1,opt,name=edition" json:"edition,omitempty"`
	// Family database server belongs to; e.g. Premium etc
	Family        *string `protobuf:"bytes,2,opt,name=family" json:"family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DatabaseTierData) Reset() {
	*x = EntityDTO_DatabaseTierData{}
	mi := &file_CommonDTO_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DatabaseTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DatabaseTierData) ProtoMessage() {}

func (x *EntityDTO_DatabaseTierData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DatabaseTierData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DatabaseTierData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 31}
}

func (x *EntityDTO_DatabaseTierData) GetEdition() string {
	if x != nil && x.Edition != nil {
		return *x.Edition
	}
	return ""
}

func (x *EntityDTO_DatabaseTierData) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

// Describes information related to cloud /database tier server information
type EntityDTO_DatabaseServerTierData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Family database server belongs to; e.g. db.m1 etc
	Family *string `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	// Template Identifier : Computer Tier :: Storage Tier.
	TemplateIdentifier *string `protobuf:"bytes,2,opt,name=templateIdentifier" json:"templateIdentifier,omitempty"`
	// compute tier identifier.
	ComputeIdentifier *string `protobuf:"bytes,3,opt,name=computeIdentifier" json:"computeIdentifier,omitempty"`
	// storage tier identifier.
	StorageIdentifier *string `protobuf:"bytes,4,opt,name=storageIdentifier" json:"storageIdentifier,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EntityDTO_DatabaseServerTierData) Reset() {
	*x = EntityDTO_DatabaseServerTierData{}
	mi := &file_CommonDTO_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DatabaseServerTierData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DatabaseServerTierData) ProtoMessage() {}

func (x *EntityDTO_DatabaseServerTierData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DatabaseServerTierData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DatabaseServerTierData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 32}
}

func (x *EntityDTO_DatabaseServerTierData) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

func (x *EntityDTO_DatabaseServerTierData) GetTemplateIdentifier() string {
	if x != nil && x.TemplateIdentifier != nil {
		return *x.TemplateIdentifier
	}
	return ""
}

func (x *EntityDTO_DatabaseServerTierData) GetComputeIdentifier() string {
	if x != nil && x.ComputeIdentifier != nil {
		return *x.ComputeIdentifier
	}
	return ""
}

func (x *EntityDTO_DatabaseServerTierData) GetStorageIdentifier() string {
	if x != nil && x.StorageIdentifier != nil {
		return *x.StorageIdentifier
	}
	return ""
}

type EntityDTO_StorageControllerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optionally provide information about the IOPS the storage controller is capable of.
	// Either provide the estimated IOPS capacity directly, or supply
	// the counts for various types of disks so that it can be computed.
	//
	// Types that are valid to be assigned to IopsData:
	//
	//	*EntityDTO_StorageControllerData_IopsCapacity
	//	*EntityDTO_StorageControllerData_IopsComputeData
	IopsData      isEntityDTO_StorageControllerData_IopsData `protobuf_oneof:"iops_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_StorageControllerData) Reset() {
	*x = EntityDTO_StorageControllerData{}
	mi := &file_CommonDTO_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageControllerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageControllerData) ProtoMessage() {}

func (x *EntityDTO_StorageControllerData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageControllerData.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageControllerData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 33}
}

func (x *EntityDTO_StorageControllerData) GetIopsData() isEntityDTO_StorageControllerData_IopsData {
	if x != nil {
		return x.IopsData
	}
	return nil
}

func (x *EntityDTO_StorageControllerData) GetIopsCapacity() int64 {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_StorageControllerData_IopsCapacity); ok {
			return x.IopsCapacity
		}
	}
	return 0
}

func (x *EntityDTO_StorageControllerData) GetIopsComputeData() *EntityDTO_ComputeIopsData {
	if x != nil {
		if x, ok := x.IopsData.(*EntityDTO_StorageControllerData_IopsComputeData); ok {
			return x.IopsComputeData
		}
	}
	return nil
}

type isEntityDTO_StorageControllerData_IopsData interface {
	isEntityDTO_StorageControllerData_IopsData()
}

type EntityDTO_StorageControllerData_IopsCapacity struct {
	IopsCapacity int64 `protobuf:"varint,1,opt,name=iopsCapacity,oneof"`
}

type EntityDTO_StorageControllerData_IopsComputeData struct {
	IopsComputeData *EntityDTO_ComputeIopsData `protobuf:"bytes,2,opt,name=iopsComputeData,oneof"`
}

func (*EntityDTO_StorageControllerData_IopsCapacity) isEntityDTO_StorageControllerData_IopsData() {}

func (*EntityDTO_StorageControllerData_IopsComputeData) isEntityDTO_StorageControllerData_IopsData() {
}

type EntityDTO_ContainerPodData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace *string                `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	IpAddress *string                `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	FullName  *string                `protobuf:"bytes,3,opt,name=fullName" json:"fullName,omitempty"`
	Port      *string                `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	// The CPU frequency of the kubernetes node hosting this pod.
	// This value as of now is needed only to be able to convert the vcpu capacity of this
	// pod in capacity and usage widgets.
	// We show pod data in millicores but the VM data in Mhz, therefor the capacity picked
	// from VM for VCPU bought commodity needs conversion to millicores.
	HostingNodeCpuFrequency *float64                          `protobuf:"fixed64,5,opt,name=hostingNodeCpuFrequency" json:"hostingNodeCpuFrequency,omitempty"`
	ControllerData          *EntityDTO_WorkloadControllerData `protobuf:"bytes,6,opt,name=controllerData" json:"controllerData,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EntityDTO_ContainerPodData) Reset() {
	*x = EntityDTO_ContainerPodData{}
	mi := &file_CommonDTO_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ContainerPodData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ContainerPodData) ProtoMessage() {}

func (x *EntityDTO_ContainerPodData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ContainerPodData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ContainerPodData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 34}
}

func (x *EntityDTO_ContainerPodData) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *EntityDTO_ContainerPodData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityDTO_ContainerPodData) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *EntityDTO_ContainerPodData) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *EntityDTO_ContainerPodData) GetHostingNodeCpuFrequency() float64 {
	if x != nil && x.HostingNodeCpuFrequency != nil {
		return *x.HostingNodeCpuFrequency
	}
	return 0
}

func (x *EntityDTO_ContainerPodData) GetControllerData() *EntityDTO_WorkloadControllerData {
	if x != nil {
		return x.ControllerData
	}
	return nil
}

type EntityDTO_ContainerData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Namespace *string                `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	IpAddress *string                `protobuf:"bytes,2,opt,name=ipAddress" json:"ipAddress,omitempty"`
	FullName  *string                `protobuf:"bytes,3,opt,name=fullName" json:"fullName,omitempty"`
	Port      *string                `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	PodName   *string                `protobuf:"bytes,5,opt,name=podName" json:"podName,omitempty"`
	// Whether a container has CPU limits set.
	// If a container has CPU limits set, the discovered VCPU commodity capacity is the
	// specified CPU limits; otherwise, the discovered VCPU commodity capacity is node (VM)
	// VCPU capacity.
	HasCpuLimit *bool `protobuf:"varint,6,opt,name=hasCpuLimit" json:"hasCpuLimit,omitempty"`
	// Whether a container has memory limits set.
	// If a container has memory limits set, the discovered VMem commodity capacity is the
	// specified memory limits; otherwise, the discovered VMem commodity capacity is node (VM)
	// VMem capacity.
	HasMemLimit   *bool `protobuf:"varint,7,opt,name=hasMemLimit" json:"hasMemLimit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ContainerData) Reset() {
	*x = EntityDTO_ContainerData{}
	mi := &file_CommonDTO_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ContainerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ContainerData) ProtoMessage() {}

func (x *EntityDTO_ContainerData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ContainerData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ContainerData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 35}
}

func (x *EntityDTO_ContainerData) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *EntityDTO_ContainerData) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *EntityDTO_ContainerData) GetFullName() string {
	if x != nil && x.FullName != nil {
		return *x.FullName
	}
	return ""
}

func (x *EntityDTO_ContainerData) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *EntityDTO_ContainerData) GetPodName() string {
	if x != nil && x.PodName != nil {
		return *x.PodName
	}
	return ""
}

func (x *EntityDTO_ContainerData) GetHasCpuLimit() bool {
	if x != nil && x.HasCpuLimit != nil {
		return *x.HasCpuLimit
	}
	return false
}

func (x *EntityDTO_ContainerData) GetHasMemLimit() bool {
	if x != nil && x.HasMemLimit != nil {
		return *x.HasMemLimit
	}
	return false
}

// Data specific to ContainerSpec entity
type EntityDTO_ContainerSpecData struct {
	state             protoimpl.MessageState       `protogen:"open.v1"`
	CpuThrottlingType *EntityDTO_CPUThrottlingType `protobuf:"varint,1,opt,name=cpuThrottlingType,enum=common_dto.EntityDTO_CPUThrottlingType,def=1" json:"cpuThrottlingType,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for EntityDTO_ContainerSpecData fields.
const (
	Default_EntityDTO_ContainerSpecData_CpuThrottlingType = EntityDTO_timeBased
)

func (x *EntityDTO_ContainerSpecData) Reset() {
	*x = EntityDTO_ContainerSpecData{}
	mi := &file_CommonDTO_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ContainerSpecData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ContainerSpecData) ProtoMessage() {}

func (x *EntityDTO_ContainerSpecData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ContainerSpecData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ContainerSpecData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 36}
}

func (x *EntityDTO_ContainerSpecData) GetCpuThrottlingType() EntityDTO_CPUThrottlingType {
	if x != nil && x.CpuThrottlingType != nil {
		return *x.CpuThrottlingType
	}
	return Default_EntityDTO_ContainerSpecData_CpuThrottlingType
}

type EntityDTO_NetworkData struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	VlanId      *int32                 `protobuf:"varint,1,opt,name=vlanId,def=0" json:"vlanId,omitempty"`
	NetworkName *string                `protobuf:"bytes,2,opt,name=networkName" json:"networkName,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ClusterName    *string `protobuf:"bytes,3,opt,name=clusterName" json:"clusterName,omitempty"`
	DataCenterName *string `protobuf:"bytes,4,opt,name=dataCenterName" json:"dataCenterName,omitempty"`
	// Type of vSwitch
	VSwitchType   *EntityDTO_NetworkData_VSwitchType `protobuf:"varint,5,opt,name=vSwitchType,enum=common_dto.EntityDTO_NetworkData_VSwitchType" json:"vSwitchType,omitempty"`
	ClusterNames  []string                           `protobuf:"bytes,6,rep,name=clusterNames" json:"clusterNames,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_NetworkData fields.
const (
	Default_EntityDTO_NetworkData_VlanId = int32(0)
)

func (x *EntityDTO_NetworkData) Reset() {
	*x = EntityDTO_NetworkData{}
	mi := &file_CommonDTO_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_NetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_NetworkData) ProtoMessage() {}

func (x *EntityDTO_NetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_NetworkData.ProtoReflect.Descriptor instead.
func (*EntityDTO_NetworkData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 37}
}

func (x *EntityDTO_NetworkData) GetVlanId() int32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return Default_EntityDTO_NetworkData_VlanId
}

func (x *EntityDTO_NetworkData) GetNetworkName() string {
	if x != nil && x.NetworkName != nil {
		return *x.NetworkName
	}
	return ""
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_NetworkData) GetClusterName() string {
	if x != nil && x.ClusterName != nil {
		return *x.ClusterName
	}
	return ""
}

func (x *EntityDTO_NetworkData) GetDataCenterName() string {
	if x != nil && x.DataCenterName != nil {
		return *x.DataCenterName
	}
	return ""
}

func (x *EntityDTO_NetworkData) GetVSwitchType() EntityDTO_NetworkData_VSwitchType {
	if x != nil && x.VSwitchType != nil {
		return *x.VSwitchType
	}
	return EntityDTO_NetworkData_VIRTUAL_STANDARD_SWITCH
}

func (x *EntityDTO_NetworkData) GetClusterNames() []string {
	if x != nil {
		return x.ClusterNames
	}
	return nil
}

type EntityDTO_WorkloadControllerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ControllerType:
	//
	//	*EntityDTO_WorkloadControllerData_CronJobData
	//	*EntityDTO_WorkloadControllerData_CustomControllerData
	//	*EntityDTO_WorkloadControllerData_DaemonSetData
	//	*EntityDTO_WorkloadControllerData_DeploymentData
	//	*EntityDTO_WorkloadControllerData_JobData
	//	*EntityDTO_WorkloadControllerData_ReplicaSetData
	//	*EntityDTO_WorkloadControllerData_ReplicationControllerData
	//	*EntityDTO_WorkloadControllerData_StatefulSetData
	ControllerType isEntityDTO_WorkloadControllerData_ControllerType `protobuf_oneof:"controller_type"`
	ReplicaCount   *int32                                            `protobuf:"varint,9,opt,name=replica_count,json=replicaCount" json:"replica_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EntityDTO_WorkloadControllerData) Reset() {
	*x = EntityDTO_WorkloadControllerData{}
	mi := &file_CommonDTO_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_WorkloadControllerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_WorkloadControllerData) ProtoMessage() {}

func (x *EntityDTO_WorkloadControllerData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_WorkloadControllerData.ProtoReflect.Descriptor instead.
func (*EntityDTO_WorkloadControllerData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 38}
}

func (x *EntityDTO_WorkloadControllerData) GetControllerType() isEntityDTO_WorkloadControllerData_ControllerType {
	if x != nil {
		return x.ControllerType
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetCronJobData() *EntityDTO_CronJobData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_CronJobData); ok {
			return x.CronJobData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetCustomControllerData() *EntityDTO_CustomControllerData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_CustomControllerData); ok {
			return x.CustomControllerData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetDaemonSetData() *EntityDTO_DaemonSetData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_DaemonSetData); ok {
			return x.DaemonSetData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetDeploymentData() *EntityDTO_DeploymentData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_DeploymentData); ok {
			return x.DeploymentData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetJobData() *EntityDTO_JobData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_JobData); ok {
			return x.JobData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetReplicaSetData() *EntityDTO_ReplicaSetData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_ReplicaSetData); ok {
			return x.ReplicaSetData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetReplicationControllerData() *EntityDTO_ReplicationControllerData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_ReplicationControllerData); ok {
			return x.ReplicationControllerData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetStatefulSetData() *EntityDTO_StatefulSetData {
	if x != nil {
		if x, ok := x.ControllerType.(*EntityDTO_WorkloadControllerData_StatefulSetData); ok {
			return x.StatefulSetData
		}
	}
	return nil
}

func (x *EntityDTO_WorkloadControllerData) GetReplicaCount() int32 {
	if x != nil && x.ReplicaCount != nil {
		return *x.ReplicaCount
	}
	return 0
}

type isEntityDTO_WorkloadControllerData_ControllerType interface {
	isEntityDTO_WorkloadControllerData_ControllerType()
}

type EntityDTO_WorkloadControllerData_CronJobData struct {
	CronJobData *EntityDTO_CronJobData `protobuf:"bytes,1,opt,name=cron_job_data,json=cronJobData,oneof"`
}

type EntityDTO_WorkloadControllerData_CustomControllerData struct {
	CustomControllerData *EntityDTO_CustomControllerData `protobuf:"bytes,2,opt,name=custom_controller_data,json=customControllerData,oneof"`
}

type EntityDTO_WorkloadControllerData_DaemonSetData struct {
	DaemonSetData *EntityDTO_DaemonSetData `protobuf:"bytes,3,opt,name=daemon_set_data,json=daemonSetData,oneof"`
}

type EntityDTO_WorkloadControllerData_DeploymentData struct {
	DeploymentData *EntityDTO_DeploymentData `protobuf:"bytes,4,opt,name=deployment_data,json=deploymentData,oneof"`
}

type EntityDTO_WorkloadControllerData_JobData struct {
	JobData *EntityDTO_JobData `protobuf:"bytes,5,opt,name=job_data,json=jobData,oneof"`
}

type EntityDTO_WorkloadControllerData_ReplicaSetData struct {
	ReplicaSetData *EntityDTO_ReplicaSetData `protobuf:"bytes,6,opt,name=replica_set_data,json=replicaSetData,oneof"`
}

type EntityDTO_WorkloadControllerData_ReplicationControllerData struct {
	ReplicationControllerData *EntityDTO_ReplicationControllerData `protobuf:"bytes,7,opt,name=replication_controller_data,json=replicationControllerData,oneof"`
}

type EntityDTO_WorkloadControllerData_StatefulSetData struct {
	StatefulSetData *EntityDTO_StatefulSetData `protobuf:"bytes,8,opt,name=stateful_set_data,json=statefulSetData,oneof"`
}

func (*EntityDTO_WorkloadControllerData_CronJobData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_CustomControllerData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_DaemonSetData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_DeploymentData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_JobData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_ReplicaSetData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_ReplicationControllerData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

func (*EntityDTO_WorkloadControllerData_StatefulSetData) isEntityDTO_WorkloadControllerData_ControllerType() {
}

type EntityDTO_CronJobData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CronJobData) Reset() {
	*x = EntityDTO_CronJobData{}
	mi := &file_CommonDTO_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CronJobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CronJobData) ProtoMessage() {}

func (x *EntityDTO_CronJobData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CronJobData.ProtoReflect.Descriptor instead.
func (*EntityDTO_CronJobData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 39}
}

type EntityDTO_CustomControllerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of a custom controller. For example, "DeploymentConfig" for an Openshift DeploymentConfig.
	CustomControllerType *string `protobuf:"bytes,1,opt,name=custom_controller_type,json=customControllerType" json:"custom_controller_type,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EntityDTO_CustomControllerData) Reset() {
	*x = EntityDTO_CustomControllerData{}
	mi := &file_CommonDTO_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CustomControllerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CustomControllerData) ProtoMessage() {}

func (x *EntityDTO_CustomControllerData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CustomControllerData.ProtoReflect.Descriptor instead.
func (*EntityDTO_CustomControllerData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 40}
}

func (x *EntityDTO_CustomControllerData) GetCustomControllerType() string {
	if x != nil && x.CustomControllerType != nil {
		return *x.CustomControllerType
	}
	return ""
}

type EntityDTO_DaemonSetData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DaemonSetData) Reset() {
	*x = EntityDTO_DaemonSetData{}
	mi := &file_CommonDTO_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DaemonSetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DaemonSetData) ProtoMessage() {}

func (x *EntityDTO_DaemonSetData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DaemonSetData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DaemonSetData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 41}
}

type EntityDTO_DeploymentData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DeploymentData) Reset() {
	*x = EntityDTO_DeploymentData{}
	mi := &file_CommonDTO_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DeploymentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DeploymentData) ProtoMessage() {}

func (x *EntityDTO_DeploymentData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DeploymentData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DeploymentData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 42}
}

type EntityDTO_JobData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_JobData) Reset() {
	*x = EntityDTO_JobData{}
	mi := &file_CommonDTO_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_JobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_JobData) ProtoMessage() {}

func (x *EntityDTO_JobData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_JobData.ProtoReflect.Descriptor instead.
func (*EntityDTO_JobData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 43}
}

type EntityDTO_ReplicaSetData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ReplicaSetData) Reset() {
	*x = EntityDTO_ReplicaSetData{}
	mi := &file_CommonDTO_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReplicaSetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReplicaSetData) ProtoMessage() {}

func (x *EntityDTO_ReplicaSetData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReplicaSetData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReplicaSetData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 44}
}

type EntityDTO_ReplicationControllerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ReplicationControllerData) Reset() {
	*x = EntityDTO_ReplicationControllerData{}
	mi := &file_CommonDTO_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReplicationControllerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReplicationControllerData) ProtoMessage() {}

func (x *EntityDTO_ReplicationControllerData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReplicationControllerData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReplicationControllerData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 45}
}

type EntityDTO_StatefulSetData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_StatefulSetData) Reset() {
	*x = EntityDTO_StatefulSetData{}
	mi := &file_CommonDTO_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StatefulSetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StatefulSetData) ProtoMessage() {}

func (x *EntityDTO_StatefulSetData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StatefulSetData.ProtoReflect.Descriptor instead.
func (*EntityDTO_StatefulSetData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 46}
}

// Data specific to a Namespace entity.
type EntityDTO_NamespaceData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The average CPU frequency of the kubernetes nodes running in the cluster that
	// the namespace belongs to. This value can be used to convert namespace
	// CPU commodities (ie LimitQuota and RequestQuota) from MHz to millicores.
	// The units on this value are in MHz/core (not MHz/millicore)
	AverageNodeCpuFrequency *float64 `protobuf:"fixed64,1,opt,name=averageNodeCpuFrequency,def=1" json:"averageNodeCpuFrequency,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

// Default values for EntityDTO_NamespaceData fields.
const (
	Default_EntityDTO_NamespaceData_AverageNodeCpuFrequency = float64(1)
)

func (x *EntityDTO_NamespaceData) Reset() {
	*x = EntityDTO_NamespaceData{}
	mi := &file_CommonDTO_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_NamespaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_NamespaceData) ProtoMessage() {}

func (x *EntityDTO_NamespaceData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_NamespaceData.ProtoReflect.Descriptor instead.
func (*EntityDTO_NamespaceData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 47}
}

func (x *EntityDTO_NamespaceData) GetAverageNodeCpuFrequency() float64 {
	if x != nil && x.AverageNodeCpuFrequency != nil {
		return *x.AverageNodeCpuFrequency
	}
	return Default_EntityDTO_NamespaceData_AverageNodeCpuFrequency
}

// Data specific to a ContainerPlatformCluster entity.
type EntityDTO_ContainerPlatformClusterData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container CPU limits overcommitment ratio on the nodes (VMs) in a container platform
	// cluster. The value represents the ratio of total containers VCPU capacity / total nodes
	// VCPU capacity.
	VcpuOvercommitment *float64 `protobuf:"fixed64,1,opt,name=vcpuOvercommitment" json:"vcpuOvercommitment,omitempty"`
	// Container memory limits overcommitment ratio on the nodes (VMs) in a container platform
	// cluster. The value represents the ratio of total containers VMem capacity / total nodes
	// VMem capacity.
	VmemOvercommitment *float64 `protobuf:"fixed64,2,opt,name=vmemOvercommitment" json:"vmemOvercommitment,omitempty"`
	// The unit of measurements for VCPU type commodities sent from the probe running on this
	// container platform cluster.
	VcpuUnit      *EntityDTO_VcpuCommodityUnit `protobuf:"varint,3,opt,name=vcpuUnit,enum=common_dto.EntityDTO_VcpuCommodityUnit,def=1" json:"vcpuUnit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ContainerPlatformClusterData fields.
const (
	Default_EntityDTO_ContainerPlatformClusterData_VcpuUnit = EntityDTO_MILLICORE
)

func (x *EntityDTO_ContainerPlatformClusterData) Reset() {
	*x = EntityDTO_ContainerPlatformClusterData{}
	mi := &file_CommonDTO_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ContainerPlatformClusterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ContainerPlatformClusterData) ProtoMessage() {}

func (x *EntityDTO_ContainerPlatformClusterData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ContainerPlatformClusterData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ContainerPlatformClusterData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 48}
}

func (x *EntityDTO_ContainerPlatformClusterData) GetVcpuOvercommitment() float64 {
	if x != nil && x.VcpuOvercommitment != nil {
		return *x.VcpuOvercommitment
	}
	return 0
}

func (x *EntityDTO_ContainerPlatformClusterData) GetVmemOvercommitment() float64 {
	if x != nil && x.VmemOvercommitment != nil {
		return *x.VmemOvercommitment
	}
	return 0
}

func (x *EntityDTO_ContainerPlatformClusterData) GetVcpuUnit() EntityDTO_VcpuCommodityUnit {
	if x != nil && x.VcpuUnit != nil {
		return *x.VcpuUnit
	}
	return Default_EntityDTO_ContainerPlatformClusterData_VcpuUnit
}

type EntityDTO_VMState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Notifies if the VirtualMachine is connected.
	Connected     *bool `protobuf:"varint,1,opt,name=connected,def=1" json:"connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_VMState fields.
const (
	Default_EntityDTO_VMState_Connected = bool(true)
)

func (x *EntityDTO_VMState) Reset() {
	*x = EntityDTO_VMState{}
	mi := &file_CommonDTO_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VMState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VMState) ProtoMessage() {}

func (x *EntityDTO_VMState) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VMState.ProtoReflect.Descriptor instead.
func (*EntityDTO_VMState) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 49}
}

func (x *EntityDTO_VMState) GetConnected() bool {
	if x != nil && x.Connected != nil {
		return *x.Connected
	}
	return Default_EntityDTO_VMState_Connected
}

type EntityDTO_PhysicalMachineData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Carries specific properties for setting Entity State of this PM.
	PmState *EntityDTO_PMState `protobuf:"bytes,1,opt,name=pmState" json:"pmState,omitempty"`
	// Total number of CPU sockets on the PM.
	NumCpuSockets *int32 `protobuf:"varint,2,opt,name=numCpuSockets" json:"numCpuSockets,omitempty"`
	// Total number of CPU cores on the PM.
	NumCpuCores *int32 `protobuf:"varint,3,opt,name=numCpuCores" json:"numCpuCores,omitempty"`
	// Total number of physical CPU threads on the PM.
	NumCpuThreads *int32 `protobuf:"varint,4,opt,name=numCpuThreads" json:"numCpuThreads,omitempty"`
	// CPU frequency for one CPU core for the PM.
	CpuCoreMhz *int32 `protobuf:"varint,5,opt,name=cpuCoreMhz" json:"cpuCoreMhz,omitempty"`
	// Disk Groups do not go in ComposedOf
	DiskGroup []*EntityDTO_DiskGroupData `protobuf:"bytes,6,rep,name=diskGroup" json:"diskGroup,omitempty"`
	// Automation level of the physical machine
	AutomationLevel *EntityDTO_AutomationLevel `protobuf:"varint,7,opt,name=automationLevel,enum=common_dto.EntityDTO_AutomationLevel" json:"automationLevel,omitempty"`
	// Migration level specified for the cluster of the PM
	MigrationLevel           *string `protobuf:"bytes,8,opt,name=migrationLevel" json:"migrationLevel,omitempty"`
	SupportedVirtualGpuTypes *string `protobuf:"bytes,9,opt,name=supportedVirtualGpuTypes" json:"supportedVirtualGpuTypes,omitempty"`
	InstalledGpuDevices      *string `protobuf:"bytes,10,opt,name=installedGpuDevices" json:"installedGpuDevices,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *EntityDTO_PhysicalMachineData) Reset() {
	*x = EntityDTO_PhysicalMachineData{}
	mi := &file_CommonDTO_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_PhysicalMachineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_PhysicalMachineData) ProtoMessage() {}

func (x *EntityDTO_PhysicalMachineData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_PhysicalMachineData.ProtoReflect.Descriptor instead.
func (*EntityDTO_PhysicalMachineData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 50}
}

func (x *EntityDTO_PhysicalMachineData) GetPmState() *EntityDTO_PMState {
	if x != nil {
		return x.PmState
	}
	return nil
}

func (x *EntityDTO_PhysicalMachineData) GetNumCpuSockets() int32 {
	if x != nil && x.NumCpuSockets != nil {
		return *x.NumCpuSockets
	}
	return 0
}

func (x *EntityDTO_PhysicalMachineData) GetNumCpuCores() int32 {
	if x != nil && x.NumCpuCores != nil {
		return *x.NumCpuCores
	}
	return 0
}

func (x *EntityDTO_PhysicalMachineData) GetNumCpuThreads() int32 {
	if x != nil && x.NumCpuThreads != nil {
		return *x.NumCpuThreads
	}
	return 0
}

func (x *EntityDTO_PhysicalMachineData) GetCpuCoreMhz() int32 {
	if x != nil && x.CpuCoreMhz != nil {
		return *x.CpuCoreMhz
	}
	return 0
}

func (x *EntityDTO_PhysicalMachineData) GetDiskGroup() []*EntityDTO_DiskGroupData {
	if x != nil {
		return x.DiskGroup
	}
	return nil
}

func (x *EntityDTO_PhysicalMachineData) GetAutomationLevel() EntityDTO_AutomationLevel {
	if x != nil && x.AutomationLevel != nil {
		return *x.AutomationLevel
	}
	return EntityDTO_FULLY_AUTOMATED
}

func (x *EntityDTO_PhysicalMachineData) GetMigrationLevel() string {
	if x != nil && x.MigrationLevel != nil {
		return *x.MigrationLevel
	}
	return ""
}

func (x *EntityDTO_PhysicalMachineData) GetSupportedVirtualGpuTypes() string {
	if x != nil && x.SupportedVirtualGpuTypes != nil {
		return *x.SupportedVirtualGpuTypes
	}
	return ""
}

func (x *EntityDTO_PhysicalMachineData) GetInstalledGpuDevices() string {
	if x != nil && x.InstalledGpuDevices != nil {
		return *x.InstalledGpuDevices
	}
	return ""
}

type EntityDTO_PMState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Notifies if the PhysicalMachine is for failover.
	Failover      *bool `protobuf:"varint,1,opt,name=failover,def=0" json:"failover,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_PMState fields.
const (
	Default_EntityDTO_PMState_Failover = bool(false)
)

func (x *EntityDTO_PMState) Reset() {
	*x = EntityDTO_PMState{}
	mi := &file_CommonDTO_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_PMState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_PMState) ProtoMessage() {}

func (x *EntityDTO_PMState) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_PMState.ProtoReflect.Descriptor instead.
func (*EntityDTO_PMState) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 51}
}

func (x *EntityDTO_PMState) GetFailover() bool {
	if x != nil && x.Failover != nil {
		return *x.Failover
	}
	return Default_EntityDTO_PMState_Failover
}

// Properties specific for a particular type of virtual datacenter
type EntityDTO_VirtualDatacenterTypeProps struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	Role            *EntityDTO_VirtualDatacenterRole `protobuf:"varint,1,opt,name=role,enum=common_dto.EntityDTO_VirtualDatacenterRole,def=1" json:"role,omitempty"`
	SupportsNesting *bool                            `protobuf:"varint,2,opt,name=supportsNesting,def=0" json:"supportsNesting,omitempty"`
	NestedConsumer  *bool                            `protobuf:"varint,3,opt,name=nestedConsumer,def=0" json:"nestedConsumer,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for EntityDTO_VirtualDatacenterTypeProps fields.
const (
	Default_EntityDTO_VirtualDatacenterTypeProps_Role            = EntityDTO_CONSUMER
	Default_EntityDTO_VirtualDatacenterTypeProps_SupportsNesting = bool(false)
	Default_EntityDTO_VirtualDatacenterTypeProps_NestedConsumer  = bool(false)
)

func (x *EntityDTO_VirtualDatacenterTypeProps) Reset() {
	*x = EntityDTO_VirtualDatacenterTypeProps{}
	mi := &file_CommonDTO_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualDatacenterTypeProps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualDatacenterTypeProps) ProtoMessage() {}

func (x *EntityDTO_VirtualDatacenterTypeProps) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualDatacenterTypeProps.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualDatacenterTypeProps) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 52}
}

func (x *EntityDTO_VirtualDatacenterTypeProps) GetRole() EntityDTO_VirtualDatacenterRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_EntityDTO_VirtualDatacenterTypeProps_Role
}

func (x *EntityDTO_VirtualDatacenterTypeProps) GetSupportsNesting() bool {
	if x != nil && x.SupportsNesting != nil {
		return *x.SupportsNesting
	}
	return Default_EntityDTO_VirtualDatacenterTypeProps_SupportsNesting
}

func (x *EntityDTO_VirtualDatacenterTypeProps) GetNestedConsumer() bool {
	if x != nil && x.NestedConsumer != nil {
		return *x.NestedConsumer
	}
	return Default_EntityDTO_VirtualDatacenterTypeProps_NestedConsumer
}

type EntityDTO_VirtualDatacenterData struct {
	state              protoimpl.MessageState                      `protogen:"open.v1"`
	PmUuid             []string                                    `protobuf:"bytes,1,rep,name=pmUuid" json:"pmUuid,omitempty"`
	VmUuid             []string                                    `protobuf:"bytes,2,rep,name=vmUuid" json:"vmUuid,omitempty"`
	SupportsStorage    *bool                                       `protobuf:"varint,3,opt,name=supportsStorage,def=1" json:"supportsStorage,omitempty"`
	VdcTypeProps       *EntityDTO_VirtualDatacenterTypeProps       `protobuf:"bytes,4,opt,name=vdc_type_props,json=vdcTypeProps" json:"vdc_type_props,omitempty"`
	VdcAllocationModel *EntityDTO_VirtualDatacenterAllocationModel `protobuf:"varint,5,opt,name=vdc_allocation_model,json=vdcAllocationModel,enum=common_dto.EntityDTO_VirtualDatacenterAllocationModel" json:"vdc_allocation_model,omitempty"`
	DesktopPoolData    *EntityDTO_DesktopPoolData                  `protobuf:"bytes,6,opt,name=desktopPoolData" json:"desktopPoolData,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for EntityDTO_VirtualDatacenterData fields.
const (
	Default_EntityDTO_VirtualDatacenterData_SupportsStorage = bool(true)
)

func (x *EntityDTO_VirtualDatacenterData) Reset() {
	*x = EntityDTO_VirtualDatacenterData{}
	mi := &file_CommonDTO_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualDatacenterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualDatacenterData) ProtoMessage() {}

func (x *EntityDTO_VirtualDatacenterData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualDatacenterData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualDatacenterData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 53}
}

func (x *EntityDTO_VirtualDatacenterData) GetPmUuid() []string {
	if x != nil {
		return x.PmUuid
	}
	return nil
}

func (x *EntityDTO_VirtualDatacenterData) GetVmUuid() []string {
	if x != nil {
		return x.VmUuid
	}
	return nil
}

func (x *EntityDTO_VirtualDatacenterData) GetSupportsStorage() bool {
	if x != nil && x.SupportsStorage != nil {
		return *x.SupportsStorage
	}
	return Default_EntityDTO_VirtualDatacenterData_SupportsStorage
}

func (x *EntityDTO_VirtualDatacenterData) GetVdcTypeProps() *EntityDTO_VirtualDatacenterTypeProps {
	if x != nil {
		return x.VdcTypeProps
	}
	return nil
}

func (x *EntityDTO_VirtualDatacenterData) GetVdcAllocationModel() EntityDTO_VirtualDatacenterAllocationModel {
	if x != nil && x.VdcAllocationModel != nil {
		return *x.VdcAllocationModel
	}
	return EntityDTO_ALLOCATION_POOL
}

func (x *EntityDTO_VirtualDatacenterData) GetDesktopPoolData() *EntityDTO_DesktopPoolData {
	if x != nil {
		return x.DesktopPoolData
	}
	return nil
}

// VDI desktop pool details
type EntityDTO_DesktopPoolData struct {
	state          protoimpl.MessageState                               `protogen:"open.v1"`
	ProvisionType  *EntityDTO_DesktopPoolData_DesktopPoolProvisionType  `protobuf:"varint,1,req,name=provisionType,enum=common_dto.EntityDTO_DesktopPoolData_DesktopPoolProvisionType" json:"provisionType,omitempty"`
	CloneType      *EntityDTO_DesktopPoolData_DesktopPoolCloneType      `protobuf:"varint,2,req,name=cloneType,enum=common_dto.EntityDTO_DesktopPoolData_DesktopPoolCloneType" json:"cloneType,omitempty"`
	AssignmentType *EntityDTO_DesktopPoolData_DesktopPoolAssignmentType `protobuf:"varint,3,req,name=assignmentType,enum=common_dto.EntityDTO_DesktopPoolData_DesktopPoolAssignmentType" json:"assignmentType,omitempty"`
	// id of a virtual machine or entity profile used to create VDI desktops, if applicable
	MasterImage *string `protobuf:"bytes,4,opt,name=masterImage" json:"masterImage,omitempty"`
	// reference to a snapshot used to create desktops, if the master image above is a vm
	Snapshot      *string `protobuf:"bytes,5,opt,name=snapshot" json:"snapshot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DesktopPoolData) Reset() {
	*x = EntityDTO_DesktopPoolData{}
	mi := &file_CommonDTO_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DesktopPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DesktopPoolData) ProtoMessage() {}

func (x *EntityDTO_DesktopPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DesktopPoolData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DesktopPoolData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 54}
}

func (x *EntityDTO_DesktopPoolData) GetProvisionType() EntityDTO_DesktopPoolData_DesktopPoolProvisionType {
	if x != nil && x.ProvisionType != nil {
		return *x.ProvisionType
	}
	return EntityDTO_DesktopPoolData_ON_DEMAND
}

func (x *EntityDTO_DesktopPoolData) GetCloneType() EntityDTO_DesktopPoolData_DesktopPoolCloneType {
	if x != nil && x.CloneType != nil {
		return *x.CloneType
	}
	return EntityDTO_DesktopPoolData_FULL
}

func (x *EntityDTO_DesktopPoolData) GetAssignmentType() EntityDTO_DesktopPoolData_DesktopPoolAssignmentType {
	if x != nil && x.AssignmentType != nil {
		return *x.AssignmentType
	}
	return EntityDTO_DesktopPoolData_DYNAMIC
}

func (x *EntityDTO_DesktopPoolData) GetMasterImage() string {
	if x != nil && x.MasterImage != nil {
		return *x.MasterImage
	}
	return ""
}

func (x *EntityDTO_DesktopPoolData) GetSnapshot() string {
	if x != nil && x.Snapshot != nil {
		return *x.Snapshot
	}
	return ""
}

type EntityDTO_EntityProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     *string                `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Name          *string                `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,3,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_EntityProperty) Reset() {
	*x = EntityDTO_EntityProperty{}
	mi := &file_CommonDTO_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_EntityProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_EntityProperty) ProtoMessage() {}

func (x *EntityDTO_EntityProperty) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_EntityProperty.ProtoReflect.Descriptor instead.
func (*EntityDTO_EntityProperty) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 55}
}

func (x *EntityDTO_EntityProperty) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *EntityDTO_EntityProperty) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EntityDTO_EntityProperty) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type EntityDTO_VirtualMachineRelatedData struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Memory        *EntityDTO_MemoryData      `protobuf:"bytes,1,opt,name=memory" json:"memory,omitempty"`
	Processor     []*EntityDTO_ProcessorData `protobuf:"bytes,2,rep,name=processor" json:"processor,omitempty"`
	Io            []*EntityDTO_IoData        `protobuf:"bytes,3,rep,name=io" json:"io,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualMachineRelatedData) Reset() {
	*x = EntityDTO_VirtualMachineRelatedData{}
	mi := &file_CommonDTO_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualMachineRelatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualMachineRelatedData) ProtoMessage() {}

func (x *EntityDTO_VirtualMachineRelatedData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualMachineRelatedData.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualMachineRelatedData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 56}
}

func (x *EntityDTO_VirtualMachineRelatedData) GetMemory() *EntityDTO_MemoryData {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *EntityDTO_VirtualMachineRelatedData) GetProcessor() []*EntityDTO_ProcessorData {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *EntityDTO_VirtualMachineRelatedData) GetIo() []*EntityDTO_IoData {
	if x != nil {
		return x.Io
	}
	return nil
}

type EntityDTO_PhysicalMachineRelatedData struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Memory        *EntityDTO_MemoryData      `protobuf:"bytes,1,opt,name=memory" json:"memory,omitempty"`
	Processor     []*EntityDTO_ProcessorData `protobuf:"bytes,2,rep,name=processor" json:"processor,omitempty"`
	Io            []*EntityDTO_IoData        `protobuf:"bytes,3,rep,name=io" json:"io,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_PhysicalMachineRelatedData) Reset() {
	*x = EntityDTO_PhysicalMachineRelatedData{}
	mi := &file_CommonDTO_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_PhysicalMachineRelatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_PhysicalMachineRelatedData) ProtoMessage() {}

func (x *EntityDTO_PhysicalMachineRelatedData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_PhysicalMachineRelatedData.ProtoReflect.Descriptor instead.
func (*EntityDTO_PhysicalMachineRelatedData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 57}
}

func (x *EntityDTO_PhysicalMachineRelatedData) GetMemory() *EntityDTO_MemoryData {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *EntityDTO_PhysicalMachineRelatedData) GetProcessor() []*EntityDTO_ProcessorData {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *EntityDTO_PhysicalMachineRelatedData) GetIo() []*EntityDTO_IoData {
	if x != nil {
		return x.Io
	}
	return nil
}

type EntityDTO_StorageControllerRelatedData struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Memory        *EntityDTO_MemoryData      `protobuf:"bytes,1,opt,name=memory" json:"memory,omitempty"`
	Processor     []*EntityDTO_ProcessorData `protobuf:"bytes,2,rep,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_StorageControllerRelatedData) Reset() {
	*x = EntityDTO_StorageControllerRelatedData{}
	mi := &file_CommonDTO_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageControllerRelatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageControllerRelatedData) ProtoMessage() {}

func (x *EntityDTO_StorageControllerRelatedData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageControllerRelatedData.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageControllerRelatedData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 58}
}

func (x *EntityDTO_StorageControllerRelatedData) GetMemory() *EntityDTO_MemoryData {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *EntityDTO_StorageControllerRelatedData) GetProcessor() []*EntityDTO_ProcessorData {
	if x != nil {
		return x.Processor
	}
	return nil
}

type EntityDTO_MemoryData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	DisplayName   *string                `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Capacity      *float64               `protobuf:"fixed64,3,opt,name=capacity" json:"capacity,omitempty"`
	Dynamic       *bool                  `protobuf:"varint,4,opt,name=dynamic" json:"dynamic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_MemoryData) Reset() {
	*x = EntityDTO_MemoryData{}
	mi := &file_CommonDTO_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_MemoryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_MemoryData) ProtoMessage() {}

func (x *EntityDTO_MemoryData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_MemoryData.ProtoReflect.Descriptor instead.
func (*EntityDTO_MemoryData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 59}
}

func (x *EntityDTO_MemoryData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityDTO_MemoryData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityDTO_MemoryData) GetCapacity() float64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *EntityDTO_MemoryData) GetDynamic() bool {
	if x != nil && x.Dynamic != nil {
		return *x.Dynamic
	}
	return false
}

type EntityDTO_ProcessorData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	DisplayName   *string                `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Capacity      *float64               `protobuf:"fixed64,3,opt,name=capacity" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ProcessorData) Reset() {
	*x = EntityDTO_ProcessorData{}
	mi := &file_CommonDTO_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ProcessorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ProcessorData) ProtoMessage() {}

func (x *EntityDTO_ProcessorData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ProcessorData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ProcessorData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 60}
}

func (x *EntityDTO_ProcessorData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityDTO_ProcessorData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityDTO_ProcessorData) GetCapacity() float64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type EntityDTO_IoData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	DisplayName   *string                `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Speed         *float64               `protobuf:"fixed64,3,opt,name=speed" json:"speed,omitempty"`
	MacAddress    *string                `protobuf:"bytes,4,opt,name=macAddress" json:"macAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_IoData) Reset() {
	*x = EntityDTO_IoData{}
	mi := &file_CommonDTO_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_IoData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_IoData) ProtoMessage() {}

func (x *EntityDTO_IoData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_IoData.ProtoReflect.Descriptor instead.
func (*EntityDTO_IoData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 61}
}

func (x *EntityDTO_IoData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *EntityDTO_IoData) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *EntityDTO_IoData) GetSpeed() float64 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *EntityDTO_IoData) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

// Represents a collection of disks on a host for use by vSAN or storage technology
type EntityDTO_DiskGroupData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Disk          []*EntityDTO_DiskData  `protobuf:"bytes,1,rep,name=disk" json:"disk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DiskGroupData) Reset() {
	*x = EntityDTO_DiskGroupData{}
	mi := &file_CommonDTO_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DiskGroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DiskGroupData) ProtoMessage() {}

func (x *EntityDTO_DiskGroupData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DiskGroupData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DiskGroupData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 62}
}

func (x *EntityDTO_DiskGroupData) GetDisk() []*EntityDTO_DiskData {
	if x != nil {
		return x.Disk
	}
	return nil
}

// Represents an individual disk in a disk group
type EntityDTO_DiskData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          *EntityDTO_DiskRole    `protobuf:"varint,1,opt,name=role,enum=common_dto.EntityDTO_DiskRole" json:"role,omitempty"`
	Capacity      *int64                 `protobuf:"varint,2,opt,name=capacity" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_DiskData) Reset() {
	*x = EntityDTO_DiskData{}
	mi := &file_CommonDTO_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_DiskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_DiskData) ProtoMessage() {}

func (x *EntityDTO_DiskData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_DiskData.ProtoReflect.Descriptor instead.
func (*EntityDTO_DiskData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 63}
}

func (x *EntityDTO_DiskData) GetRole() EntityDTO_DiskRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return EntityDTO_ROLE_CACHE
}

func (x *EntityDTO_DiskData) GetCapacity() int64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// Represents the counts of various types of disk drives in a disk array.
// The information required to compute the IOPS capacity of a Service Entity
// Includes various flags to adjust the capacity as well as values to
// multiply by settings to get the capacity.
// Each count represents the number of discovered disks of that speed.
type EntityDTO_ComputeIopsData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If the hybrid flag is present, it modifies how the included disk counts are
	// used to compute IOPS capacity.
	Hybrid *bool `protobuf:"varint,1,opt,name=hybrid,def=0" json:"hybrid,omitempty"`
	// If the flashAvailable flag is present, it modifies how the included disk counts are
	// used to compute IOPS capacity.
	FlashAvailable *bool                     `protobuf:"varint,2,opt,name=flashAvailable,def=0" json:"flashAvailable,omitempty"`
	IopsItems      []*EntityDTO_IopsItemData `protobuf:"bytes,3,rep,name=iopsItems" json:"iopsItems,omitempty"`
	// The calculateFromHostedEntities flag defines whether IOPS capacity must be calculated as
	// sum of capacities of underlying entities (Storages or Disk Arrays)
	CalculateFromHostedEntities *bool `protobuf:"varint,4,opt,name=calculateFromHostedEntities,def=0" json:"calculateFromHostedEntities,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

// Default values for EntityDTO_ComputeIopsData fields.
const (
	Default_EntityDTO_ComputeIopsData_Hybrid                      = bool(false)
	Default_EntityDTO_ComputeIopsData_FlashAvailable              = bool(false)
	Default_EntityDTO_ComputeIopsData_CalculateFromHostedEntities = bool(false)
)

func (x *EntityDTO_ComputeIopsData) Reset() {
	*x = EntityDTO_ComputeIopsData{}
	mi := &file_CommonDTO_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ComputeIopsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ComputeIopsData) ProtoMessage() {}

func (x *EntityDTO_ComputeIopsData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ComputeIopsData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ComputeIopsData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 64}
}

func (x *EntityDTO_ComputeIopsData) GetHybrid() bool {
	if x != nil && x.Hybrid != nil {
		return *x.Hybrid
	}
	return Default_EntityDTO_ComputeIopsData_Hybrid
}

func (x *EntityDTO_ComputeIopsData) GetFlashAvailable() bool {
	if x != nil && x.FlashAvailable != nil {
		return *x.FlashAvailable
	}
	return Default_EntityDTO_ComputeIopsData_FlashAvailable
}

func (x *EntityDTO_ComputeIopsData) GetIopsItems() []*EntityDTO_IopsItemData {
	if x != nil {
		return x.IopsItems
	}
	return nil
}

func (x *EntityDTO_ComputeIopsData) GetCalculateFromHostedEntities() bool {
	if x != nil && x.CalculateFromHostedEntities != nil {
		return *x.CalculateFromHostedEntities
	}
	return Default_EntityDTO_ComputeIopsData_CalculateFromHostedEntities
}

type EntityDTO_IopsItemData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Usually derived from the IopsItemNames enum
	IopsItemName *string `protobuf:"bytes,1,req,name=iopsItemName" json:"iopsItemName,omitempty"`
	// The number of discovered disks of this type.
	IopsItemValue *int64 `protobuf:"varint,2,req,name=iopsItemValue" json:"iopsItemValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_IopsItemData) Reset() {
	*x = EntityDTO_IopsItemData{}
	mi := &file_CommonDTO_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_IopsItemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_IopsItemData) ProtoMessage() {}

func (x *EntityDTO_IopsItemData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_IopsItemData.ProtoReflect.Descriptor instead.
func (*EntityDTO_IopsItemData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 65}
}

func (x *EntityDTO_IopsItemData) GetIopsItemName() string {
	if x != nil && x.IopsItemName != nil {
		return *x.IopsItemName
	}
	return ""
}

func (x *EntityDTO_IopsItemData) GetIopsItemValue() int64 {
	if x != nil && x.IopsItemValue != nil {
		return *x.IopsItemValue
	}
	return 0
}

// Meta data representing the entity that will replace this proxy entity
type EntityDTO_ReplacementEntityMetaData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replacement entity is found by matching the values of the specified properties.
	// The value for the property must be set while building the entity. Specific properties
	// are pre-defined for some entity types. Generic properties can be set using
	// the EntityProperty.
	IdentifyingProp []string `protobuf:"bytes,1,rep,name=identifyingProp" json:"identifyingProp,omitempty"`
	// Fields of proxy entity to be patched as properties to real entity
	ReplacementFields []*EntityDTO_FieldReplacement `protobuf:"bytes,101,rep,name=replacementFields" json:"replacementFields,omitempty"`
	// names of properties to be patched to real entity
	ReplacementEntityProperties []string `protobuf:"bytes,102,rep,name=replacementEntityProperties" json:"replacementEntityProperties,omitempty"`
	// Proxy entities may also transfer their commodity data to the replacement entity
	BuyingCommTypes  []*EntityDTO_ReplacementCommodityPropertyData `protobuf:"bytes,2,rep,name=buyingCommTypes" json:"buyingCommTypes,omitempty"`
	SellingCommTypes []*EntityDTO_ReplacementCommodityPropertyData `protobuf:"bytes,3,rep,name=sellingCommTypes" json:"sellingCommTypes,omitempty"`
	// Metadata for matching external entity.
	// Name of the external property whose values will be examined
	// and matched to the values of the entity DTO properties listed above
	// The field is deprecated, extEntityPropDef must be used instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ExtEntityProp []string `protobuf:"bytes,4,rep,name=extEntityProp" json:"extEntityProp,omitempty"`
	// Definition of the external matching property of the entity on the server side.
	ExtEntityPropDef []*ServerEntityPropDef `protobuf:"bytes,5,rep,name=extEntityPropDef" json:"extEntityPropDef,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EntityDTO_ReplacementEntityMetaData) Reset() {
	*x = EntityDTO_ReplacementEntityMetaData{}
	mi := &file_CommonDTO_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReplacementEntityMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReplacementEntityMetaData) ProtoMessage() {}

func (x *EntityDTO_ReplacementEntityMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReplacementEntityMetaData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReplacementEntityMetaData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 66}
}

func (x *EntityDTO_ReplacementEntityMetaData) GetIdentifyingProp() []string {
	if x != nil {
		return x.IdentifyingProp
	}
	return nil
}

func (x *EntityDTO_ReplacementEntityMetaData) GetReplacementFields() []*EntityDTO_FieldReplacement {
	if x != nil {
		return x.ReplacementFields
	}
	return nil
}

func (x *EntityDTO_ReplacementEntityMetaData) GetReplacementEntityProperties() []string {
	if x != nil {
		return x.ReplacementEntityProperties
	}
	return nil
}

func (x *EntityDTO_ReplacementEntityMetaData) GetBuyingCommTypes() []*EntityDTO_ReplacementCommodityPropertyData {
	if x != nil {
		return x.BuyingCommTypes
	}
	return nil
}

func (x *EntityDTO_ReplacementEntityMetaData) GetSellingCommTypes() []*EntityDTO_ReplacementCommodityPropertyData {
	if x != nil {
		return x.SellingCommTypes
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ReplacementEntityMetaData) GetExtEntityProp() []string {
	if x != nil {
		return x.ExtEntityProp
	}
	return nil
}

func (x *EntityDTO_ReplacementEntityMetaData) GetExtEntityPropDef() []*ServerEntityPropDef {
	if x != nil {
		return x.ExtEntityPropDef
	}
	return nil
}

// Data to specify a field in the proxy's inner entity_data DTO that should patch as an
// EntityProperty to the main entity. The field can be nested within objects in the DTO.
// For example:
//
//	FieldReplacement {
//	     propertyName = "patchedProperty1234",
//	     path = FieldPath {
//	         field = "reserved_instance_data",
//	         next = FieldPath {
//	             field = "appliedScopes",
//	             next = null
//	         }
//	     }
//	}
//
// would refer to a field ReservedInstanceData.appliedScopes which would be patched as an
// EntityProperty with key = "patchedProperty1234".
type EntityDTO_FieldReplacement struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	PropertyName  *string                               `protobuf:"bytes,1,opt,name=propertyName" json:"propertyName,omitempty"`
	Path          *EntityDTO_FieldReplacement_FieldPath `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_FieldReplacement) Reset() {
	*x = EntityDTO_FieldReplacement{}
	mi := &file_CommonDTO_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_FieldReplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_FieldReplacement) ProtoMessage() {}

func (x *EntityDTO_FieldReplacement) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_FieldReplacement.ProtoReflect.Descriptor instead.
func (*EntityDTO_FieldReplacement) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 67}
}

func (x *EntityDTO_FieldReplacement) GetPropertyName() string {
	if x != nil && x.PropertyName != nil {
		return *x.PropertyName
	}
	return ""
}

func (x *EntityDTO_FieldReplacement) GetPath() *EntityDTO_FieldReplacement_FieldPath {
	if x != nil {
		return x.Path
	}
	return nil
}

// Data to specify which commodity types and properties
// should be patched when updating data in an entity from
// a proxy entity
type EntityDTO_ReplacementCommodityPropertyData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Which commodity type to patch.
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,req,name=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodityType,omitempty"`
	// Which properties to transfer from the proxy entity's commodity
	// to replacement entity's commodity.
	// If no properties are specified, transfer the whole commodity.
	PropertyName  []string `protobuf:"bytes,2,rep,name=propertyName" json:"propertyName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ReplacementCommodityPropertyData) Reset() {
	*x = EntityDTO_ReplacementCommodityPropertyData{}
	mi := &file_CommonDTO_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReplacementCommodityPropertyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReplacementCommodityPropertyData) ProtoMessage() {}

func (x *EntityDTO_ReplacementCommodityPropertyData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReplacementCommodityPropertyData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReplacementCommodityPropertyData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 68}
}

func (x *EntityDTO_ReplacementCommodityPropertyData) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *EntityDTO_ReplacementCommodityPropertyData) GetPropertyName() []string {
	if x != nil {
		return x.PropertyName
	}
	return nil
}

type EntityDTO_ConsumerPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Boolean property to indicate if the entity will shop together with other associated
	// entities in the Market for resources.
	ShopsTogether *bool `protobuf:"varint,1,opt,name=shopsTogether,def=0" json:"shopsTogether,omitempty"`
	// Boolean property to indicate if the entity is controllable by Market.
	// Set as false if the entity cannot be moved, righted size, etc...
	Controllable *bool `protobuf:"varint,2,opt,name=controllable,def=1" json:"controllable,omitempty"`
	// Boolean property to indicate whether the entity needs to clone
	// its supplier when it clones
	ProviderMustClone *bool `protobuf:"varint,3,opt,name=providerMustClone,def=0" json:"providerMustClone,omitempty"`
	// Boolean property to indicate whether the entity is a daemon
	Daemon *bool `protobuf:"varint,4,opt,name=daemon,def=0" json:"daemon,omitempty"`
	// Boolean property to indicate whether the entity is deletable
	Deletable     *bool `protobuf:"varint,5,opt,name=deletable,def=1" json:"deletable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ConsumerPolicy fields.
const (
	Default_EntityDTO_ConsumerPolicy_ShopsTogether     = bool(false)
	Default_EntityDTO_ConsumerPolicy_Controllable      = bool(true)
	Default_EntityDTO_ConsumerPolicy_ProviderMustClone = bool(false)
	Default_EntityDTO_ConsumerPolicy_Daemon            = bool(false)
	Default_EntityDTO_ConsumerPolicy_Deletable         = bool(true)
)

func (x *EntityDTO_ConsumerPolicy) Reset() {
	*x = EntityDTO_ConsumerPolicy{}
	mi := &file_CommonDTO_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ConsumerPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ConsumerPolicy) ProtoMessage() {}

func (x *EntityDTO_ConsumerPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ConsumerPolicy.ProtoReflect.Descriptor instead.
func (*EntityDTO_ConsumerPolicy) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 69}
}

func (x *EntityDTO_ConsumerPolicy) GetShopsTogether() bool {
	if x != nil && x.ShopsTogether != nil {
		return *x.ShopsTogether
	}
	return Default_EntityDTO_ConsumerPolicy_ShopsTogether
}

func (x *EntityDTO_ConsumerPolicy) GetControllable() bool {
	if x != nil && x.Controllable != nil {
		return *x.Controllable
	}
	return Default_EntityDTO_ConsumerPolicy_Controllable
}

func (x *EntityDTO_ConsumerPolicy) GetProviderMustClone() bool {
	if x != nil && x.ProviderMustClone != nil {
		return *x.ProviderMustClone
	}
	return Default_EntityDTO_ConsumerPolicy_ProviderMustClone
}

func (x *EntityDTO_ConsumerPolicy) GetDaemon() bool {
	if x != nil && x.Daemon != nil {
		return *x.Daemon
	}
	return Default_EntityDTO_ConsumerPolicy_Daemon
}

func (x *EntityDTO_ConsumerPolicy) GetDeletable() bool {
	if x != nil && x.Deletable != nil {
		return *x.Deletable
	}
	return Default_EntityDTO_ConsumerPolicy_Deletable
}

type EntityDTO_ProviderPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Provides availableForPlacement placement policy
	AvailableForPlacement *bool `protobuf:"varint,1,opt,name=availableForPlacement,def=1" json:"availableForPlacement,omitempty"`
	// Provides localSupported placement policy
	LocalSupported *bool `protobuf:"varint,2,opt,name=localSupported,def=0" json:"localSupported,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for EntityDTO_ProviderPolicy fields.
const (
	Default_EntityDTO_ProviderPolicy_AvailableForPlacement = bool(true)
	Default_EntityDTO_ProviderPolicy_LocalSupported        = bool(false)
)

func (x *EntityDTO_ProviderPolicy) Reset() {
	*x = EntityDTO_ProviderPolicy{}
	mi := &file_CommonDTO_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ProviderPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ProviderPolicy) ProtoMessage() {}

func (x *EntityDTO_ProviderPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ProviderPolicy.ProtoReflect.Descriptor instead.
func (*EntityDTO_ProviderPolicy) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 70}
}

func (x *EntityDTO_ProviderPolicy) GetAvailableForPlacement() bool {
	if x != nil && x.AvailableForPlacement != nil {
		return *x.AvailableForPlacement
	}
	return Default_EntityDTO_ProviderPolicy_AvailableForPlacement
}

func (x *EntityDTO_ProviderPolicy) GetLocalSupported() bool {
	if x != nil && x.LocalSupported != nil {
		return *x.LocalSupported
	}
	return Default_EntityDTO_ProviderPolicy_LocalSupported
}

type EntityDTO_ProcessorPoolData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Upper boundary of the Processing Units that can be utilized by VMs on the Processor Pool
	MaximumProcessingUnits *float32 `protobuf:"fixed32,1,req,name=maximumProcessingUnits" json:"maximumProcessingUnits,omitempty"`
	// Available Processing Units for VM on the Processor Pool
	AvailableProcessingUnits *float32 `protobuf:"fixed32,2,req,name=availableProcessingUnits" json:"availableProcessingUnits,omitempty"`
	// Used by Uncapped VMs during busy time
	ReservedProcessingUnits *float32 `protobuf:"fixed32,3,opt,name=reservedProcessingUnits" json:"reservedProcessingUnits,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EntityDTO_ProcessorPoolData) Reset() {
	*x = EntityDTO_ProcessorPoolData{}
	mi := &file_CommonDTO_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ProcessorPoolData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ProcessorPoolData) ProtoMessage() {}

func (x *EntityDTO_ProcessorPoolData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ProcessorPoolData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ProcessorPoolData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 71}
}

func (x *EntityDTO_ProcessorPoolData) GetMaximumProcessingUnits() float32 {
	if x != nil && x.MaximumProcessingUnits != nil {
		return *x.MaximumProcessingUnits
	}
	return 0
}

func (x *EntityDTO_ProcessorPoolData) GetAvailableProcessingUnits() float32 {
	if x != nil && x.AvailableProcessingUnits != nil {
		return *x.AvailableProcessingUnits
	}
	return 0
}

func (x *EntityDTO_ProcessorPoolData) GetReservedProcessingUnits() float32 {
	if x != nil && x.ReservedProcessingUnits != nil {
		return *x.ReservedProcessingUnits
	}
	return 0
}

// This represents a Reserved Instance which is a reservation of resource and capacity.
type EntityDTO_ReservedInstanceData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reserved Instance Id obtained from Cloud Service Provider.
	// Not present for a RI yet to be purchased.
	ReservedInstanceId *string `protobuf:"bytes,1,opt,name=reservedInstanceId" json:"reservedInstanceId,omitempty"`
	// The start timestamp of the reservation in milliseconds.
	StartTime *int64 `protobuf:"varint,2,req,name=startTime" json:"startTime,omitempty"`
	// The duration of the reservation in milliseconds.
	Duration *int64 `protobuf:"varint,3,req,name=duration" json:"duration,omitempty"`
	// Tenancy of the Reserved Instance.
	InstanceTenancy *EntityDTO_ReservedInstanceData_InstanceTenancy `protobuf:"varint,4,req,name=instanceTenancy,enum=common_dto.EntityDTO_ReservedInstanceData_InstanceTenancy" json:"instanceTenancy,omitempty"`
	// Class of RI.
	OfferingClass *EntityDTO_ReservedInstanceData_OfferingClass `protobuf:"varint,5,req,name=offeringClass,enum=common_dto.EntityDTO_ReservedInstanceData_OfferingClass" json:"offeringClass,omitempty"`
	// Represents the payment options.
	OfferingType *EntityDTO_ReservedInstanceData_OfferingType `protobuf:"varint,6,req,name=offeringType,enum=common_dto.EntityDTO_ReservedInstanceData_OfferingType" json:"offeringType,omitempty"`
	// By selecting an Availability Zone, the RI you purchase will provide a capacity reservation
	// and a discount for the use of instances in the selected Availability Zone.
	// When an Availability Zone isn’t specified, the RI is regional.
	AvailabilityZone *string `protobuf:"bytes,7,opt,name=availabilityZone" json:"availabilityZone,omitempty"`
	// The operating system for this RI; e.g. Linux.
	Platform *EntityDTO_ReservedInstanceData_Platform `protobuf:"varint,8,req,name=platform,enum=common_dto.EntityDTO_ReservedInstanceData_Platform" json:"platform,omitempty"`
	// Obsolete - use num_coupons instead.
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	NumberOfCoupons *int32 `protobuf:"varint,9,req,name=numberOfCoupons" json:"numberOfCoupons,omitempty"`
	// A quantitative way to compare different instance types in a family.
	NumCoupons *float64 `protobuf:"fixed64,25,opt,name=num_coupons,json=numCoupons" json:"num_coupons,omitempty"`
	// The number of coupons used (normalized to an hourly basis from daily billing data, so may not be an integer)
	NumberOfCouponsUsed *float64 `protobuf:"fixed64,10,req,name=numberOfCouponsUsed" json:"numberOfCouponsUsed,omitempty"`
	// The up front cost paid for this RI.
	FixedCost *float64 `protobuf:"fixed64,11,req,name=fixedCost" json:"fixedCost,omitempty"`
	// Hourly cost for usage.
	UsageCost *float64 `protobuf:"fixed64,12,req,name=usageCost" json:"usageCost,omitempty"`
	// Amount you are billed every hour, regardless of usage.
	RecurringCost *float64 `protobuf:"fixed64,13,req,name=recurringCost" json:"recurringCost,omitempty"`
	// The region in which this RI is applicable. A Regional RI can be applied to a VM running
	// in any availability zone in this region.
	Region *string `protobuf:"bytes,14,req,name=region" json:"region,omitempty"`
	// The number of instances covered in this reservation.
	InstanceCount *int32 `protobuf:"varint,15,req,name=instanceCount" json:"instanceCount,omitempty"`
	// id of VirtualMachineProfile related with this Reserved Instance. e.g. aws::VMPROFILE::c1.medium
	RelatedProfileId *string `protobuf:"bytes,16,req,name=relatedProfileId" json:"relatedProfileId,omitempty"`
	// ID of account that purchased this RI
	PurchasingAccountId *string `protobuf:"bytes,18,opt,name=purchasingAccountId" json:"purchasingAccountId,omitempty"`
	// If instanceSizeFlexible is true then this Reserved Instance can be applied to all
	// instance types within the family.
	InstanceSizeFlexible *bool `protobuf:"varint,20,opt,name=instanceSizeFlexible" json:"instanceSizeFlexible,omitempty"`
	// Reservation order ID. Currently it is used in Azure only.
	ReservationOrderId *string `protobuf:"bytes,21,opt,name=reservationOrderId" json:"reservationOrderId,omitempty"`
	// The property that determines if the RI is applicable to workloads running any platform or
	// to the workloads running the same platform as the RI's platform.
	PlatformFlexible *bool `protobuf:"varint,22,opt,name=platform_flexible,json=platformFlexible,def=0" json:"platform_flexible,omitempty"`
	// The end timestamp of the reservation in milliseconds.
	// this field is optional since this info is available for AWS RIs only.
	// we will continue estimating endtime for Azure RIs from its startTime and duration.
	EndTime *int64 `protobuf:"varint,23,opt,name=endTime" json:"endTime,omitempty"`
	// The reservation discount is applied to the matching resources in applied scope.
	AppliedScope  *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope `protobuf:"bytes,24,opt,name=applied_scope,json=appliedScope" json:"applied_scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_ReservedInstanceData fields.
const (
	Default_EntityDTO_ReservedInstanceData_PlatformFlexible = bool(false)
)

func (x *EntityDTO_ReservedInstanceData) Reset() {
	*x = EntityDTO_ReservedInstanceData{}
	mi := &file_CommonDTO_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReservedInstanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReservedInstanceData) ProtoMessage() {}

func (x *EntityDTO_ReservedInstanceData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReservedInstanceData.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReservedInstanceData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72}
}

func (x *EntityDTO_ReservedInstanceData) GetReservedInstanceId() string {
	if x != nil && x.ReservedInstanceId != nil {
		return *x.ReservedInstanceId
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetInstanceTenancy() EntityDTO_ReservedInstanceData_InstanceTenancy {
	if x != nil && x.InstanceTenancy != nil {
		return *x.InstanceTenancy
	}
	return EntityDTO_ReservedInstanceData_DEFAULT
}

func (x *EntityDTO_ReservedInstanceData) GetOfferingClass() EntityDTO_ReservedInstanceData_OfferingClass {
	if x != nil && x.OfferingClass != nil {
		return *x.OfferingClass
	}
	return EntityDTO_ReservedInstanceData_STANDARD
}

func (x *EntityDTO_ReservedInstanceData) GetOfferingType() EntityDTO_ReservedInstanceData_OfferingType {
	if x != nil && x.OfferingType != nil {
		return *x.OfferingType
	}
	return EntityDTO_ReservedInstanceData_ALL_UPFRONT
}

func (x *EntityDTO_ReservedInstanceData) GetAvailabilityZone() string {
	if x != nil && x.AvailabilityZone != nil {
		return *x.AvailabilityZone
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetPlatform() EntityDTO_ReservedInstanceData_Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return EntityDTO_ReservedInstanceData_UNKNOWN
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ReservedInstanceData) GetNumberOfCoupons() int32 {
	if x != nil && x.NumberOfCoupons != nil {
		return *x.NumberOfCoupons
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetNumCoupons() float64 {
	if x != nil && x.NumCoupons != nil {
		return *x.NumCoupons
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetNumberOfCouponsUsed() float64 {
	if x != nil && x.NumberOfCouponsUsed != nil {
		return *x.NumberOfCouponsUsed
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetFixedCost() float64 {
	if x != nil && x.FixedCost != nil {
		return *x.FixedCost
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetUsageCost() float64 {
	if x != nil && x.UsageCost != nil {
		return *x.UsageCost
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetRecurringCost() float64 {
	if x != nil && x.RecurringCost != nil {
		return *x.RecurringCost
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetInstanceCount() int32 {
	if x != nil && x.InstanceCount != nil {
		return *x.InstanceCount
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetRelatedProfileId() string {
	if x != nil && x.RelatedProfileId != nil {
		return *x.RelatedProfileId
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetPurchasingAccountId() string {
	if x != nil && x.PurchasingAccountId != nil {
		return *x.PurchasingAccountId
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetInstanceSizeFlexible() bool {
	if x != nil && x.InstanceSizeFlexible != nil {
		return *x.InstanceSizeFlexible
	}
	return false
}

func (x *EntityDTO_ReservedInstanceData) GetReservationOrderId() string {
	if x != nil && x.ReservationOrderId != nil {
		return *x.ReservationOrderId
	}
	return ""
}

func (x *EntityDTO_ReservedInstanceData) GetPlatformFlexible() bool {
	if x != nil && x.PlatformFlexible != nil {
		return *x.PlatformFlexible
	}
	return Default_EntityDTO_ReservedInstanceData_PlatformFlexible
}

func (x *EntityDTO_ReservedInstanceData) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *EntityDTO_ReservedInstanceData) GetAppliedScope() *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope {
	if x != nil {
		return x.AppliedScope
	}
	return nil
}

type EntityDTO_CloudCommitmentData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents the infrastructure scope.
	//
	// Types that are valid to be assigned to Scope:
	//
	//	*EntityDTO_CloudCommitmentData_ServiceRestricted_
	//	*EntityDTO_CloudCommitmentData_FamilyRestricted_
	Scope isEntityDTO_CloudCommitmentData_Scope `protobuf_oneof:"scope"`
	// Types that are valid to be assigned to Commitment:
	//
	//	*EntityDTO_CloudCommitmentData_Spend
	//	*EntityDTO_CloudCommitmentData_NumberCoupons
	//	*EntityDTO_CloudCommitmentData_NumberOfCoupons
	//	*EntityDTO_CloudCommitmentData_CommoditiesBought
	Commitment isEntityDTO_CloudCommitmentData_Commitment `protobuf_oneof:"commitment"`
	// use CommitmentPricingInfo
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	Payment                    *PaymentOption                                       `protobuf:"varint,5,opt,name=payment,enum=common_dto.PaymentOption" json:"payment,omitempty"`
	TermMilliseconds           *int64                                               `protobuf:"varint,6,opt,name=term_milliseconds,json=termMilliseconds" json:"term_milliseconds,omitempty"`
	StartTimeMilliseconds      *int64                                               `protobuf:"varint,7,opt,name=start_time_milliseconds,json=startTimeMilliseconds" json:"start_time_milliseconds,omitempty"`
	ExpirationTimeMilliseconds *int64                                               `protobuf:"varint,8,opt,name=expiration_time_milliseconds,json=expirationTimeMilliseconds" json:"expiration_time_milliseconds,omitempty"`
	VendorId                   *string                                              `protobuf:"bytes,9,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	ProviderSpecificType       *EntityDTO_CloudCommitmentData_ProviderType          `protobuf:"varint,10,opt,name=provider_specific_type,json=providerSpecificType,enum=common_dto.EntityDTO_CloudCommitmentData_ProviderType" json:"provider_specific_type,omitempty"`
	InstanceCount              *int32                                               `protobuf:"varint,16,opt,name=instance_count,json=instanceCount" json:"instance_count,omitempty"` // number of instances the commitment applies to
	CommitmentStatus           *EntityDTO_CloudCommitmentData_CloudCommitmentStatus `protobuf:"varint,12,opt,name=commitment_status,json=commitmentStatus,enum=common_dto.EntityDTO_CloudCommitmentData_CloudCommitmentStatus,def=0" json:"commitment_status,omitempty"`
	CommitmentScope            *EntityDTO_CloudCommitmentData_CloudCommitmentScope  `protobuf:"varint,13,opt,name=commitment_scope,json=commitmentScope,enum=common_dto.EntityDTO_CloudCommitmentData_CloudCommitmentScope,def=0" json:"commitment_scope,omitempty"`
	CommitmentScopeInfo        *EntityDTO_CloudCommitmentData_CommitmentScopeInfo   `protobuf:"bytes,14,opt,name=commitment_scope_info,json=commitmentScopeInfo" json:"commitment_scope_info,omitempty"`
	CommitmentPricingInfo      *EntityDTO_CloudCommitmentData_CommitmentPricingInfo `protobuf:"bytes,15,opt,name=commitment_pricing_info,json=commitmentPricingInfo" json:"commitment_pricing_info,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for EntityDTO_CloudCommitmentData fields.
const (
	Default_EntityDTO_CloudCommitmentData_CommitmentStatus = EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_STATUS_UNKNOWN
	Default_EntityDTO_CloudCommitmentData_CommitmentScope  = EntityDTO_CloudCommitmentData_CLOUD_COMMITMENT_SCOPE_UNKNOWN
)

func (x *EntityDTO_CloudCommitmentData) Reset() {
	*x = EntityDTO_CloudCommitmentData{}
	mi := &file_CommonDTO_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73}
}

func (x *EntityDTO_CloudCommitmentData) GetScope() isEntityDTO_CloudCommitmentData_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_CloudCommitmentData) GetServiceRestricted() *EntityDTO_CloudCommitmentData_ServiceRestricted {
	if x != nil {
		if x, ok := x.Scope.(*EntityDTO_CloudCommitmentData_ServiceRestricted_); ok {
			return x.ServiceRestricted
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_CloudCommitmentData) GetFamilyRestricted() *EntityDTO_CloudCommitmentData_FamilyRestricted {
	if x != nil {
		if x, ok := x.Scope.(*EntityDTO_CloudCommitmentData_FamilyRestricted_); ok {
			return x.FamilyRestricted
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData) GetCommitment() isEntityDTO_CloudCommitmentData_Commitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData) GetSpend() *CurrencyAmount {
	if x != nil {
		if x, ok := x.Commitment.(*EntityDTO_CloudCommitmentData_Spend); ok {
			return x.Spend
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_CloudCommitmentData) GetNumberCoupons() int64 {
	if x != nil {
		if x, ok := x.Commitment.(*EntityDTO_CloudCommitmentData_NumberCoupons); ok {
			return x.NumberCoupons
		}
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetNumberOfCoupons() float64 {
	if x != nil {
		if x, ok := x.Commitment.(*EntityDTO_CloudCommitmentData_NumberOfCoupons); ok {
			return x.NumberOfCoupons
		}
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetCommoditiesBought() *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought {
	if x != nil {
		if x, ok := x.Commitment.(*EntityDTO_CloudCommitmentData_CommoditiesBought); ok {
			return x.CommoditiesBought
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_CloudCommitmentData) GetPayment() PaymentOption {
	if x != nil && x.Payment != nil {
		return *x.Payment
	}
	return PaymentOption_ALL_UPFRONT
}

func (x *EntityDTO_CloudCommitmentData) GetTermMilliseconds() int64 {
	if x != nil && x.TermMilliseconds != nil {
		return *x.TermMilliseconds
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetStartTimeMilliseconds() int64 {
	if x != nil && x.StartTimeMilliseconds != nil {
		return *x.StartTimeMilliseconds
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetExpirationTimeMilliseconds() int64 {
	if x != nil && x.ExpirationTimeMilliseconds != nil {
		return *x.ExpirationTimeMilliseconds
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetVendorId() string {
	if x != nil && x.VendorId != nil {
		return *x.VendorId
	}
	return ""
}

func (x *EntityDTO_CloudCommitmentData) GetProviderSpecificType() EntityDTO_CloudCommitmentData_ProviderType {
	if x != nil && x.ProviderSpecificType != nil {
		return *x.ProviderSpecificType
	}
	return EntityDTO_CloudCommitmentData_SAVINGS_PLAN
}

func (x *EntityDTO_CloudCommitmentData) GetInstanceCount() int32 {
	if x != nil && x.InstanceCount != nil {
		return *x.InstanceCount
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData) GetCommitmentStatus() EntityDTO_CloudCommitmentData_CloudCommitmentStatus {
	if x != nil && x.CommitmentStatus != nil {
		return *x.CommitmentStatus
	}
	return Default_EntityDTO_CloudCommitmentData_CommitmentStatus
}

func (x *EntityDTO_CloudCommitmentData) GetCommitmentScope() EntityDTO_CloudCommitmentData_CloudCommitmentScope {
	if x != nil && x.CommitmentScope != nil {
		return *x.CommitmentScope
	}
	return Default_EntityDTO_CloudCommitmentData_CommitmentScope
}

func (x *EntityDTO_CloudCommitmentData) GetCommitmentScopeInfo() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo {
	if x != nil {
		return x.CommitmentScopeInfo
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData) GetCommitmentPricingInfo() *EntityDTO_CloudCommitmentData_CommitmentPricingInfo {
	if x != nil {
		return x.CommitmentPricingInfo
	}
	return nil
}

type isEntityDTO_CloudCommitmentData_Scope interface {
	isEntityDTO_CloudCommitmentData_Scope()
}

type EntityDTO_CloudCommitmentData_ServiceRestricted_ struct {
	// these should continue to be set in the probe. Can be removed once platform transitions to CommitmentScopeInfo
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	ServiceRestricted *EntityDTO_CloudCommitmentData_ServiceRestricted `protobuf:"bytes,1,opt,name=service_restricted,json=serviceRestricted,oneof"` // can be applied anywhere
}

type EntityDTO_CloudCommitmentData_FamilyRestricted_ struct {
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	FamilyRestricted *EntityDTO_CloudCommitmentData_FamilyRestricted `protobuf:"bytes,2,opt,name=family_restricted,json=familyRestricted,oneof"` // restricted to one instance family
}

func (*EntityDTO_CloudCommitmentData_ServiceRestricted_) isEntityDTO_CloudCommitmentData_Scope() {}

func (*EntityDTO_CloudCommitmentData_FamilyRestricted_) isEntityDTO_CloudCommitmentData_Scope() {}

type isEntityDTO_CloudCommitmentData_Commitment interface {
	isEntityDTO_CloudCommitmentData_Commitment()
}

type EntityDTO_CloudCommitmentData_Spend struct {
	Spend *CurrencyAmount `protobuf:"bytes,3,opt,name=spend,oneof"`
}

type EntityDTO_CloudCommitmentData_NumberCoupons struct {
	// this field is deprecated and use number_of_coupons for cloud commitments
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	NumberCoupons int64 `protobuf:"varint,4,opt,name=number_coupons,json=numberCoupons,oneof"`
}

type EntityDTO_CloudCommitmentData_NumberOfCoupons struct {
	// number_of_coupons is added to support cloud commitments
	NumberOfCoupons float64 `protobuf:"fixed64,17,opt,name=number_of_coupons,json=numberOfCoupons,oneof"`
}

type EntityDTO_CloudCommitmentData_CommoditiesBought struct {
	CommoditiesBought *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought `protobuf:"bytes,11,opt,name=commodities_bought,json=commoditiesBought,oneof"`
}

func (*EntityDTO_CloudCommitmentData_Spend) isEntityDTO_CloudCommitmentData_Commitment() {}

func (*EntityDTO_CloudCommitmentData_NumberCoupons) isEntityDTO_CloudCommitmentData_Commitment() {}

func (*EntityDTO_CloudCommitmentData_NumberOfCoupons) isEntityDTO_CloudCommitmentData_Commitment() {}

func (*EntityDTO_CloudCommitmentData_CommoditiesBought) isEntityDTO_CloudCommitmentData_Commitment() {
}

type EntityDTO_StorageData_StoragePolicy struct {
	state               protoimpl.MessageState             `protogen:"open.v1"`
	Redundancy          *EntityDTO_StorageRedundancyMethod `protobuf:"varint,1,opt,name=redundancy,enum=common_dto.EntityDTO_StorageRedundancyMethod" json:"redundancy,omitempty"`
	FailuresToTolerate  *int32                             `protobuf:"varint,2,opt,name=failuresToTolerate" json:"failuresToTolerate,omitempty"`
	SpaceReservationPct *int32                             `protobuf:"varint,3,opt,name=spaceReservationPct" json:"spaceReservationPct,omitempty"`
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	RaidFactor    *float32 `protobuf:"fixed32,4,opt,name=raidFactor" json:"raidFactor,omitempty"`
	MinimumHosts  *int32   `protobuf:"varint,5,opt,name=minimumHosts" json:"minimumHosts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_StorageData_StoragePolicy) Reset() {
	*x = EntityDTO_StorageData_StoragePolicy{}
	mi := &file_CommonDTO_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageData_StoragePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageData_StoragePolicy) ProtoMessage() {}

func (x *EntityDTO_StorageData_StoragePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageData_StoragePolicy.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageData_StoragePolicy) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *EntityDTO_StorageData_StoragePolicy) GetRedundancy() EntityDTO_StorageRedundancyMethod {
	if x != nil && x.Redundancy != nil {
		return *x.Redundancy
	}
	return EntityDTO_RAID0
}

func (x *EntityDTO_StorageData_StoragePolicy) GetFailuresToTolerate() int32 {
	if x != nil && x.FailuresToTolerate != nil {
		return *x.FailuresToTolerate
	}
	return 0
}

func (x *EntityDTO_StorageData_StoragePolicy) GetSpaceReservationPct() int32 {
	if x != nil && x.SpaceReservationPct != nil {
		return *x.SpaceReservationPct
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_StorageData_StoragePolicy) GetRaidFactor() float32 {
	if x != nil && x.RaidFactor != nil {
		return *x.RaidFactor
	}
	return 0
}

func (x *EntityDTO_StorageData_StoragePolicy) GetMinimumHosts() int32 {
	if x != nil && x.MinimumHosts != nil {
		return *x.MinimumHosts
	}
	return 0
}

type EntityDTO_StorageData_RawCapacity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Capacity      *int64                 `protobuf:"varint,1,opt,name=capacity" json:"capacity,omitempty"`
	Free          *int64                 `protobuf:"varint,2,opt,name=free" json:"free,omitempty"`
	Uncommitted   *int64                 `protobuf:"varint,3,opt,name=uncommitted" json:"uncommitted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_StorageData_RawCapacity) Reset() {
	*x = EntityDTO_StorageData_RawCapacity{}
	mi := &file_CommonDTO_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_StorageData_RawCapacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_StorageData_RawCapacity) ProtoMessage() {}

func (x *EntityDTO_StorageData_RawCapacity) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_StorageData_RawCapacity.ProtoReflect.Descriptor instead.
func (*EntityDTO_StorageData_RawCapacity) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *EntityDTO_StorageData_RawCapacity) GetCapacity() int64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *EntityDTO_StorageData_RawCapacity) GetFree() int64 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

func (x *EntityDTO_StorageData_RawCapacity) GetUncommitted() int64 {
	if x != nil && x.Uncommitted != nil {
		return *x.Uncommitted
	}
	return 0
}

type EntityDTO_CapacityOptionData_CapacityOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *int32                 `protobuf:"varint,1,req,name=identifier" json:"identifier,omitempty"`
	Capacity      *float64               `protobuf:"fixed64,2,req,name=capacity" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CapacityOptionData_CapacityOption) Reset() {
	*x = EntityDTO_CapacityOptionData_CapacityOption{}
	mi := &file_CommonDTO_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CapacityOptionData_CapacityOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CapacityOptionData_CapacityOption) ProtoMessage() {}

func (x *EntityDTO_CapacityOptionData_CapacityOption) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CapacityOptionData_CapacityOption.ProtoReflect.Descriptor instead.
func (*EntityDTO_CapacityOptionData_CapacityOption) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *EntityDTO_CapacityOptionData_CapacityOption) GetIdentifier() int32 {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return 0
}

func (x *EntityDTO_CapacityOptionData_CapacityOption) GetCapacity() float64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

type EntityDTO_ComputeTierData_ScalingPenalty struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Penalty *float32               `protobuf:"fixed32,1,opt,name=penalty" json:"penalty,omitempty"`
	// deprecated as a single  value in 8.0.7 & 8.1.0
	//
	// Deprecated: Marked as deprecated in CommonDTO.proto.
	Reason        *EntityDTO_ScalingPenaltyReason  `protobuf:"varint,2,opt,name=reason,enum=common_dto.EntityDTO_ScalingPenaltyReason" json:"reason,omitempty"`
	Reasons       []EntityDTO_ScalingPenaltyReason `protobuf:"varint,3,rep,name=reasons,enum=common_dto.EntityDTO_ScalingPenaltyReason" json:"reasons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ComputeTierData_ScalingPenalty) Reset() {
	*x = EntityDTO_ComputeTierData_ScalingPenalty{}
	mi := &file_CommonDTO_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ComputeTierData_ScalingPenalty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ComputeTierData_ScalingPenalty) ProtoMessage() {}

func (x *EntityDTO_ComputeTierData_ScalingPenalty) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ComputeTierData_ScalingPenalty.ProtoReflect.Descriptor instead.
func (*EntityDTO_ComputeTierData_ScalingPenalty) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 20, 0}
}

func (x *EntityDTO_ComputeTierData_ScalingPenalty) GetPenalty() float32 {
	if x != nil && x.Penalty != nil {
		return *x.Penalty
	}
	return 0
}

// Deprecated: Marked as deprecated in CommonDTO.proto.
func (x *EntityDTO_ComputeTierData_ScalingPenalty) GetReason() EntityDTO_ScalingPenaltyReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return EntityDTO_CORE_CONSTRAINED_TIER
}

func (x *EntityDTO_ComputeTierData_ScalingPenalty) GetReasons() []EntityDTO_ScalingPenaltyReason {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type EntityDTO_RepositoryData_TerraformData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Count of TF assets.
	AssetCount *int32 `protobuf:"varint,1,opt,name=asset_count,json=assetCount" json:"asset_count,omitempty"`
	// Count of TF resources.
	ResourceCount *int32 `protobuf:"varint,2,opt,name=resource_count,json=resourceCount" json:"resource_count,omitempty"`
	// array of state file location objects.
	StateFileLocation []*EntityDTO_RepositoryData_TerraformData_StateFileLocation `protobuf:"bytes,3,rep,name=state_file_location,json=stateFileLocation" json:"state_file_location,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EntityDTO_RepositoryData_TerraformData) Reset() {
	*x = EntityDTO_RepositoryData_TerraformData{}
	mi := &file_CommonDTO_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_RepositoryData_TerraformData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_RepositoryData_TerraformData) ProtoMessage() {}

func (x *EntityDTO_RepositoryData_TerraformData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_RepositoryData_TerraformData.ProtoReflect.Descriptor instead.
func (*EntityDTO_RepositoryData_TerraformData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22, 0}
}

func (x *EntityDTO_RepositoryData_TerraformData) GetAssetCount() int32 {
	if x != nil && x.AssetCount != nil {
		return *x.AssetCount
	}
	return 0
}

func (x *EntityDTO_RepositoryData_TerraformData) GetResourceCount() int32 {
	if x != nil && x.ResourceCount != nil {
		return *x.ResourceCount
	}
	return 0
}

func (x *EntityDTO_RepositoryData_TerraformData) GetStateFileLocation() []*EntityDTO_RepositoryData_TerraformData_StateFileLocation {
	if x != nil {
		return x.StateFileLocation
	}
	return nil
}

type EntityDTO_RepositoryData_TerraformData_StateFileLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of backend.
	BackendType *EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType `protobuf:"varint,1,opt,name=backend_type,json=backendType,enum=common_dto.EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType" json:"backend_type,omitempty"`
	// Types that are valid to be assigned to BackendConfig:
	//
	//	*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config_
	BackendConfig isEntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendConfig `protobuf_oneof:"backend_config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) Reset() {
	*x = EntityDTO_RepositoryData_TerraformData_StateFileLocation{}
	mi := &file_CommonDTO_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_RepositoryData_TerraformData_StateFileLocation) ProtoMessage() {}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_RepositoryData_TerraformData_StateFileLocation.ProtoReflect.Descriptor instead.
func (*EntityDTO_RepositoryData_TerraformData_StateFileLocation) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22, 0, 0}
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) GetBackendType() EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType {
	if x != nil && x.BackendType != nil {
		return *x.BackendType
	}
	return EntityDTO_RepositoryData_TerraformData_StateFileLocation_UNKNOWN
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) GetBackendConfig() isEntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendConfig {
	if x != nil {
		return x.BackendConfig
	}
	return nil
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation) GetS3Config() *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config {
	if x != nil {
		if x, ok := x.BackendConfig.(*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config_); ok {
			return x.S3Config
		}
	}
	return nil
}

type isEntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendConfig interface {
	isEntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendConfig()
}

type EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config_ struct {
	S3Config *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config `protobuf:"bytes,2,opt,name=s3_config,json=s3Config,oneof"`
}

func (*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config_) isEntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendConfig() {
}

type EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// s3 bucket name.
	Bucket *string `protobuf:"bytes,1,opt,name=bucket" json:"bucket,omitempty"`
	// s3 key path.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// s3 region.
	Region        *string `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) Reset() {
	*x = EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config{}
	mi := &file_CommonDTO_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) ProtoMessage() {}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config.ProtoReflect.Descriptor instead.
func (*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 22, 0, 0, 0}
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

// We can have multiple files inside a virtual volume.  For example, for VC Storage
// Browsing in XL. This message describes the file
type EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full pathname with Unix-style separators
	Path *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	// Size of the file
	SizeKb *int64 `protobuf:"varint,2,opt,name=sizeKb" json:"sizeKb,omitempty"`
	// Type of the file, if available
	Type *EntityDTO_VirtualMachineFileType `protobuf:"varint,3,opt,name=type,enum=common_dto.EntityDTO_VirtualMachineFileType" json:"type,omitempty"`
	// Modification time in UTC milliseconds since epoch
	ModificationTimeMs *int64 `protobuf:"varint,4,opt,name=modificationTimeMs" json:"modificationTimeMs,omitempty"`
	// Potentially empty list of other paths to the file, links in Unix terminology
	// VSAN has first level directory symbolic links with user friendly names,
	// which are what we want to match the ignore directory patterns against.
	LinkedPaths []string `protobuf:"bytes,5,rep,name=linkedPaths" json:"linkedPaths,omitempty"`
	// Describes whether the file has already been deleted.
	IsDeleted     *bool `protobuf:"varint,6,opt,name=isDeleted,def=0" json:"isDeleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor fields.
const (
	Default_EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor_IsDeleted = bool(false)
)

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) Reset() {
	*x = EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor{}
	mi := &file_CommonDTO_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) ProtoMessage() {}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 26, 0}
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetSizeKb() int64 {
	if x != nil && x.SizeKb != nil {
		return *x.SizeKb
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetType() EntityDTO_VirtualMachineFileType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EntityDTO_CONFIGURATION
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetModificationTimeMs() int64 {
	if x != nil && x.ModificationTimeMs != nil {
		return *x.ModificationTimeMs
	}
	return 0
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetLinkedPaths() []string {
	if x != nil {
		return x.LinkedPaths
	}
	return nil
}

func (x *EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor) GetIsDeleted() bool {
	if x != nil && x.IsDeleted != nil {
		return *x.IsDeleted
	}
	return Default_EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor_IsDeleted
}

// Annotation note (currently used in VC only)
type EntityDTO_VirtualMachineData_AnnotationNote struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Annotation key
	Key *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	// Annotation value
	Value         *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualMachineData_AnnotationNote) Reset() {
	*x = EntityDTO_VirtualMachineData_AnnotationNote{}
	mi := &file_CommonDTO_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualMachineData_AnnotationNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualMachineData_AnnotationNote) ProtoMessage() {}

func (x *EntityDTO_VirtualMachineData_AnnotationNote) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualMachineData_AnnotationNote.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualMachineData_AnnotationNote) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 27, 0}
}

func (x *EntityDTO_VirtualMachineData_AnnotationNote) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData_AnnotationNote) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Installed Agent software property
type EntityDTO_VirtualMachineData_AgentSoftwareProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// agent software name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// agent software version
	Version       *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_VirtualMachineData_AgentSoftwareProperties) Reset() {
	*x = EntityDTO_VirtualMachineData_AgentSoftwareProperties{}
	mi := &file_CommonDTO_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_VirtualMachineData_AgentSoftwareProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_VirtualMachineData_AgentSoftwareProperties) ProtoMessage() {}

func (x *EntityDTO_VirtualMachineData_AgentSoftwareProperties) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_VirtualMachineData_AgentSoftwareProperties.ProtoReflect.Descriptor instead.
func (*EntityDTO_VirtualMachineData_AgentSoftwareProperties) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 27, 2}
}

func (x *EntityDTO_VirtualMachineData_AgentSoftwareProperties) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EntityDTO_VirtualMachineData_AgentSoftwareProperties) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type EntityDTO_FieldReplacement_FieldPath struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Field         *string                               `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
	Next          *EntityDTO_FieldReplacement_FieldPath `protobuf:"bytes,2,opt,name=next" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_FieldReplacement_FieldPath) Reset() {
	*x = EntityDTO_FieldReplacement_FieldPath{}
	mi := &file_CommonDTO_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_FieldReplacement_FieldPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_FieldReplacement_FieldPath) ProtoMessage() {}

func (x *EntityDTO_FieldReplacement_FieldPath) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_FieldReplacement_FieldPath.ProtoReflect.Descriptor instead.
func (*EntityDTO_FieldReplacement_FieldPath) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 67, 0}
}

func (x *EntityDTO_FieldReplacement_FieldPath) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *EntityDTO_FieldReplacement_FieldPath) GetNext() *EntityDTO_FieldReplacement_FieldPath {
	if x != nil {
		return x.Next
	}
	return nil
}

// The reservation discount is applied to the matching resources in applied scope.
type EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reservation's scope can cover one account or multiple accounts if shared.
	//
	// Types that are valid to be assigned to AppliedScopeType:
	//
	//	*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope_
	//	*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope_
	AppliedScopeType isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType `protobuf_oneof:"applied_scope_type"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) Reset() {
	*x = EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope{}
	mi := &file_CommonDTO_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) ProtoMessage() {}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 0}
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) GetAppliedScopeType() isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType {
	if x != nil {
		return x.AppliedScopeType
	}
	return nil
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) GetSharedReservedInstanceScope() *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope {
	if x != nil {
		if x, ok := x.AppliedScopeType.(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope_); ok {
			return x.SharedReservedInstanceScope
		}
	}
	return nil
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope) GetMultipleAccountsReservedInstanceScope() *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope {
	if x != nil {
		if x, ok := x.AppliedScopeType.(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope_); ok {
			return x.MultipleAccountsReservedInstanceScope
		}
	}
	return nil
}

type isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType interface {
	isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType()
}

type EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope_ struct {
	// The reservation discount is applied to the matching resources in eligible
	// accounts within billing context.
	SharedReservedInstanceScope *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope `protobuf:"bytes,1,opt,name=shared_reserved_instance_scope,json=sharedReservedInstanceScope,oneof"`
}

type EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope_ struct {
	// The reservation discount is applied to the matching resources in accounts.
	MultipleAccountsReservedInstanceScope *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope `protobuf:"bytes,2,opt,name=multiple_accounts_reserved_instance_scope,json=multipleAccountsReservedInstanceScope,oneof"`
}

func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope_) isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType() {
}

func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope_) isEntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_AppliedScopeType() {
}

// The reservation discount is applied to the matching resources in eligible
// accounts within billing context.
type EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope) Reset() {
	*x = EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope{}
	mi := &file_CommonDTO_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope) ProtoMessage() {
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 0, 0}
}

// The reservation discount is applied to the matching resources in accounts.
type EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     []string               `protobuf:"bytes,1,rep,name=account_id,json=accountId" json:"account_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) Reset() {
	*x = EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope{}
	mi := &file_CommonDTO_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) ProtoMessage() {
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 72, 0, 1}
}

func (x *EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope) GetAccountId() []string {
	if x != nil {
		return x.AccountId
	}
	return nil
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo struct {
	state           protoimpl.MessageState                                               `protogen:"open.v1"`
	BilledCostScope []*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope `protobuf:"bytes,1,rep,name=billed_cost_scope,json=billedCostScope" json:"billed_cost_scope,omitempty"`
	TopologyScope   []*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope   `protobuf:"bytes,2,rep,name=topology_scope,json=topologyScope" json:"topology_scope,omitempty"`
	AppliedScope    *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope      `protobuf:"bytes,3,opt,name=applied_scope,json=appliedScope" json:"applied_scope,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo{}
	mi := &file_CommonDTO_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) GetBilledCostScope() []*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope {
	if x != nil {
		return x.BilledCostScope
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) GetTopologyScope() []*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope {
	if x != nil {
		return x.TopologyScope
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo) GetAppliedScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope {
	if x != nil {
		return x.AppliedScope
	}
	return nil
}

type EntityDTO_CloudCommitmentData_CommitmentPricingInfo struct {
	state         protoimpl.MessageState                                             `protogen:"open.v1"`
	OfferingClass *EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass `protobuf:"varint,1,opt,name=offering_class,json=offeringClass,enum=common_dto.EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass" json:"offering_class,omitempty"`
	PaymentOption *PaymentOption                                                     `protobuf:"varint,2,opt,name=payment_option,json=paymentOption,enum=common_dto.PaymentOption" json:"payment_option,omitempty"`
	// "usageCost" is intentionally skipped
	FixedCost     *float64 `protobuf:"fixed64,3,opt,name=fixed_cost,json=fixedCost" json:"fixed_cost,omitempty"`
	RecurringCost *float64 `protobuf:"fixed64,4,opt,name=recurring_cost,json=recurringCost" json:"recurring_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentPricingInfo{}
	mi := &file_CommonDTO_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentPricingInfo) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentPricingInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentPricingInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 1}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) GetOfferingClass() EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass {
	if x != nil && x.OfferingClass != nil {
		return *x.OfferingClass
	}
	return EntityDTO_CloudCommitmentData_CommitmentPricingInfo_STANDARD
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) GetPaymentOption() PaymentOption {
	if x != nil && x.PaymentOption != nil {
		return *x.PaymentOption
	}
	return PaymentOption_ALL_UPFRONT
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) GetFixedCost() float64 {
	if x != nil && x.FixedCost != nil {
		return *x.FixedCost
	}
	return 0
}

func (x *EntityDTO_CloudCommitmentData_CommitmentPricingInfo) GetRecurringCost() float64 {
	if x != nil && x.RecurringCost != nil {
		return *x.RecurringCost
	}
	return 0
}

type EntityDTO_CloudCommitmentData_ServiceRestricted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_ServiceRestricted) Reset() {
	*x = EntityDTO_CloudCommitmentData_ServiceRestricted{}
	mi := &file_CommonDTO_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_ServiceRestricted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_ServiceRestricted) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_ServiceRestricted) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_ServiceRestricted.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_ServiceRestricted) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 2}
}

type EntityDTO_CloudCommitmentData_FamilyRestricted struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	InstanceFamily *string                `protobuf:"bytes,1,opt,name=instance_family,json=instanceFamily" json:"instance_family,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_FamilyRestricted) Reset() {
	*x = EntityDTO_CloudCommitmentData_FamilyRestricted{}
	mi := &file_CommonDTO_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_FamilyRestricted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_FamilyRestricted) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_FamilyRestricted) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_FamilyRestricted.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_FamilyRestricted) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 3}
}

func (x *EntityDTO_CloudCommitmentData_FamilyRestricted) GetInstanceFamily() string {
	if x != nil && x.InstanceFamily != nil {
		return *x.InstanceFamily
	}
	return ""
}

type EntityDTO_CloudCommitmentData_CommittedCommoditiesBought struct {
	state         protoimpl.MessageState                                    `protogen:"open.v1"`
	Commodity     []*EntityDTO_CloudCommitmentData_CommittedCommodityBought `protobuf:"bytes,1,rep,name=commodity" json:"commodity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommittedCommoditiesBought{}
	mi := &file_CommonDTO_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommittedCommoditiesBought.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 4}
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought) GetCommodity() []*EntityDTO_CloudCommitmentData_CommittedCommodityBought {
	if x != nil {
		return x.Commodity
	}
	return nil
}

// Cores and memory are represented as commodities to count against the CUD capacity.
type EntityDTO_CloudCommitmentData_CommittedCommodityBought struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cores - NUM_VCORE commodity, memory - MEM_PROVISIONED.
	// Note: commodities needs to be bought by GCP VMs.
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	ProviderType  *EntityDTO_EntityType       `protobuf:"varint,2,opt,name=provider_type,json=providerType,enum=common_dto.EntityDTO_EntityType" json:"provider_type,omitempty"`
	// For both cores and memory, capacity and the bought provisioned units are the same.
	// In the future, we may require a ratio for conversion.
	Capacity      *float64 `protobuf:"fixed64,3,opt,name=capacity" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommittedCommodityBought{}
	mi := &file_CommonDTO_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommittedCommodityBought) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommittedCommodityBought.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommittedCommodityBought) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 5}
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) GetProviderType() EntityDTO_EntityType {
	if x != nil && x.ProviderType != nil {
		return *x.ProviderType
	}
	return EntityDTO_SWITCH
}

func (x *EntityDTO_CloudCommitmentData_CommittedCommodityBought) GetCapacity() float64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// BilledCostScope should be used to represent undiscovered resources. For example,
// this scope is useful to represent Lambda and Fargate charges for commitment
// buy analysis.
type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope{}
	mi := &file_CommonDTO_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 0}
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// e.g. aws::CS::AmazonRDS
	CloudServiceId *string `protobuf:"bytes,2,opt,name=cloud_service_id,json=cloudServiceId" json:"cloud_service_id,omitempty"`
	// e.g. db.t3.medium
	CloudTierId     *string                    `protobuf:"bytes,3,opt,name=cloud_tier_id,json=cloudTierId" json:"cloud_tier_id,omitempty"`
	InstanceTenancy *EntityDTO_InstanceTenancy `protobuf:"varint,4,opt,name=instance_tenancy,json=instanceTenancy,enum=common_dto.EntityDTO_InstanceTenancy" json:"instance_tenancy,omitempty"`
	// Types that are valid to be assigned to Scope:
	//
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope_
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope_
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope_
	Scope isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope `protobuf_oneof:"scope"`
	// Types that are valid to be assigned to TierInfo:
	//
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo_
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo_
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo_
	TierInfo      isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo `protobuf_oneof:"tier_info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope{}
	mi := &file_CommonDTO_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetCloudServiceId() string {
	if x != nil && x.CloudServiceId != nil {
		return *x.CloudServiceId
	}
	return ""
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetCloudTierId() string {
	if x != nil && x.CloudTierId != nil {
		return *x.CloudTierId
	}
	return ""
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetInstanceTenancy() EntityDTO_InstanceTenancy {
	if x != nil && x.InstanceTenancy != nil {
		return *x.InstanceTenancy
	}
	return EntityDTO_DEFAULT
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetScope() isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetGlobalScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope {
	if x != nil {
		if x, ok := x.Scope.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope_); ok {
			return x.GlobalScope
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetFamilyScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope {
	if x != nil {
		if x, ok := x.Scope.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope_); ok {
			return x.FamilyScope
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetTierSpecificScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope {
	if x != nil {
		if x, ok := x.Scope.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope_); ok {
			return x.TierSpecificScope
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetTierInfo() isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo {
	if x != nil {
		return x.TierInfo
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetComputeTierInfo() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo {
	if x != nil {
		if x, ok := x.TierInfo.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo_); ok {
			return x.ComputeTierInfo
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetDatabaseServerTierInfo() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo {
	if x != nil {
		if x, ok := x.TierInfo.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo_); ok {
			return x.DatabaseServerTierInfo
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope) GetDatabaseTierInfo() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo {
	if x != nil {
		if x, ok := x.TierInfo.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo_); ok {
			return x.DatabaseTierInfo
		}
	}
	return nil
}

type isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope interface {
	isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope()
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope_ struct {
	GlobalScope *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope `protobuf:"bytes,5,opt,name=global_scope,json=globalScope,oneof"`
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope_ struct {
	FamilyScope *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope `protobuf:"bytes,6,opt,name=family_scope,json=familyScope,oneof"` // size flexible
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope_ struct {
	TierSpecificScope *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope `protobuf:"bytes,7,opt,name=tier_specific_scope,json=tierSpecificScope,oneof"` // not size flexible
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope() {
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope() {
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_Scope() {
}

type isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo interface {
	isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo()
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo_ struct {
	ComputeTierInfo *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo `protobuf:"bytes,8,opt,name=compute_tier_info,json=computeTierInfo,oneof"`
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo_ struct {
	DatabaseServerTierInfo *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo `protobuf:"bytes,9,opt,name=database_server_tier_info,json=databaseServerTierInfo,oneof"`
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo_ struct {
	DatabaseTierInfo *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo `protobuf:"bytes,10,opt,name=database_tier_info,json=databaseTierInfo,oneof"`
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo() {
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo() {
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierInfo() {
}

// The scope containing eligible resources to which the discount can be applied.
type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AppliedScopeType:
	//
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope_
	//	*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope_
	AppliedScopeType isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType `protobuf_oneof:"applied_scope_type"`
	AppliedScopeId   []string                                                                          `protobuf:"bytes,3,rep,name=applied_scope_id,json=appliedScopeId" json:"applied_scope_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope{}
	mi := &file_CommonDTO_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 2}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) GetAppliedScopeType() isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType {
	if x != nil {
		return x.AppliedScopeType
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) GetGroupScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope {
	if x != nil {
		if x, ok := x.AppliedScopeType.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope_); ok {
			return x.GroupScope
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) GetEntityScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope {
	if x != nil {
		if x, ok := x.AppliedScopeType.(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope_); ok {
			return x.EntityScope
		}
	}
	return nil
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope) GetAppliedScopeId() []string {
	if x != nil {
		return x.AppliedScopeId
	}
	return nil
}

type isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType interface {
	isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType()
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope_ struct {
	GroupScope *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope `protobuf:"bytes,1,opt,name=group_scope,json=groupScope,oneof"`
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope_ struct {
	EntityScope *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope `protobuf:"bytes,2,opt,name=entity_scope,json=entityScope,oneof"`
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType() {
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope_) isEntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_AppliedScopeType() {
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope{}
	mi := &file_CommonDTO_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 0}
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope{}
	mi := &file_CommonDTO_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope) ProtoMessage() {
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 1}
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Family        *string                `protobuf:"bytes,1,opt,name=family" json:"family,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope{}
	mi := &file_CommonDTO_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 2}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope) GetFamily() string {
	if x != nil && x.Family != nil {
		return *x.Family
	}
	return ""
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// empty = "platform flexible". In the case where the covered OS is not supported or represented in the OSType
	// enum, UNKNOWN_OS should be returned. Analysis should not match a VM with UNKNOWN_OS to a commitment with UNKNOWN_OS.
	// For savings plans, this should be empty
	OsType        *EntityDTO_OSType `protobuf:"varint,1,opt,name=os_type,json=osType,enum=common_dto.EntityDTO_OSType" json:"os_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo{}
	mi := &file_CommonDTO_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) ProtoMessage() {
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 3}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo) GetOsType() EntityDTO_OSType {
	if x != nil && x.OsType != nil {
		return *x.OsType
	}
	return EntityDTO_UNKNOWN_OS
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo struct {
	state          protoimpl.MessageState    `protogen:"open.v1"`
	DatabaseEngine *EntityDTO_DatabaseEngine `protobuf:"varint,1,opt,name=database_engine,json=databaseEngine,enum=common_dto.EntityDTO_DatabaseEngine" json:"database_engine,omitempty"`
	// For size flexible RDS RIs, this will cover both single and multi-az. The capacity difference should be
	// represented through coupons
	DeploymentType *EntityDTO_DeploymentType `protobuf:"varint,2,opt,name=deployment_type,json=deploymentType,enum=common_dto.EntityDTO_DeploymentType" json:"deployment_type,omitempty"`
	LicenseModel   *EntityDTO_LicenseModel   `protobuf:"varint,3,opt,name=license_model,json=licenseModel,enum=common_dto.EntityDTO_LicenseModel" json:"license_model,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo{}
	mi := &file_CommonDTO_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) ProtoMessage() {
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 4}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) GetDatabaseEngine() EntityDTO_DatabaseEngine {
	if x != nil && x.DatabaseEngine != nil {
		return *x.DatabaseEngine
	}
	return EntityDTO_UNKNOWN_DB
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) GetDeploymentType() EntityDTO_DeploymentType {
	if x != nil && x.DeploymentType != nil {
		return *x.DeploymentType
	}
	return EntityDTO_SINGLE_AZ
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo) GetLicenseModel() EntityDTO_LicenseModel {
	if x != nil && x.LicenseModel != nil {
		return *x.LicenseModel
	}
	return EntityDTO_LICENSE_INCLUDED
}

// Placeholder for Azure VCore instances
type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo{}
	mi := &file_CommonDTO_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo) ProtoMessage() {
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 1, 5}
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GroupType     *GroupDTO_GroupType    `protobuf:"varint,1,req,name=group_type,json=groupType,enum=common_dto.GroupDTO_GroupType" json:"group_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope{}
	mi := &file_CommonDTO_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 2, 0}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope) GetGroupType() GroupDTO_GroupType {
	if x != nil && x.GroupType != nil {
		return *x.GroupType
	}
	return GroupDTO_REGULAR
}

type EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntityType    *EntityDTO_EntityType  `protobuf:"varint,1,req,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) Reset() {
	*x = EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope{}
	mi := &file_CommonDTO_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) ProtoMessage() {}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope.ProtoReflect.Descriptor instead.
func (*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{0, 73, 0, 2, 1}
}

func (x *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

type CommodityDTO_RangeDependency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of commodity whose usage will be used as a factor
	BaseCommodity *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=base_commodity,json=baseCommodity,enum=common_dto.CommodityDTO_CommodityType" json:"base_commodity,omitempty"`
	// list of <double, double> tuples, mapping from base commodity max amount to dependent commodity max amount
	RangeTuple    []*CommodityDTO_RangeTuple `protobuf:"bytes,2,rep,name=range_tuple,json=rangeTuple" json:"range_tuple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommodityDTO_RangeDependency) Reset() {
	*x = CommodityDTO_RangeDependency{}
	mi := &file_CommonDTO_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_RangeDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_RangeDependency) ProtoMessage() {}

func (x *CommodityDTO_RangeDependency) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_RangeDependency.ProtoReflect.Descriptor instead.
func (*CommodityDTO_RangeDependency) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CommodityDTO_RangeDependency) GetBaseCommodity() CommodityDTO_CommodityType {
	if x != nil && x.BaseCommodity != nil {
		return *x.BaseCommodity
	}
	return CommodityDTO_CLUSTER
}

func (x *CommodityDTO_RangeDependency) GetRangeTuple() []*CommodityDTO_RangeTuple {
	if x != nil {
		return x.RangeTuple
	}
	return nil
}

type CommodityDTO_RangeTuple struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	BaseMaxAmountForConsumer      *float64               `protobuf:"fixed64,1,opt,name=base_max_amount_for_consumer,json=baseMaxAmountForConsumer" json:"base_max_amount_for_consumer,omitempty"`                // base commodity amount upper bound
	DependentMaxAmountForConsumer *float64               `protobuf:"fixed64,2,opt,name=dependent_max_amount_for_consumer,json=dependentMaxAmountForConsumer" json:"dependent_max_amount_for_consumer,omitempty"` // dependent commodity amount upper bound
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CommodityDTO_RangeTuple) Reset() {
	*x = CommodityDTO_RangeTuple{}
	mi := &file_CommonDTO_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_RangeTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_RangeTuple) ProtoMessage() {}

func (x *CommodityDTO_RangeTuple) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_RangeTuple.ProtoReflect.Descriptor instead.
func (*CommodityDTO_RangeTuple) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CommodityDTO_RangeTuple) GetBaseMaxAmountForConsumer() float64 {
	if x != nil && x.BaseMaxAmountForConsumer != nil {
		return *x.BaseMaxAmountForConsumer
	}
	return 0
}

func (x *CommodityDTO_RangeTuple) GetDependentMaxAmountForConsumer() float64 {
	if x != nil && x.DependentMaxAmountForConsumer != nil {
		return *x.DependentMaxAmountForConsumer
	}
	return 0
}

// The max amount resource will be decided by another commodity's usage on the consumer
type CommodityDTO_RatioDependency struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of commodity whose usage will be used as a factor
	BaseCommodity *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=base_commodity,json=baseCommodity,enum=common_dto.CommodityDTO_CommodityType" json:"base_commodity,omitempty"`
	// the ratio which will be used to multiply with base commodity's usage
	MaxRatio *float64 `protobuf:"fixed64,2,opt,name=max_ratio,json=maxRatio" json:"max_ratio,omitempty"`
	// the min ratio which will be used to multiply with base commodity's usage
	MinRatio *float64 `protobuf:"fixed64,3,opt,name=min_ratio,json=minRatio" json:"min_ratio,omitempty"`
	// When consumer consumes amount more than (base amount * max_ratio), whether can directly
	// increase base amount to achieve max ratio dependency.
	IncreaseBaseAmountDefaultSupported *bool `protobuf:"varint,4,opt,name=increase_base_amount_default_supported,json=increaseBaseAmountDefaultSupported,def=0" json:"increase_base_amount_default_supported,omitempty"`
	// Determines whether Math.floor should be used for rounding dependent commodity capacity.
	// If true, Math.floor will be applied; if false, Math.ceil will be used.
	RoundWithFloor *bool `protobuf:"varint,5,opt,name=round_with_floor,json=roundWithFloor,def=0" json:"round_with_floor,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CommodityDTO_RatioDependency fields.
const (
	Default_CommodityDTO_RatioDependency_IncreaseBaseAmountDefaultSupported = bool(false)
	Default_CommodityDTO_RatioDependency_RoundWithFloor                     = bool(false)
)

func (x *CommodityDTO_RatioDependency) Reset() {
	*x = CommodityDTO_RatioDependency{}
	mi := &file_CommonDTO_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_RatioDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_RatioDependency) ProtoMessage() {}

func (x *CommodityDTO_RatioDependency) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_RatioDependency.ProtoReflect.Descriptor instead.
func (*CommodityDTO_RatioDependency) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CommodityDTO_RatioDependency) GetBaseCommodity() CommodityDTO_CommodityType {
	if x != nil && x.BaseCommodity != nil {
		return *x.BaseCommodity
	}
	return CommodityDTO_CLUSTER
}

func (x *CommodityDTO_RatioDependency) GetMaxRatio() float64 {
	if x != nil && x.MaxRatio != nil {
		return *x.MaxRatio
	}
	return 0
}

func (x *CommodityDTO_RatioDependency) GetMinRatio() float64 {
	if x != nil && x.MinRatio != nil {
		return *x.MinRatio
	}
	return 0
}

func (x *CommodityDTO_RatioDependency) GetIncreaseBaseAmountDefaultSupported() bool {
	if x != nil && x.IncreaseBaseAmountDefaultSupported != nil {
		return *x.IncreaseBaseAmountDefaultSupported
	}
	return Default_CommodityDTO_RatioDependency_IncreaseBaseAmountDefaultSupported
}

func (x *CommodityDTO_RatioDependency) GetRoundWithFloor() bool {
	if x != nil && x.RoundWithFloor != nil {
		return *x.RoundWithFloor
	}
	return Default_CommodityDTO_RatioDependency_RoundWithFloor
}

// Map property type to list of strings
type CommodityDTO_PropertiesList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Values        []string               `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommodityDTO_PropertiesList) Reset() {
	*x = CommodityDTO_PropertiesList{}
	mi := &file_CommonDTO_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_PropertiesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_PropertiesList) ProtoMessage() {}

func (x *CommodityDTO_PropertiesList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_PropertiesList.ProtoReflect.Descriptor instead.
func (*CommodityDTO_PropertiesList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 3}
}

func (x *CommodityDTO_PropertiesList) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommodityDTO_PropertiesList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Used to override weight factor used in decaying average calculation in HistoricalEditor
type CommodityDTO_DecayingAverageWeightFactor struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UsedHistoryWeight *float32               `protobuf:"fixed32,1,opt,name=used_history_weight,json=usedHistoryWeight" json:"used_history_weight,omitempty"`
	PeakHistoryWeight *float32               `protobuf:"fixed32,2,opt,name=peak_history_weight,json=peakHistoryWeight" json:"peak_history_weight,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CommodityDTO_DecayingAverageWeightFactor) Reset() {
	*x = CommodityDTO_DecayingAverageWeightFactor{}
	mi := &file_CommonDTO_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_DecayingAverageWeightFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_DecayingAverageWeightFactor) ProtoMessage() {}

func (x *CommodityDTO_DecayingAverageWeightFactor) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_DecayingAverageWeightFactor.ProtoReflect.Descriptor instead.
func (*CommodityDTO_DecayingAverageWeightFactor) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 4}
}

func (x *CommodityDTO_DecayingAverageWeightFactor) GetUsedHistoryWeight() float32 {
	if x != nil && x.UsedHistoryWeight != nil {
		return *x.UsedHistoryWeight
	}
	return 0
}

func (x *CommodityDTO_DecayingAverageWeightFactor) GetPeakHistoryWeight() float32 {
	if x != nil && x.PeakHistoryWeight != nil {
		return *x.PeakHistoryWeight
	}
	return 0
}

type CommodityDTO_StorageLatencyData struct {
	state                              protoimpl.MessageState `protogen:"open.v1"`
	SupportsDiskArrayLatency           *bool                  `protobuf:"varint,1,opt,name=supportsDiskArrayLatency" json:"supportsDiskArrayLatency,omitempty"`
	SupportsStorageLatency             *bool                  `protobuf:"varint,2,opt,name=supportsStorageLatency" json:"supportsStorageLatency,omitempty"`
	SupportsLogicalPoolLatency         *bool                  `protobuf:"varint,3,opt,name=supportsLogicalPoolLatency" json:"supportsLogicalPoolLatency,omitempty"`
	SupportsLogicalPoolLatencyCapacity *bool                  `protobuf:"varint,4,opt,name=supportsLogicalPoolLatencyCapacity" json:"supportsLogicalPoolLatencyCapacity,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *CommodityDTO_StorageLatencyData) Reset() {
	*x = CommodityDTO_StorageLatencyData{}
	mi := &file_CommonDTO_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_StorageLatencyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_StorageLatencyData) ProtoMessage() {}

func (x *CommodityDTO_StorageLatencyData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_StorageLatencyData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_StorageLatencyData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 5}
}

func (x *CommodityDTO_StorageLatencyData) GetSupportsDiskArrayLatency() bool {
	if x != nil && x.SupportsDiskArrayLatency != nil {
		return *x.SupportsDiskArrayLatency
	}
	return false
}

func (x *CommodityDTO_StorageLatencyData) GetSupportsStorageLatency() bool {
	if x != nil && x.SupportsStorageLatency != nil {
		return *x.SupportsStorageLatency
	}
	return false
}

func (x *CommodityDTO_StorageLatencyData) GetSupportsLogicalPoolLatency() bool {
	if x != nil && x.SupportsLogicalPoolLatency != nil {
		return *x.SupportsLogicalPoolLatency
	}
	return false
}

func (x *CommodityDTO_StorageLatencyData) GetSupportsLogicalPoolLatencyCapacity() bool {
	if x != nil && x.SupportsLogicalPoolLatencyCapacity != nil {
		return *x.SupportsLogicalPoolLatencyCapacity
	}
	return false
}

type CommodityDTO_StorageAccessData struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	SupportsDiskArrayIOPS   *bool                  `protobuf:"varint,1,opt,name=supportsDiskArrayIOPS" json:"supportsDiskArrayIOPS,omitempty"`
	SupportsStorageIOPS     *bool                  `protobuf:"varint,2,opt,name=supportsStorageIOPS" json:"supportsStorageIOPS,omitempty"`
	SupportsLogicalPoolIOPS *bool                  `protobuf:"varint,3,opt,name=supportsLogicalPoolIOPS" json:"supportsLogicalPoolIOPS,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CommodityDTO_StorageAccessData) Reset() {
	*x = CommodityDTO_StorageAccessData{}
	mi := &file_CommonDTO_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_StorageAccessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_StorageAccessData) ProtoMessage() {}

func (x *CommodityDTO_StorageAccessData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_StorageAccessData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_StorageAccessData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 6}
}

func (x *CommodityDTO_StorageAccessData) GetSupportsDiskArrayIOPS() bool {
	if x != nil && x.SupportsDiskArrayIOPS != nil {
		return *x.SupportsDiskArrayIOPS
	}
	return false
}

func (x *CommodityDTO_StorageAccessData) GetSupportsStorageIOPS() bool {
	if x != nil && x.SupportsStorageIOPS != nil {
		return *x.SupportsStorageIOPS
	}
	return false
}

func (x *CommodityDTO_StorageAccessData) GetSupportsLogicalPoolIOPS() bool {
	if x != nil && x.SupportsLogicalPoolIOPS != nil {
		return *x.SupportsLogicalPoolIOPS
	}
	return false
}

type CommodityDTO_StorageProvisionedData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UsedAdjustment *float64               `protobuf:"fixed64,1,opt,name=usedAdjustment" json:"usedAdjustment,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommodityDTO_StorageProvisionedData) Reset() {
	*x = CommodityDTO_StorageProvisionedData{}
	mi := &file_CommonDTO_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_StorageProvisionedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_StorageProvisionedData) ProtoMessage() {}

func (x *CommodityDTO_StorageProvisionedData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_StorageProvisionedData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_StorageProvisionedData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 7}
}

func (x *CommodityDTO_StorageProvisionedData) GetUsedAdjustment() float64 {
	if x != nil && x.UsedAdjustment != nil {
		return *x.UsedAdjustment
	}
	return 0
}

type CommodityDTO_GpuMemData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommodityDTO_GpuMemData) Reset() {
	*x = CommodityDTO_GpuMemData{}
	mi := &file_CommonDTO_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_GpuMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_GpuMemData) ProtoMessage() {}

func (x *CommodityDTO_GpuMemData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_GpuMemData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_GpuMemData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 8}
}

type CommodityDTO_GpuData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// whether the gpu used is a per GPU core reading or a per node reading
	IsReadingPerGpu *bool `protobuf:"varint,1,opt,name=isReadingPerGpu,def=0" json:"isReadingPerGpu,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CommodityDTO_GpuData fields.
const (
	Default_CommodityDTO_GpuData_IsReadingPerGpu = bool(false)
)

func (x *CommodityDTO_GpuData) Reset() {
	*x = CommodityDTO_GpuData{}
	mi := &file_CommonDTO_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_GpuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_GpuData) ProtoMessage() {}

func (x *CommodityDTO_GpuData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_GpuData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_GpuData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 9}
}

func (x *CommodityDTO_GpuData) GetIsReadingPerGpu() bool {
	if x != nil && x.IsReadingPerGpu != nil {
		return *x.IsReadingPerGpu
	}
	return Default_CommodityDTO_GpuData_IsReadingPerGpu
}

type CommodityDTO_VMemData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HotAddSupported    *bool                  `protobuf:"varint,1,opt,name=hotAddSupported,def=0" json:"hotAddSupported,omitempty"`
	HotRemoveSupported *bool                  `protobuf:"varint,2,opt,name=hotRemoveSupported,def=0" json:"hotRemoveSupported,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for CommodityDTO_VMemData fields.
const (
	Default_CommodityDTO_VMemData_HotAddSupported    = bool(false)
	Default_CommodityDTO_VMemData_HotRemoveSupported = bool(false)
)

func (x *CommodityDTO_VMemData) Reset() {
	*x = CommodityDTO_VMemData{}
	mi := &file_CommonDTO_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_VMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_VMemData) ProtoMessage() {}

func (x *CommodityDTO_VMemData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_VMemData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_VMemData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 10}
}

func (x *CommodityDTO_VMemData) GetHotAddSupported() bool {
	if x != nil && x.HotAddSupported != nil {
		return *x.HotAddSupported
	}
	return Default_CommodityDTO_VMemData_HotAddSupported
}

func (x *CommodityDTO_VMemData) GetHotRemoveSupported() bool {
	if x != nil && x.HotRemoveSupported != nil {
		return *x.HotRemoveSupported
	}
	return Default_CommodityDTO_VMemData_HotRemoveSupported
}

type CommodityDTO_VCpuData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	HotAddSupported    *bool                  `protobuf:"varint,1,opt,name=hotAddSupported,def=0" json:"hotAddSupported,omitempty"`
	HotRemoveSupported *bool                  `protobuf:"varint,2,opt,name=hotRemoveSupported,def=0" json:"hotRemoveSupported,omitempty"`
	// whether the vcpu used is a per CPU core reading or a per node reading
	IsReadingPerCpu  *bool    `protobuf:"varint,3,opt,name=isReadingPerCpu,def=0" json:"isReadingPerCpu,omitempty"`
	NonDisruptiveMin *float64 `protobuf:"fixed64,4,opt,name=nonDisruptiveMin" json:"nonDisruptiveMin,omitempty"`
	NonDisruptiveMax *float64 `protobuf:"fixed64,5,opt,name=nonDisruptiveMax" json:"nonDisruptiveMax,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CommodityDTO_VCpuData fields.
const (
	Default_CommodityDTO_VCpuData_HotAddSupported    = bool(false)
	Default_CommodityDTO_VCpuData_HotRemoveSupported = bool(false)
	Default_CommodityDTO_VCpuData_IsReadingPerCpu    = bool(false)
)

func (x *CommodityDTO_VCpuData) Reset() {
	*x = CommodityDTO_VCpuData{}
	mi := &file_CommonDTO_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_VCpuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_VCpuData) ProtoMessage() {}

func (x *CommodityDTO_VCpuData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_VCpuData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_VCpuData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 11}
}

func (x *CommodityDTO_VCpuData) GetHotAddSupported() bool {
	if x != nil && x.HotAddSupported != nil {
		return *x.HotAddSupported
	}
	return Default_CommodityDTO_VCpuData_HotAddSupported
}

func (x *CommodityDTO_VCpuData) GetHotRemoveSupported() bool {
	if x != nil && x.HotRemoveSupported != nil {
		return *x.HotRemoveSupported
	}
	return Default_CommodityDTO_VCpuData_HotRemoveSupported
}

func (x *CommodityDTO_VCpuData) GetIsReadingPerCpu() bool {
	if x != nil && x.IsReadingPerCpu != nil {
		return *x.IsReadingPerCpu
	}
	return Default_CommodityDTO_VCpuData_IsReadingPerCpu
}

func (x *CommodityDTO_VCpuData) GetNonDisruptiveMin() float64 {
	if x != nil && x.NonDisruptiveMin != nil {
		return *x.NonDisruptiveMin
	}
	return 0
}

func (x *CommodityDTO_VCpuData) GetNonDisruptiveMax() float64 {
	if x != nil && x.NonDisruptiveMax != nil {
		return *x.NonDisruptiveMax
	}
	return 0
}

// Metadata for invoking a custom pricing function for the commodity
type CommodityDTO_PricingMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace of the handler for the pricing function for this commodity
	PricingHandlerNamespace *CustomTypeDef_MetadataNamespace `protobuf:"varint,1,req,name=pricingHandlerNamespace,enum=common_dto.CustomTypeDef_MetadataNamespace" json:"pricingHandlerNamespace,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CommodityDTO_PricingMetadata) Reset() {
	*x = CommodityDTO_PricingMetadata{}
	mi := &file_CommonDTO_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_PricingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_PricingMetadata) ProtoMessage() {}

func (x *CommodityDTO_PricingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_PricingMetadata.ProtoReflect.Descriptor instead.
func (*CommodityDTO_PricingMetadata) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 12}
}

func (x *CommodityDTO_PricingMetadata) GetPricingHandlerNamespace() CustomTypeDef_MetadataNamespace {
	if x != nil && x.PricingHandlerNamespace != nil {
		return *x.PricingHandlerNamespace
	}
	return CustomTypeDef_UNKNOWN
}

// Represents a collection of utilization data points.
type CommodityDTO_UtilizationData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of data points. The last element in the array refers to the latest point in time.
	Point []float64 `protobuf:"fixed64,1,rep,name=point" json:"point,omitempty"`
	// The timestamp of the last (the most recent) point in the array.
	LastPointTimestampMs *int64 `protobuf:"varint,2,req,name=lastPointTimestampMs" json:"lastPointTimestampMs,omitempty"`
	// Interval in milliseconds between 2 consecutive points in the array.
	IntervalMs *int32 `protobuf:"varint,3,req,name=intervalMs" json:"intervalMs,omitempty"`
	// The timestamp of the first (the oldest) point in the array.
	FirstPointTimestampMs *int64 `protobuf:"varint,4,opt,name=firstPointTimestampMs" json:"firstPointTimestampMs,omitempty"`
	// Optional array of timestamps that correspond in order to the data points.
	// Not present by default, only used by metric tests.
	Timestamp     []int64 `protobuf:"varint,5,rep,name=timestamp" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommodityDTO_UtilizationData) Reset() {
	*x = CommodityDTO_UtilizationData{}
	mi := &file_CommonDTO_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommodityDTO_UtilizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommodityDTO_UtilizationData) ProtoMessage() {}

func (x *CommodityDTO_UtilizationData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommodityDTO_UtilizationData.ProtoReflect.Descriptor instead.
func (*CommodityDTO_UtilizationData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{3, 13}
}

func (x *CommodityDTO_UtilizationData) GetPoint() []float64 {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *CommodityDTO_UtilizationData) GetLastPointTimestampMs() int64 {
	if x != nil && x.LastPointTimestampMs != nil {
		return *x.LastPointTimestampMs
	}
	return 0
}

func (x *CommodityDTO_UtilizationData) GetIntervalMs() int32 {
	if x != nil && x.IntervalMs != nil {
		return *x.IntervalMs
	}
	return 0
}

func (x *CommodityDTO_UtilizationData) GetFirstPointTimestampMs() int64 {
	if x != nil && x.FirstPointTimestampMs != nil {
		return *x.FirstPointTimestampMs
	}
	return 0
}

func (x *CommodityDTO_UtilizationData) GetTimestamp() []int64 {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Tag values. Tag with certain name can has several values.
type GroupDTO_TagValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []string               `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_TagValues) Reset() {
	*x = GroupDTO_TagValues{}
	mi := &file_CommonDTO_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_TagValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_TagValues) ProtoMessage() {}

func (x *GroupDTO_TagValues) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_TagValues.ProtoReflect.Descriptor instead.
func (*GroupDTO_TagValues) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GroupDTO_TagValues) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// ConstraintInfo contains all necessary information specific for Group associated with Constraint
type GroupDTO_ConstraintInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Constraint type associated with this group.
	// If it is just a group, then the constraint type should be Group
	ConstraintType *GroupDTO_ConstraintType `protobuf:"varint,1,req,name=constraint_type,json=constraintType,enum=common_dto.GroupDTO_ConstraintType" json:"constraint_type,omitempty"`
	// Constraint id to notify
	ConstraintId *string `protobuf:"bytes,2,req,name=constraint_id,json=constraintId" json:"constraint_id,omitempty"`
	// Notify if this group is for buyers
	IsBuyer *bool `protobuf:"varint,3,opt,name=is_buyer,json=isBuyer,def=0" json:"is_buyer,omitempty"`
	// Notify the type of the seller if it is the buyer group.
	BuyerMetaData *GroupDTO_BuyerMetaData `protobuf:"bytes,4,opt,name=buyer_meta_data,json=buyerMetaData" json:"buyer_meta_data,omitempty"`
	// Notify if this group is for creating complementary group
	NeedComplementary *bool `protobuf:"varint,5,opt,name=need_complementary,json=needComplementary,def=0" json:"need_complementary,omitempty"`
	// Name for the constraint
	ConstraintName *string `protobuf:"bytes,6,req,name=constraint_name,json=constraintName" json:"constraint_name,omitempty"`
	// Consumers that should not be included in the cluster.
	ForExcludedConsumers *bool `protobuf:"varint,7,opt,name=forExcludedConsumers,def=0" json:"forExcludedConsumers,omitempty"`
	// Display name for the constraint
	ConstraintDisplayName *string `protobuf:"bytes,8,opt,name=constraint_display_name,json=constraintDisplayName" json:"constraint_display_name,omitempty"`
	// Excluded Templates
	ExcludedTemplates []string `protobuf:"bytes,9,rep,name=excluded_templates,json=excludedTemplates" json:"excluded_templates,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for GroupDTO_ConstraintInfo fields.
const (
	Default_GroupDTO_ConstraintInfo_IsBuyer              = bool(false)
	Default_GroupDTO_ConstraintInfo_NeedComplementary    = bool(false)
	Default_GroupDTO_ConstraintInfo_ForExcludedConsumers = bool(false)
)

func (x *GroupDTO_ConstraintInfo) Reset() {
	*x = GroupDTO_ConstraintInfo{}
	mi := &file_CommonDTO_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_ConstraintInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_ConstraintInfo) ProtoMessage() {}

func (x *GroupDTO_ConstraintInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_ConstraintInfo.ProtoReflect.Descriptor instead.
func (*GroupDTO_ConstraintInfo) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 2}
}

func (x *GroupDTO_ConstraintInfo) GetConstraintType() GroupDTO_ConstraintType {
	if x != nil && x.ConstraintType != nil {
		return *x.ConstraintType
	}
	return GroupDTO_BUYER_SELLER_AFFINITY
}

func (x *GroupDTO_ConstraintInfo) GetConstraintId() string {
	if x != nil && x.ConstraintId != nil {
		return *x.ConstraintId
	}
	return ""
}

func (x *GroupDTO_ConstraintInfo) GetIsBuyer() bool {
	if x != nil && x.IsBuyer != nil {
		return *x.IsBuyer
	}
	return Default_GroupDTO_ConstraintInfo_IsBuyer
}

func (x *GroupDTO_ConstraintInfo) GetBuyerMetaData() *GroupDTO_BuyerMetaData {
	if x != nil {
		return x.BuyerMetaData
	}
	return nil
}

func (x *GroupDTO_ConstraintInfo) GetNeedComplementary() bool {
	if x != nil && x.NeedComplementary != nil {
		return *x.NeedComplementary
	}
	return Default_GroupDTO_ConstraintInfo_NeedComplementary
}

func (x *GroupDTO_ConstraintInfo) GetConstraintName() string {
	if x != nil && x.ConstraintName != nil {
		return *x.ConstraintName
	}
	return ""
}

func (x *GroupDTO_ConstraintInfo) GetForExcludedConsumers() bool {
	if x != nil && x.ForExcludedConsumers != nil {
		return *x.ForExcludedConsumers
	}
	return Default_GroupDTO_ConstraintInfo_ForExcludedConsumers
}

func (x *GroupDTO_ConstraintInfo) GetConstraintDisplayName() string {
	if x != nil && x.ConstraintDisplayName != nil {
		return *x.ConstraintDisplayName
	}
	return ""
}

func (x *GroupDTO_ConstraintInfo) GetExcludedTemplates() []string {
	if x != nil {
		return x.ExcludedTemplates
	}
	return nil
}

// A setting policy containing values for a number of settings
type GroupDTO_SettingPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name for the group associated setting policy
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Settings for the setting policy
	Settings []*GroupDTO_Setting `protobuf:"bytes,2,rep,name=settings" json:"settings,omitempty"`
	// display name for the group associated setting policy
	DisplayName *string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// If this policy is not one-target-specific, mark this true.
	StitchAcrossTargets *bool `protobuf:"varint,4,opt,name=stitch_across_targets,json=stitchAcrossTargets,def=0" json:"stitch_across_targets,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

// Default values for GroupDTO_SettingPolicy fields.
const (
	Default_GroupDTO_SettingPolicy_StitchAcrossTargets = bool(false)
)

func (x *GroupDTO_SettingPolicy) Reset() {
	*x = GroupDTO_SettingPolicy{}
	mi := &file_CommonDTO_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_SettingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_SettingPolicy) ProtoMessage() {}

func (x *GroupDTO_SettingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_SettingPolicy.ProtoReflect.Descriptor instead.
func (*GroupDTO_SettingPolicy) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 3}
}

func (x *GroupDTO_SettingPolicy) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GroupDTO_SettingPolicy) GetSettings() []*GroupDTO_Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *GroupDTO_SettingPolicy) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *GroupDTO_SettingPolicy) GetStitchAcrossTargets() bool {
	if x != nil && x.StitchAcrossTargets != nil {
		return *x.StitchAcrossTargets
	}
	return Default_GroupDTO_SettingPolicy_StitchAcrossTargets
}

// List of SelectionSpec to select group members
type GroupDTO_SelectionSpecList struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	SelectionSpec []*GroupDTO_SelectionSpec `protobuf:"bytes,1,rep,name=selection_spec,json=selectionSpec" json:"selection_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_SelectionSpecList) Reset() {
	*x = GroupDTO_SelectionSpecList{}
	mi := &file_CommonDTO_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_SelectionSpecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_SelectionSpecList) ProtoMessage() {}

func (x *GroupDTO_SelectionSpecList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_SelectionSpecList.ProtoReflect.Descriptor instead.
func (*GroupDTO_SelectionSpecList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 4}
}

func (x *GroupDTO_SelectionSpecList) GetSelectionSpec() []*GroupDTO_SelectionSpec {
	if x != nil {
		return x.SelectionSpec
	}
	return nil
}

// List of member uuids
type GroupDTO_MembersList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Member        []string               `protobuf:"bytes,1,rep,name=member" json:"member,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_MembersList) Reset() {
	*x = GroupDTO_MembersList{}
	mi := &file_CommonDTO_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_MembersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_MembersList) ProtoMessage() {}

func (x *GroupDTO_MembersList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_MembersList.ProtoReflect.Descriptor instead.
func (*GroupDTO_MembersList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 5}
}

func (x *GroupDTO_MembersList) GetMember() []string {
	if x != nil {
		return x.Member
	}
	return nil
}

// List of members added and removed from the group.
type GroupDTO_AddedAndRemovedMembersList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AddedMembers   []string               `protobuf:"bytes,1,rep,name=addedMembers" json:"addedMembers,omitempty"`
	RemovedMembers []string               `protobuf:"bytes,2,rep,name=removedMembers" json:"removedMembers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GroupDTO_AddedAndRemovedMembersList) Reset() {
	*x = GroupDTO_AddedAndRemovedMembersList{}
	mi := &file_CommonDTO_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_AddedAndRemovedMembersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_AddedAndRemovedMembersList) ProtoMessage() {}

func (x *GroupDTO_AddedAndRemovedMembersList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_AddedAndRemovedMembersList.ProtoReflect.Descriptor instead.
func (*GroupDTO_AddedAndRemovedMembersList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 6}
}

func (x *GroupDTO_AddedAndRemovedMembersList) GetAddedMembers() []string {
	if x != nil {
		return x.AddedMembers
	}
	return nil
}

func (x *GroupDTO_AddedAndRemovedMembersList) GetRemovedMembers() []string {
	if x != nil {
		return x.RemovedMembers
	}
	return nil
}

type GroupDTO_BuyerMetaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SellerType    *EntityDTO_EntityType  `protobuf:"varint,1,opt,name=seller_type,json=sellerType,enum=common_dto.EntityDTO_EntityType" json:"seller_type,omitempty"`
	AtMost        *int32                 `protobuf:"zigzag32,2,opt,name=at_most,json=atMost,def=-1" json:"at_most,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GroupDTO_BuyerMetaData fields.
const (
	Default_GroupDTO_BuyerMetaData_AtMost = int32(-1)
)

func (x *GroupDTO_BuyerMetaData) Reset() {
	*x = GroupDTO_BuyerMetaData{}
	mi := &file_CommonDTO_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_BuyerMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_BuyerMetaData) ProtoMessage() {}

func (x *GroupDTO_BuyerMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_BuyerMetaData.ProtoReflect.Descriptor instead.
func (*GroupDTO_BuyerMetaData) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 7}
}

func (x *GroupDTO_BuyerMetaData) GetSellerType() EntityDTO_EntityType {
	if x != nil && x.SellerType != nil {
		return *x.SellerType
	}
	return EntityDTO_SWITCH
}

func (x *GroupDTO_BuyerMetaData) GetAtMost() int32 {
	if x != nil && x.AtMost != nil {
		return *x.AtMost
	}
	return Default_GroupDTO_BuyerMetaData_AtMost
}

// A setting and its value
type GroupDTO_Setting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of setting.
	Type *GroupDTO_Setting_SettingType `protobuf:"varint,1,opt,name=type,enum=common_dto.GroupDTO_Setting_SettingType" json:"type,omitempty"`
	// the value for the setting
	//
	// Types that are valid to be assigned to SettingValueType:
	//
	//	*GroupDTO_Setting_NumericSettingValueType_
	//	*GroupDTO_Setting_StringSettingValueType_
	//	*GroupDTO_Setting_BooleanSettingValueType_
	//	*GroupDTO_Setting_IntegerSettingValueType_
	SettingValueType isGroupDTO_Setting_SettingValueType `protobuf_oneof:"setting_value_type"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GroupDTO_Setting) Reset() {
	*x = GroupDTO_Setting{}
	mi := &file_CommonDTO_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_Setting) ProtoMessage() {}

func (x *GroupDTO_Setting) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_Setting.ProtoReflect.Descriptor instead.
func (*GroupDTO_Setting) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8}
}

func (x *GroupDTO_Setting) GetType() GroupDTO_Setting_SettingType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GroupDTO_Setting_VCPU_CORES_MIN_THRESHOLD
}

func (x *GroupDTO_Setting) GetSettingValueType() isGroupDTO_Setting_SettingValueType {
	if x != nil {
		return x.SettingValueType
	}
	return nil
}

func (x *GroupDTO_Setting) GetNumericSettingValueType() *GroupDTO_Setting_NumericSettingValueType {
	if x != nil {
		if x, ok := x.SettingValueType.(*GroupDTO_Setting_NumericSettingValueType_); ok {
			return x.NumericSettingValueType
		}
	}
	return nil
}

func (x *GroupDTO_Setting) GetStringSettingValueType() *GroupDTO_Setting_StringSettingValueType {
	if x != nil {
		if x, ok := x.SettingValueType.(*GroupDTO_Setting_StringSettingValueType_); ok {
			return x.StringSettingValueType
		}
	}
	return nil
}

func (x *GroupDTO_Setting) GetBooleanSettingValueType() *GroupDTO_Setting_BooleanSettingValueType {
	if x != nil {
		if x, ok := x.SettingValueType.(*GroupDTO_Setting_BooleanSettingValueType_); ok {
			return x.BooleanSettingValueType
		}
	}
	return nil
}

func (x *GroupDTO_Setting) GetIntegerSettingValueType() *GroupDTO_Setting_IntegerSettingValueType {
	if x != nil {
		if x, ok := x.SettingValueType.(*GroupDTO_Setting_IntegerSettingValueType_); ok {
			return x.IntegerSettingValueType
		}
	}
	return nil
}

type isGroupDTO_Setting_SettingValueType interface {
	isGroupDTO_Setting_SettingValueType()
}

type GroupDTO_Setting_NumericSettingValueType_ struct {
	NumericSettingValueType *GroupDTO_Setting_NumericSettingValueType `protobuf:"bytes,2,opt,name=numeric_setting_value_type,json=numericSettingValueType,oneof"`
}

type GroupDTO_Setting_StringSettingValueType_ struct {
	StringSettingValueType *GroupDTO_Setting_StringSettingValueType `protobuf:"bytes,3,opt,name=string_setting_value_type,json=stringSettingValueType,oneof"`
}

type GroupDTO_Setting_BooleanSettingValueType_ struct {
	BooleanSettingValueType *GroupDTO_Setting_BooleanSettingValueType `protobuf:"bytes,4,opt,name=boolean_setting_value_type,json=booleanSettingValueType,oneof"`
}

type GroupDTO_Setting_IntegerSettingValueType_ struct {
	IntegerSettingValueType *GroupDTO_Setting_IntegerSettingValueType `protobuf:"bytes,5,opt,name=integer_setting_value_type,json=integerSettingValueType,oneof"`
}

func (*GroupDTO_Setting_NumericSettingValueType_) isGroupDTO_Setting_SettingValueType() {}

func (*GroupDTO_Setting_StringSettingValueType_) isGroupDTO_Setting_SettingValueType() {}

func (*GroupDTO_Setting_BooleanSettingValueType_) isGroupDTO_Setting_SettingValueType() {}

func (*GroupDTO_Setting_IntegerSettingValueType_) isGroupDTO_Setting_SettingValueType() {}

// SelectionSpec is used to select group members by checking their property values
type GroupDTO_SelectionSpec struct {
	state          protoimpl.MessageState                 `protogen:"open.v1"`
	Property       *string                                `protobuf:"bytes,1,req,name=property" json:"property,omitempty"`
	ExpressionType *GroupDTO_SelectionSpec_ExpressionType `protobuf:"varint,2,req,name=expression_type,json=expressionType,enum=common_dto.GroupDTO_SelectionSpec_ExpressionType" json:"expression_type,omitempty"`
	// Types that are valid to be assigned to PropertyValue:
	//
	//	*GroupDTO_SelectionSpec_PropertyValueDouble
	//	*GroupDTO_SelectionSpec_PropertyValueString
	//	*GroupDTO_SelectionSpec_PropertyValueStringList
	//	*GroupDTO_SelectionSpec_PropertyValueDoubleList
	PropertyValue isGroupDTO_SelectionSpec_PropertyValue `protobuf_oneof:"propertyValue"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_SelectionSpec) Reset() {
	*x = GroupDTO_SelectionSpec{}
	mi := &file_CommonDTO_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_SelectionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_SelectionSpec) ProtoMessage() {}

func (x *GroupDTO_SelectionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_SelectionSpec.ProtoReflect.Descriptor instead.
func (*GroupDTO_SelectionSpec) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 9}
}

func (x *GroupDTO_SelectionSpec) GetProperty() string {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return ""
}

func (x *GroupDTO_SelectionSpec) GetExpressionType() GroupDTO_SelectionSpec_ExpressionType {
	if x != nil && x.ExpressionType != nil {
		return *x.ExpressionType
	}
	return GroupDTO_SelectionSpec_EQUAL_TO
}

func (x *GroupDTO_SelectionSpec) GetPropertyValue() isGroupDTO_SelectionSpec_PropertyValue {
	if x != nil {
		return x.PropertyValue
	}
	return nil
}

func (x *GroupDTO_SelectionSpec) GetPropertyValueDouble() float64 {
	if x != nil {
		if x, ok := x.PropertyValue.(*GroupDTO_SelectionSpec_PropertyValueDouble); ok {
			return x.PropertyValueDouble
		}
	}
	return 0
}

func (x *GroupDTO_SelectionSpec) GetPropertyValueString() string {
	if x != nil {
		if x, ok := x.PropertyValue.(*GroupDTO_SelectionSpec_PropertyValueString); ok {
			return x.PropertyValueString
		}
	}
	return ""
}

func (x *GroupDTO_SelectionSpec) GetPropertyValueStringList() *GroupDTO_SelectionSpec_PropertyStringList {
	if x != nil {
		if x, ok := x.PropertyValue.(*GroupDTO_SelectionSpec_PropertyValueStringList); ok {
			return x.PropertyValueStringList
		}
	}
	return nil
}

func (x *GroupDTO_SelectionSpec) GetPropertyValueDoubleList() *GroupDTO_SelectionSpec_PropertyDoubleList {
	if x != nil {
		if x, ok := x.PropertyValue.(*GroupDTO_SelectionSpec_PropertyValueDoubleList); ok {
			return x.PropertyValueDoubleList
		}
	}
	return nil
}

type isGroupDTO_SelectionSpec_PropertyValue interface {
	isGroupDTO_SelectionSpec_PropertyValue()
}

type GroupDTO_SelectionSpec_PropertyValueDouble struct {
	PropertyValueDouble float64 `protobuf:"fixed64,3,opt,name=property_value_double,json=propertyValueDouble,oneof"`
}

type GroupDTO_SelectionSpec_PropertyValueString struct {
	PropertyValueString string `protobuf:"bytes,4,opt,name=property_value_string,json=propertyValueString,oneof"`
}

type GroupDTO_SelectionSpec_PropertyValueStringList struct {
	PropertyValueStringList *GroupDTO_SelectionSpec_PropertyStringList `protobuf:"bytes,5,opt,name=property_value_string_list,json=propertyValueStringList,oneof"`
}

type GroupDTO_SelectionSpec_PropertyValueDoubleList struct {
	PropertyValueDoubleList *GroupDTO_SelectionSpec_PropertyDoubleList `protobuf:"bytes,6,opt,name=property_value_double_list,json=propertyValueDoubleList,oneof"`
}

func (*GroupDTO_SelectionSpec_PropertyValueDouble) isGroupDTO_SelectionSpec_PropertyValue() {}

func (*GroupDTO_SelectionSpec_PropertyValueString) isGroupDTO_SelectionSpec_PropertyValue() {}

func (*GroupDTO_SelectionSpec_PropertyValueStringList) isGroupDTO_SelectionSpec_PropertyValue() {}

func (*GroupDTO_SelectionSpec_PropertyValueDoubleList) isGroupDTO_SelectionSpec_PropertyValue() {}

type GroupDTO_Setting_NumericSettingValueType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *float32               `protobuf:"fixed32,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_Setting_NumericSettingValueType) Reset() {
	*x = GroupDTO_Setting_NumericSettingValueType{}
	mi := &file_CommonDTO_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_Setting_NumericSettingValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_Setting_NumericSettingValueType) ProtoMessage() {}

func (x *GroupDTO_Setting_NumericSettingValueType) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_Setting_NumericSettingValueType.ProtoReflect.Descriptor instead.
func (*GroupDTO_Setting_NumericSettingValueType) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8, 0}
}

func (x *GroupDTO_Setting_NumericSettingValueType) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type GroupDTO_Setting_IntegerSettingValueType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *int32                 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_Setting_IntegerSettingValueType) Reset() {
	*x = GroupDTO_Setting_IntegerSettingValueType{}
	mi := &file_CommonDTO_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_Setting_IntegerSettingValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_Setting_IntegerSettingValueType) ProtoMessage() {}

func (x *GroupDTO_Setting_IntegerSettingValueType) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_Setting_IntegerSettingValueType.ProtoReflect.Descriptor instead.
func (*GroupDTO_Setting_IntegerSettingValueType) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8, 1}
}

func (x *GroupDTO_Setting_IntegerSettingValueType) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type GroupDTO_Setting_StringSettingValueType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *string                `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_Setting_StringSettingValueType) Reset() {
	*x = GroupDTO_Setting_StringSettingValueType{}
	mi := &file_CommonDTO_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_Setting_StringSettingValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_Setting_StringSettingValueType) ProtoMessage() {}

func (x *GroupDTO_Setting_StringSettingValueType) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_Setting_StringSettingValueType.ProtoReflect.Descriptor instead.
func (*GroupDTO_Setting_StringSettingValueType) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8, 2}
}

func (x *GroupDTO_Setting_StringSettingValueType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GroupDTO_Setting_BooleanSettingValueType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *bool                  `protobuf:"varint,1,opt,name=value,def=0" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for GroupDTO_Setting_BooleanSettingValueType fields.
const (
	Default_GroupDTO_Setting_BooleanSettingValueType_Value = bool(false)
)

func (x *GroupDTO_Setting_BooleanSettingValueType) Reset() {
	*x = GroupDTO_Setting_BooleanSettingValueType{}
	mi := &file_CommonDTO_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_Setting_BooleanSettingValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_Setting_BooleanSettingValueType) ProtoMessage() {}

func (x *GroupDTO_Setting_BooleanSettingValueType) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_Setting_BooleanSettingValueType.ProtoReflect.Descriptor instead.
func (*GroupDTO_Setting_BooleanSettingValueType) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 8, 3}
}

func (x *GroupDTO_Setting_BooleanSettingValueType) GetValue() bool {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return Default_GroupDTO_Setting_BooleanSettingValueType_Value
}

// List of string type property value
type GroupDTO_SelectionSpec_PropertyStringList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PropertyValue []string               `protobuf:"bytes,1,rep,name=property_value,json=propertyValue" json:"property_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_SelectionSpec_PropertyStringList) Reset() {
	*x = GroupDTO_SelectionSpec_PropertyStringList{}
	mi := &file_CommonDTO_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_SelectionSpec_PropertyStringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_SelectionSpec_PropertyStringList) ProtoMessage() {}

func (x *GroupDTO_SelectionSpec_PropertyStringList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_SelectionSpec_PropertyStringList.ProtoReflect.Descriptor instead.
func (*GroupDTO_SelectionSpec_PropertyStringList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 9, 0}
}

func (x *GroupDTO_SelectionSpec_PropertyStringList) GetPropertyValue() []string {
	if x != nil {
		return x.PropertyValue
	}
	return nil
}

// List of double type property value
type GroupDTO_SelectionSpec_PropertyDoubleList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PropertyValue []float64              `protobuf:"fixed64,1,rep,name=property_value,json=propertyValue" json:"property_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupDTO_SelectionSpec_PropertyDoubleList) Reset() {
	*x = GroupDTO_SelectionSpec_PropertyDoubleList{}
	mi := &file_CommonDTO_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupDTO_SelectionSpec_PropertyDoubleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDTO_SelectionSpec_PropertyDoubleList) ProtoMessage() {}

func (x *GroupDTO_SelectionSpec_PropertyDoubleList) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDTO_SelectionSpec_PropertyDoubleList.ProtoReflect.Descriptor instead.
func (*GroupDTO_SelectionSpec_PropertyDoubleList) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{5, 9, 1}
}

func (x *GroupDTO_SelectionSpec_PropertyDoubleList) GetPropertyValue() []float64 {
	if x != nil {
		return x.PropertyValue
	}
	return nil
}

// Reference to a valid ExternalTag
type ExternalResourceInfo_TagRef struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExternalTagId *string                `protobuf:"bytes,1,opt,name=external_tag_id,json=externalTagId" json:"external_tag_id,omitempty"`
	Type          *ExternalTag_TagType   `protobuf:"varint,2,opt,name=type,enum=common_dto.ExternalTag_TagType" json:"type,omitempty"`
	Name          *string                `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalResourceInfo_TagRef) Reset() {
	*x = ExternalResourceInfo_TagRef{}
	mi := &file_CommonDTO_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalResourceInfo_TagRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalResourceInfo_TagRef) ProtoMessage() {}

func (x *ExternalResourceInfo_TagRef) ProtoReflect() protoreflect.Message {
	mi := &file_CommonDTO_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalResourceInfo_TagRef.ProtoReflect.Descriptor instead.
func (*ExternalResourceInfo_TagRef) Descriptor() ([]byte, []int) {
	return file_CommonDTO_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ExternalResourceInfo_TagRef) GetExternalTagId() string {
	if x != nil && x.ExternalTagId != nil {
		return *x.ExternalTagId
	}
	return ""
}

func (x *ExternalResourceInfo_TagRef) GetType() ExternalTag_TagType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ExternalTag_UNKNOWN_TAG
}

func (x *ExternalResourceInfo_TagRef) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ExternalResourceInfo_TagRef) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_CommonDTO_proto protoreflect.FileDescriptor

var file_CommonDTO_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x1a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc3, 0x9b, 0x02, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x40,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12,
	0x50, 0x0a, 0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x10, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x3a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x65, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0a, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x0e, 0x6b, 0x65, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x65,
	0x64, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x66, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x66, 0x12, 0x55, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x47, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf5, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf6, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a,
	0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf7, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x15,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66,
	0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x18, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0xfc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x16, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xfd, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x63, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xff, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x50, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x80, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x15,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x82, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x83, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x57, 0x0a, 0x12, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x84, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x85, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x69, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x86, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x16, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x87, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x47, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x89, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x8a, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8b, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x7c, 0x0a, 0x1f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8c, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x8d, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8e, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47,
	0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8f,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x90, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a,
	0x14, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x91, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x19,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x16, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x93, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x64, 0x61, 0x74, 0x61,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x94, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x1c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x19, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x76, 0x0a, 0x1d, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x01, 0x52, 0x1a, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x7c, 0x0a, 0x1f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01,
	0x52, 0x1c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x38,
	0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xd7, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x44,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x53, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x1a, 0x5f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0b, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x22, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x7d, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x1a, 0xed, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x62, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0xa7, 0x07, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x07, 0x6c, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6c, 0x75, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x05, 0x6c, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x6c, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x03, 0x77, 0x77, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x12, 0x2d, 0x0a,
	0x0e, 0x6e, 0x6f, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6e, 0x6f,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0b, 0x72,
	0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x0b, 0x72, 0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x48, 0x63, 0x69, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x48, 0x63, 0x69, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x1a, 0x88, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x61, 0x69, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x69,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x1a, 0x5f, 0x0a, 0x0b, 0x52,
	0x61, 0x77, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x1a, 0x6d, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x5a, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0xde, 0x02, 0x0a, 0x12,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x60, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x1a, 0x4c,
	0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x57, 0x0a, 0x10,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3c, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x5f, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xee, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6f,
	0x70, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6f,
	0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f,
	0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a,
	0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x69, 0x6f, 0x70, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xeb, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x24, 0x0a,
	0x0c, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x69, 0x6f, 0x70, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xf9, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a,
	0xa7, 0x05, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x6a, 0x0a,
	0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x69, 0x65, 0x72, 0x3a, 0x23,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x49, 0x45, 0x52, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x7a, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e,
	0x74, 0x22, 0x2f, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49,
	0x4e, 0x55, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x10, 0x02, 0x22, 0xf4, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x23, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41,
	0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x56, 0x32, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x56, 0x33, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x56, 0x32, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x50, 0x52, 0x45,
	0x4d, 0x49, 0x55, 0x4d, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c,
	0x4f, 0x57, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x0d, 0x1a, 0x71, 0x0a, 0x16, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x80, 0x01, 0x0a,
	0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a,
	0xec, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0e,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc3,
	0x01, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x4e, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x10, 0x04, 0x1a, 0x9c, 0x03, 0x0a, 0x13, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x53, 0x5f, 0x49, 0x43, 0x5f, 0x54, 0x6f, 0x70, 0x5f, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x10, 0x03, 0x1a, 0xbc, 0x0a, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x1c, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x19, 0x5f, 0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x47, 0x62, 0x12, 0x54, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x50, 0x55, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x50, 0x55, 0x12, 0x59, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x0e,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x7a, 0x0a, 0x1c, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x04, 0x1a, 0x6b, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x1a,
	0xb1, 0x06, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x72, 0x6c, 0x12, 0x5b, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0xdc, 0x04, 0x0a, 0x0d, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x13, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x8c, 0x03, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6c, 0x0a, 0x09,
	0x73, 0x33, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x4c, 0x0a, 0x08, 0x53, 0x33,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x34, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x48, 0x43, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x46, 0x45, 0x10, 0x03, 0x42, 0x10,
	0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x77, 0x0a, 0x07, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x42, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x69, 0x42, 0x3a, 0x02, 0x18, 0x01, 0x1a, 0x3d, 0x0a, 0x15,
	0x50, 0x43, 0x49, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x47, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xe6, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x69, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x69, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc0, 0x0d, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x15, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6f, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x73, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x22,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x82, 0x02,
	0x0a, 0x1b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x2a, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x01, 0x22, 0x35,
	0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x22, 0x2b, 0x0a, 0x0d, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x53, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x49, 0x53,
	0x4b, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x52, 0x53, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x5a, 0x52, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x52, 0x53, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x47, 0x52, 0x53, 0x10, 0x04, 0x22, 0x99, 0x01, 0x0a, 0x14,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x45,
	0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a,
	0x0a, 0x26, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xf5, 0x0e, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x76, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x73, 0x12, 0x58,
	0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x4d,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x62, 0x69, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x62, 0x69, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x61, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x58, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3a, 0x10, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x52, 0x0c, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d,
	0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x45, 0x70, 0x68, 0x65,
	0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a,
	0x13, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x13, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x41, 0x0a, 0x18, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x18, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x67, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x67, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x47, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x61, 0x0a, 0x15, 0x70, 0x63, 0x69, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x43, 0x49, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x70, 0x63,
	0x69, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x47, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6a, 0x0a, 0x18, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x41, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x40, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x17, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x0d, 0x56, 0x4d,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x4e, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x04, 0x1a,
	0xc1, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x84, 0x01, 0x0a,
	0x1a, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xec, 0x03, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x53, 0x0a, 0x14,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x11,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x55,
	0x70, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x68, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x70, 0x73, 0x12, 0x2b, 0x0a,
	0x10, 0x68, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x0e, 0x68, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x1a, 0xff, 0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x4d, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x44, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x54, 0x69, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0xbc, 0x01, 0x0a, 0x16, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x9d, 0x01, 0x0a, 0x15, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x6f, 0x70, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6f, 0x70,
	0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6f, 0x70,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x49, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f, 0x70,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09,
	0x69, 0x6f, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8e, 0x02, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0xd9, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x70, 0x75, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x65, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4d, 0x65,
	0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x75, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x11, 0x63,
	0x70, 0x75, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x50,
	0x55, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65, 0x64, 0x52, 0x11, 0x63, 0x70, 0x75, 0x54,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xf4, 0x02,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a,
	0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30,
	0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x76, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x56, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x65, 0x0a,
	0x0b, 0x56, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x41, 0x51, 0x55, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x02, 0x1a, 0xf3, 0x05, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x47, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x1b, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x14, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x0f, 0x0a, 0x0d, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x09, 0x0a, 0x07, 0x4a, 0x6f,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x10, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c,
	0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x17, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0xce, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x63, 0x70, 0x75, 0x4f, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x76, 0x63, 0x70, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x6d, 0x65, 0x6d, 0x4f, 0x76,
	0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x76, 0x6d, 0x65, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x76, 0x63, 0x70, 0x75, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x56, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x3a, 0x09, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x43, 0x4f, 0x52, 0x45, 0x52, 0x08, 0x76, 0x63,
	0x70, 0x75, 0x55, 0x6e, 0x69, 0x74, 0x1a, 0x2d, 0x0a, 0x07, 0x56, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x86, 0x04, 0x0a, 0x13, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x07, 0x70, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x43, 0x70, 0x75, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x68, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x68, 0x7a, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44,
	0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4f, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3a, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2c,
	0x0a, 0x07, 0x50, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x08, 0x66, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x1a, 0xc7, 0x01, 0x0a,
	0x1a, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x3a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x1a, 0x8a, 0x03, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x56, 0x0a, 0x0e, 0x76, 0x64, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x0c, 0x76, 0x64, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x76, 0x64, 0x63, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x12,
	0x76, 0x64, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0xa5, 0x04, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x3e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a,
	0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x36,
	0x0a, 0x18, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x46,
	0x52, 0x4f, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x39, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x4b,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10,
	0x02, 0x22, 0x38, 0x0a, 0x19, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6f, 0x6c,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x58, 0x0a, 0x0e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc6, 0x01, 0x0a, 0x19, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x69, 0x6f, 0x1a, 0xc7,
	0x01, 0x0a, 0x1a, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6f,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x02, 0x69, 0x6f, 0x1a, 0x9b, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x1a, 0x74, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x1a, 0x5d, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x70, 0x0a, 0x06, 0x49,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x43, 0x0a,
	0x0d, 0x44, 0x69, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x69,
	0x73, 0x6b, 0x1a, 0x5a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0xea,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6f, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x06, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x09, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6f, 0x70, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x47, 0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0c, 0x49,
	0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9a, 0x04, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x54, 0x0a,
	0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x4b, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x66, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x66,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x44,
	0x65, 0x66, 0x1a, 0xe5, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x1a, 0x67, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x1a, 0x94, 0x01, 0x0a, 0x20, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xdf, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x67,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x70, 0x73, 0x54, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x28, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4d, 0x75, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x06, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x7b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x15, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x1a, 0xc1, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x02, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02,
	0x52, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x1a, 0xaa, 0x11, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x5e, 0x0a,
	0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x5b, 0x0a,
	0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x02, 0x28, 0x05,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x02, 0x28, 0x01, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x10, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x94, 0x04, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x1e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x63, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0xc9, 0x01, 0x0a, 0x29, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x25, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x1a, 0x1d, 0x0a, 0x1b, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a,
	0x46, 0x0a, 0x25, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x37, 0x0a,
	0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x22, 0x2e, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x50,
	0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x55, 0x50, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x10, 0x03, 0x22, 0xff, 0x01, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x48, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53,
	0x45, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x09,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53,
	0x51, 0x4c, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49, 0x4e, 0x55,
	0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x0b, 0x4a, 0x04,
	0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x1a, 0xcc, 0x27, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x70, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x11, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x48, 0x01, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40,
	0x0a, 0x1c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x6c, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x3a, 0x1e, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x71,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x77, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xad, 0x12, 0x0a, 0x13, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x79, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0f, 0x62, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x72, 0x0a,
	0x0e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x6f, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x1a, 0x11, 0x0a, 0x0f, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0xbb, 0x0b, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54,
	0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x7c, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x54,
	0x69, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x9f, 0x01, 0x0a, 0x19, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x16, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x8c, 0x01, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x0d, 0x0a, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x1a, 0x13, 0x0a, 0x11, 0x54, 0x69, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x25, 0x0a, 0x0b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x1a, 0x48, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4f, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xff, 0x01, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x12, 0x0a, 0x10, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x1a, 0xe4, 0x03, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x7b,
	0x0a, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x64, 0x1a, 0x4b, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x50, 0x0a, 0x0b, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc5, 0x02, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x74, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0d, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x22, 0x2e, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x1a, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x1a, 0x3b, 0x0a, 0x10, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x1a, 0x7e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x12, 0x60, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x1a, 0xcc, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x22,
	0xe4, 0x01, 0x0a, 0x14, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x02, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x75, 0x4e, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x22, 0xd0, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x88, 0x0d, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a,
	0x0a, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x52, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x48, 0x52, 0x45, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0c, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52,
	0x45, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41,
	0x53, 0x53, 0x49, 0x53, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x11,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x59, 0x50, 0x45,
	0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x13, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4c, 0x41, 0x4e, 0x10,
	0x17, 0x12, 0x1a, 0x0a, 0x12, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x18, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x13, 0x56,
	0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1a, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x1b, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50, 0x10, 0x1d, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x1e, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x21, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x49, 0x53,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d,
	0x50, 0x55, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x23, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x45, 0x54, 0x10, 0x25, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x56, 0x45, 0x52, 0x10,
	0x26, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x44,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x27, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x44, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x2b, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x50, 0x4f, 0x44, 0x10, 0x2c, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x50, 0x4f, 0x44, 0x10, 0x2d, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x2e, 0x12, 0x11, 0x0a,
	0x0d, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x2f,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x30, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x31, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x33, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x35, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x37,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52,
	0x10, 0x38, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x49,
	0x45, 0x52, 0x10, 0x39, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x3a, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10,
	0x3b, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x4f, 0x4c,
	0x55, 0x4d, 0x45, 0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x4f,
	0x44, 0x10, 0x3d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x10, 0x3e, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x3f, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x40, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x4f,
	0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45,
	0x52, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x42, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x43, 0x49, 0x5f, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10,
	0x43, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x10, 0x45, 0x12, 0x0f, 0x0a, 0x07, 0x56, 0x4d, 0x5f, 0x53, 0x50, 0x45,
	0x43, 0x10, 0x46, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4c,
	0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x47, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x48, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x49, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x10, 0x4a, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x10, 0x4b, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x4c, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x4d, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x4e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x56, 0x4d, 0x5f, 0x50, 0x48,
	0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x4f,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55,
	0x53, 0x45, 0x10, 0x50, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x57, 0x41, 0x52,
	0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x45, 0x52, 0x10, 0x51, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x52, 0x12, 0x0c, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0x0f, 0x22, 0x77, 0x0a, 0x0a, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x06, 0x22, 0x45, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x64, 0x75, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x44, 0x30, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41,
	0x49, 0x44, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x44, 0x35, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x44, 0x36, 0x10, 0x06, 0x22, 0xb8, 0x01, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x53, 0x43, 0x53, 0x49, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x42,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x43, 0x4f, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x46, 0x53, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x46, 0x53, 0x5f, 0x53, 0x4d, 0x42,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4d, 0x46, 0x53,
	0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x53, 0x41, 0x4e, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04,
	0x56, 0x56, 0x4f, 0x4c, 0x10, 0x0d, 0x22, 0x7b, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x41, 0x50, 0x10,
	0x05, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53,
	0x4f, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x53, 0x58, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c,
	0x45, 0x10, 0x08, 0x22, 0x7b, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x44, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53,
	0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x56, 0x4d, 0x45, 0x5f, 0x53, 0x53, 0x44, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x10, 0x0c,
	0x22, 0x54, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x6e, 0x61, 0x6c,
	0x74, 0x79, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x4c, 0x41, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4d, 0x44, 0x5f, 0x52, 0x41, 0x44, 0x45,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x5f,
	0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x4b, 0x45, 0x50, 0x4c, 0x45, 0x52, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x10,
	0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x48, 0x4f, 0x50, 0x50,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x4d,
	0x41, 0x58, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4d, 0x44, 0x5f,
	0x52, 0x41, 0x44, 0x45, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10,
	0x0a, 0x22, 0xc1, 0x02, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x34, 0x5f, 0x4e, 0x56, 0x49,
	0x44, 0x49, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x34, 0x47, 0x5f, 0x4e, 0x56, 0x49,
	0x44, 0x49, 0x41, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x31, 0x30, 0x47, 0x5f, 0x4e, 0x56,
	0x49, 0x44, 0x49, 0x41, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x36, 0x30, 0x5f, 0x4e, 0x56,
	0x49, 0x44, 0x49, 0x41, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x35, 0x32, 0x30, 0x5f, 0x41,
	0x4d, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x31, 0x5f, 0x41, 0x57, 0x53,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x32, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x38, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x10,
	0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41,
	0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49,
	0x41, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44,
	0x49, 0x41, 0x5f, 0x50, 0x43, 0x49, 0x65, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x31, 0x30,
	0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x43, 0x49, 0x65, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x53,
	0x58, 0x4d, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x31, 0x30, 0x5f, 0x4e, 0x56, 0x49, 0x44,
	0x49, 0x41, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x31, 0x30, 0x30, 0x5f, 0x4e, 0x56, 0x49,
	0x44, 0x49, 0x41, 0x5f, 0x4e, 0x56, 0x4c, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x36, 0x32,
	0x30, 0x5f, 0x41, 0x4d, 0x44, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x32, 0x35, 0x5f,
	0x41, 0x4d, 0x44, 0x10, 0x12, 0x22, 0x4c, 0x0a, 0x08, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x34, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x34, 0x47, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x41, 0x31, 0x30, 0x47, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4d, 0x44, 0x5f, 0x56, 0x35, 0x32, 0x30, 0x10, 0x04, 0x1a,
	0x02, 0x18, 0x01, 0x22, 0x63, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x48, 0x55,
	0x42, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x59, 0x4f, 0x55,
	0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x25, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x02, 0x22,
	0x2d, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x41, 0x5a, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x41, 0x5a, 0x10, 0x02, 0x22, 0x33,
	0x0a, 0x11, 0x43, 0x50, 0x55, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x61, 0x73, 0x65,
	0x64, 0x10, 0x01, 0x22, 0x22, 0x0a, 0x11, 0x56, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x22, 0x60, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x55,
	0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x33, 0x0a, 0x15, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x02, 0x22, 0x60,
	0x0a, 0x20, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x41,
	0x53, 0x5f, 0x59, 0x4f, 0x55, 0x5f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03,
	0x22, 0x2d, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x49, 0x6f, 0x70, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x55, 0x4d, 0x5f, 0x37, 0x32, 0x30, 0x30, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x53,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x5f, 0x31, 0x30, 0x4b, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x5f, 0x31, 0x35, 0x4b,
	0x5f, 0x44, 0x49, 0x53, 0x4b, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x55, 0x4d, 0x5f,
	0x56, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x53, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x55, 0x4d, 0x5f, 0x49, 0x4f, 0x50, 0x53, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06, 0x22, 0x3a, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x4f, 0x58, 0x59,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x03, 0x22, 0x94, 0x02, 0x0a, 0x06, 0x4f, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x53, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x55, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x48, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e,
	0x55, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x57, 0x45, 0x42, 0x10,
	0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x42, 0x55, 0x4e, 0x54, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x14, 0x12, 0x1d,
	0x0a, 0x19, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53,
	0x51, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x15, 0x12, 0x18, 0x0a,
	0x14, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51,
	0x4c, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x53, 0x5f, 0x42, 0x59, 0x4f, 0x4c, 0x10, 0x18, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x42, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x52, 0x49,
	0x41, 0x44, 0x42, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45,
	0x53, 0x51, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x51, 0x4c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x06, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x10, 0x06, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x50, 0x4f, 0x53, 0x54, 0x47,
	0x52, 0x45, 0x53, 0x51, 0x4c, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x47, 0x4f,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x59, 0x4e, 0x41, 0x50, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x53, 0x4d, 0x4f, 0x53, 0x10, 0x0c, 0x22, 0x37, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x03,
	0x42, 0x0d, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x15, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x57, 0x4e, 0x53, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0xd2, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x22, 0xde, 0x3c, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x4c, 0x0a, 0x0d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x61, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x70, 0x65, 0x61, 0x6b, 0x12, 0x1c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x04, 0x74, 0x68, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x04, 0x74, 0x68, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x0a, 0x09, 0x69, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x50, 0x63, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x63, 0x74, 0x12, 0x23, 0x0a,
	0x09, 0x69, 0x73, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73, 0x50, 0x65, 0x61, 0x6b, 0x50,
	0x63, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x52, 0x0a, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69,
	0x6c, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x1d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x79, 0x0a, 0x1e, 0x64,
	0x65, 0x63, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65,
	0x63, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x1b, 0x64, 0x65, 0x63, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x13, 0x69,
	0x73, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf5, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x17, 0x76, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf6,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x56, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15, 0x76, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x6c, 0x0a, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf7, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xf8, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x47, 0x70, 0x75,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x67, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0xf9, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x67,
	0x70, 0x75, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09, 0x76, 0x6d, 0x65,
	0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x01, 0x52, 0x08, 0x76, 0x6d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x09,
	0x76, 0x63, 0x70, 0x75, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x56, 0x43, 0x70, 0x75, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x76, 0x63, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0xa6, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x62,
	0x61, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x1a, 0xa6, 0x02, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x59,
	0x0a, 0x26, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x22, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x10, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x7d, 0x0a, 0x1b, 0x44, 0x65, 0x63, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x98, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3e, 0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x4e, 0x0a, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x6f, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x1a, 0xb5, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x4f, 0x50,
	0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x44, 0x69, 0x73, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x4f, 0x50, 0x53, 0x12, 0x30,
	0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x4f, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x4f, 0x50, 0x53,
	0x12, 0x38, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x4f, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x4f, 0x50, 0x53, 0x1a, 0x40, 0x0a, 0x16, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0c, 0x0a, 0x0a,
	0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3a, 0x0a, 0x07, 0x47, 0x70,
	0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x72, 0x47, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x47, 0x70, 0x75, 0x1a, 0x72, 0x0a, 0x08, 0x56, 0x4d, 0x65, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0f, 0x68, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0f, 0x68, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x12, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x1a, 0xfb, 0x01, 0x0a, 0x08, 0x56,
	0x43, 0x70, 0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0f, 0x68, 0x6f, 0x74, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x68, 0x6f, 0x74, 0x41, 0x64, 0x64, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x12, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x0f, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x43,
	0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0f, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x43, 0x70, 0x75,
	0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x6e, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x72, 0x75,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x1a, 0x78, 0x0a, 0x0f, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a, 0x17, 0x70,
	0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x17, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x1a, 0xcf, 0x01, 0x0a, 0x0f, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73,
	0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xe1, 0x1b, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x50, 0x55, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x51, 0x31, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x45, 0x44, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08,
	0x12, 0x0c, 0x0a, 0x08, 0x51, 0x31, 0x36, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x09, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x33, 0x32, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x53, 0x56, 0x43, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x33, 0x5f, 0x56, 0x43,
	0x50, 0x55, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4c, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x4f, 0x44, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x52, 0x4f, 0x53, 0x53,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53, 0x56,
	0x43, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x53, 0x5f, 0x50, 0x4d, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x38, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10,
	0x11, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07,
	0x51, 0x36, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x45, 0x4d, 0x10, 0x15, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x37, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x17, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x45, 0x4c, 0x10, 0x19, 0x12, 0x08, 0x0a,
	0x04, 0x56, 0x43, 0x50, 0x55, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x4e, 0x5f, 0x56, 0x43,
	0x50, 0x55, 0x10, 0x1b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x53, 0x56, 0x43, 0x10, 0x1d, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x32, 0x5f, 0x56, 0x43,
	0x50, 0x55, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x35, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10,
	0x20, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x57, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x22, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52,
	0x4f, 0x53, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x53,
	0x56, 0x43, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4f, 0x5f,
	0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03, 0x56, 0x44, 0x43, 0x10, 0x2a, 0x12, 0x0c,
	0x0a, 0x08, 0x51, 0x36, 0x34, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2c, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10,
	0x2d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x2e, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54,
	0x10, 0x2f, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x55, 0x4d, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x30,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x31, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x32, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x53, 0x50, 0x4d, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x33, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x34, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4d, 0x45,
	0x4d, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x54, 0x10, 0x36, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x41, 0x54, 0x41, 0x43, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x39, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x34, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10,
	0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x3d, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x50, 0x10,
	0x3e, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x3f, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x41, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x52, 0x53, 0x5f, 0x53, 0x45, 0x47, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x42,
	0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x43, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x44, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x42, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x10, 0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x10, 0x46, 0x12, 0x17, 0x0a, 0x0f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x47, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59,
	0x10, 0x48, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44, 0x49, 0x54, 0x59,
	0x10, 0x49, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4d, 0x50, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x4a, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x41, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x44,
	0x49, 0x54, 0x59, 0x10, 0x4b, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x4c, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41,
	0x50, 0x10, 0x4d, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x4e, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x4f, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0x50, 0x12, 0x13, 0x0a, 0x0f, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x4c, 0x55, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x51,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10, 0x52, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x53,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x55, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x55, 0x4d,
	0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x56, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x4f, 0x4e, 0x45, 0x10,
	0x57, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x58, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43,
	0x50, 0x55, 0x10, 0x59, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4d, 0x45, 0x4d,
	0x10, 0x5a, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x5b, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x50,
	0x55, 0x10, 0x5c, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x45, 0x4d,
	0x10, 0x5d, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x5e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x5f, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x60, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x61, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x4d, 0x50,
	0x4c, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x62, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x45, 0x53, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x50, 0x4f, 0x4e, 0x10,
	0x63, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x65, 0x12, 0x1e, 0x0a, 0x16, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x66, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x16, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x67, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x68, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x43, 0x4c, 0x49, 0x51, 0x55, 0x45, 0x10, 0x69,
	0x12, 0x14, 0x0a, 0x10, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x51,
	0x55, 0x4f, 0x54, 0x41, 0x10, 0x6a, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x6b, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x10, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x4d, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x43, 0x5f, 0x43, 0x41, 0x50, 0x41,
	0x43, 0x49, 0x54, 0x59, 0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x50, 0x49, 0x10, 0x70, 0x12,
	0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x54, 0x55, 0x10, 0x72, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x10, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x75, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x53, 0x10, 0x76, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x43, 0x50,
	0x55, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x77, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x78, 0x12, 0x16, 0x0a,
	0x12, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45, 0x54, 0x5f, 0x54, 0x48, 0x52,
	0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x7a, 0x12, 0x16, 0x0a, 0x12,
	0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x7b, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55,
	0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x7c, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x53, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x7d, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x53, 0x44,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x7e, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x7f, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x80, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x54, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x81, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x83, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x10, 0x84, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x85, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x41, 0x52, 0x42, 0x4f, 0x4e, 0x10, 0x86, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x44, 0x57,
	0x55, 0x10, 0x87, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x88, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x4f, 0x52, 0x53, 0x10, 0x89, 0x01, 0x12, 0x13, 0x0a, 0x0a, 0x47, 0x50, 0x55, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x8a, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x12, 0x0a, 0x09, 0x47,
	0x50, 0x55, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x8b, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12,
	0x07, 0x0a, 0x02, 0x52, 0x55, 0x10, 0x8c, 0x01, 0x12, 0x16, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f,
	0x4d, 0x45, 0x4d, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x8d, 0x01, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8e, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x47, 0x50,
	0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x8f, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x56, 0x47, 0x50, 0x55,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x90, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50,
	0x45, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x46, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x59, 0x10, 0x91, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x45, 0x45, 0x52, 0x5f,
	0x54, 0x4f, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x5f, 0x41, 0x46, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x92, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x93, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x56, 0x47, 0x50,
	0x55, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x10, 0x94, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x47, 0x50, 0x55, 0x10, 0x95, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x50, 0x55, 0x5f, 0x4d,
	0x45, 0x4d, 0x10, 0x96, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x97, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x50, 0x55, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x98, 0x01, 0x12,
	0x11, 0x0a, 0x0c, 0x51, 0x55, 0x45, 0x55, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x99, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x9a, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x4c, 0x4d, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x10, 0x9b, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x9c, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x43, 0x49, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x9d, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x45, 0x4e, 0x53, 0x4f, 0x52,
	0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x9e, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x50,
	0x55, 0x5f, 0x46, 0x50, 0x36, 0x34, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x9f, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x5f, 0x46, 0x50, 0x33, 0x32, 0x5f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x10, 0xa0, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0xa1,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x5f, 0x46, 0x50, 0x31, 0x36, 0x5f, 0x45, 0x4e,
	0x47, 0x49, 0x4e, 0x45, 0x10, 0xa2, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x52, 0x41, 0x49, 0x44, 0x5f,
	0x48, 0x4f, 0x53, 0x54, 0x53, 0x10, 0xa3, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0xa4, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0xa5, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x48, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xa6,
	0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x4d, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa7, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0xa8, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56,
	0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0xa9, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48,
	0x50, 0x55, 0x54, 0x5f, 0x48, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xaa, 0x01, 0x12, 0x26, 0x0a, 0x21,
	0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0xab, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55,
	0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x4d,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xac, 0x01, 0x12, 0x2b, 0x0a,
	0x26, 0x49, 0x4f, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x50, 0x55, 0x54, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xad, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0x0f, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x68, 0x6f,
	0x74, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x15,
	0x56, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x2c, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f,
	0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x11, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x16, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x69, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x54, 0x4f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x74,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x13, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x21, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x57, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x54, 0x61, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xf2, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x62, 0x75,
	0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x07, 0x69, 0x73, 0x42, 0x75, 0x79, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x12, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x66, 0x6f, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x66, 0x6f, 0x72, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x15, 0x73, 0x74, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x61, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x13, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x41, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x1a, 0x5e, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x70, 0x65, 0x63, 0x1a, 0x25, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x68, 0x0a, 0x1a, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x6f, 0x0a, 0x0d, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x74, 0x5f,
	0x6d, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x06,
	0x61, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x1a, 0xd2, 0x10, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x73, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x1a, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54,
	0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x17, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x1a,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x1a, 0x2f, 0x0a, 0x17, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x2f, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x2e, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x36, 0x0a, 0x17, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd7, 0x0a, 0x0a, 0x0b,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x56,
	0x43, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x43, 0x50,
	0x55, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53,
	0x4c, 0x4f, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x52,
	0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x55, 0x50,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c,
	0x5f, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x53, 0x10, 0x09, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x58, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x53, 0x10,
	0x0a, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x59, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x56,
	0x43, 0x50, 0x55, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x4d, 0x41, 0x58, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10,
	0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x11,
	0x12, 0x21, 0x0a, 0x1d, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x13, 0x12, 0x19,
	0x0a, 0x15, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4d, 0x45,
	0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41,
	0x42, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4d,
	0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x56,
	0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x45, 0x4d,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x10, 0x19, 0x12,
	0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x4d, 0x45,
	0x4d, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x52,
	0x45, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x49, 0x4e, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x1d, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x4f,
	0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f,
	0x44, 0x10, 0x1e, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x4c, 0x45, 0x52,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x4e, 0x5f, 0x4f, 0x42,
	0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x56, 0x4d, 0x10, 0x20, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x56, 0x4d, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x55, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x10, 0x23,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x4c, 0x4f, 0x10, 0x24, 0x12, 0x21, 0x0a, 0x1d,
	0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x25, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x58,
	0x10, 0x26, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x41,
	0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x27, 0x12,
	0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x28,
	0x12, 0x1b, 0x0a, 0x17, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x29, 0x12, 0x1b, 0x0a,
	0x17, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x5f, 0x56, 0x43, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x2b, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x5f, 0x56, 0x4d, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4c, 0x4d, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f,
	0x53, 0x4c, 0x4f, 0x10, 0x2d, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xaa, 0x07, 0x0a, 0x0d,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x74, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x54,
	0x4f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3b, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x3b, 0x0a, 0x12, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c,
	0x41, 0x52, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x47, 0x45, 0x58, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41,
	0x50, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x0e, 0x42, 0x0f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x4d,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x55, 0x53,
	0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x53, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x09, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56,
	0x45, 0x52, 0x45, 0x44, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x59, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x59, 0x45,
	0x52, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x4e, 0x54, 0x49,
	0x5f, 0x41, 0x46, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x07, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49,
	0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x08, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x02,
	0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x54,
	0x4f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x54, 0x4f, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x3a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x47, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x49, 0x4e, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x22, 0x9d, 0x01, 0x0a, 0x0d,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x12, 0x52, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x22, 0x38, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x50, 0x47, 0x10, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x13,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70,
	0x44, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x45, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x3e,
	0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22, 0x46,
	0x0a, 0x12, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x54, 0x4f, 0x12, 0x5a, 0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56,
	0x0a, 0x16, 0x64, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16,
	0x64, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x54, 0x4f, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10,
	0xe8, 0x07, 0x22, 0x43, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x64, 0x69, 0x74, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x22, 0xdc, 0x02, 0x0a, 0x1f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1b, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4c, 0x0a, 0x1e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc4, 0x02, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54,
	0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5a, 0x0a,
	0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x47,
	0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x03, 0x22, 0xb3, 0x04, 0x0a, 0x14, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x66, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x1a, 0x8f, 0x01,
	0x0a, 0x06, 0x54, 0x61, 0x67, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a,
	0x33, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x42, 0x5e, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d, 0x74, 0x75,
	0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x74, 0x6f, 0x42, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44,
	0x54, 0x4f, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x62, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75,
	0x72, 0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f,
})

var (
	file_CommonDTO_proto_rawDescOnce sync.Once
	file_CommonDTO_proto_rawDescData []byte
)

func file_CommonDTO_proto_rawDescGZIP() []byte {
	file_CommonDTO_proto_rawDescOnce.Do(func() {
		file_CommonDTO_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_CommonDTO_proto_rawDesc), len(file_CommonDTO_proto_rawDesc)))
	})
	return file_CommonDTO_proto_rawDescData
}

var file_CommonDTO_proto_enumTypes = make([]protoimpl.EnumInfo, 61)
var file_CommonDTO_proto_msgTypes = make([]protoimpl.MessageInfo, 156)
var file_CommonDTO_proto_goTypes = []any{
	(UpdateType)(0),                                                           // 0: common_dto.UpdateType
	(EntityDTO_EntityType)(0),                                                 // 1: common_dto.EntityDTO.EntityType
	(EntityDTO_PowerState)(0),                                                 // 2: common_dto.EntityDTO.PowerState
	(EntityDTO_StorageRedundancyMethod)(0),                                    // 3: common_dto.EntityDTO.StorageRedundancyMethod
	(EntityDTO_StorageType)(0),                                                // 4: common_dto.EntityDTO.StorageType
	(EntityDTO_VirtualMachineFileType)(0),                                     // 5: common_dto.EntityDTO.VirtualMachineFileType
	(EntityDTO_InstanceDiskType)(0),                                           // 6: common_dto.EntityDTO.InstanceDiskType
	(EntityDTO_ScalingPenaltyReason)(0),                                       // 7: common_dto.EntityDTO.ScalingPenaltyReason
	(EntityDTO_AcceleratorFamily)(0),                                          // 8: common_dto.EntityDTO.AcceleratorFamily
	(EntityDTO_AcceleratorModel)(0),                                           // 9: common_dto.EntityDTO.AcceleratorModel
	(EntityDTO_GpuModel)(0),                                                   // 10: common_dto.EntityDTO.GpuModel
	(EntityDTO_LicenseModel)(0),                                               // 11: common_dto.EntityDTO.LicenseModel
	(EntityDTO_ClusterRole)(0),                                                // 12: common_dto.EntityDTO.ClusterRole
	(EntityDTO_DeploymentType)(0),                                             // 13: common_dto.EntityDTO.DeploymentType
	(EntityDTO_CPUThrottlingType)(0),                                          // 14: common_dto.EntityDTO.CPUThrottlingType
	(EntityDTO_VcpuCommodityUnit)(0),                                          // 15: common_dto.EntityDTO.VcpuCommodityUnit
	(EntityDTO_AutomationLevel)(0),                                            // 16: common_dto.EntityDTO.AutomationLevel
	(EntityDTO_VirtualDatacenterRole)(0),                                      // 17: common_dto.EntityDTO.VirtualDatacenterRole
	(EntityDTO_VirtualDatacenterAllocationModel)(0),                           // 18: common_dto.EntityDTO.VirtualDatacenterAllocationModel
	(EntityDTO_DiskRole)(0),                                                   // 19: common_dto.EntityDTO.DiskRole
	(EntityDTO_IopsItemNames)(0),                                              // 20: common_dto.EntityDTO.IopsItemNames
	(EntityDTO_EntityOrigin)(0),                                               // 21: common_dto.EntityDTO.EntityOrigin
	(EntityDTO_OSType)(0),                                                     // 22: common_dto.EntityDTO.OSType
	(EntityDTO_DatabaseEngine)(0),                                             // 23: common_dto.EntityDTO.DatabaseEngine
	(EntityDTO_InstanceTenancy)(0),                                            // 24: common_dto.EntityDTO.InstanceTenancy
	(EntityDTO_ApplicationServiceData_Platform)(0),                            // 25: common_dto.EntityDTO.ApplicationServiceData.Platform
	(EntityDTO_ApplicationServiceData_Tier)(0),                                // 26: common_dto.EntityDTO.ApplicationServiceData.Tier
	(EntityDTO_KubernetesServiceData_ServiceType)(0),                          // 27: common_dto.EntityDTO.KubernetesServiceData.ServiceType
	(EntityDTO_BusinessAccountData_AccountType)(0),                            // 28: common_dto.EntityDTO.BusinessAccountData.AccountType
	(EntityDTO_ComputeTierData_DedicatedStorageNetworkState)(0),               // 29: common_dto.EntityDTO.ComputeTierData.DedicatedStorageNetworkState
	(EntityDTO_RepositoryData_TerraformData_StateFileLocation_BackendType)(0), // 30: common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.BackendType
	(EntityDTO_VirtualVolumeData_UsageType)(0),                                // 31: common_dto.EntityDTO.VirtualVolumeData.UsageType
	(EntityDTO_VirtualVolumeData_StorageCompatibilityType)(0),                 // 32: common_dto.EntityDTO.VirtualVolumeData.StorageCompatibilityType
	(EntityDTO_VirtualVolumeData_AttachmentState)(0),                          // 33: common_dto.EntityDTO.VirtualVolumeData.AttachmentState
	(EntityDTO_VirtualVolumeData_AzureDiskRole)(0),                            // 34: common_dto.EntityDTO.VirtualVolumeData.AzureDiskRole
	(EntityDTO_VirtualVolumeData_RedundancyType)(0),                           // 35: common_dto.EntityDTO.VirtualVolumeData.RedundancyType
	(EntityDTO_VirtualVolumeData_VolumeEncryptionType)(0),                     // 36: common_dto.EntityDTO.VirtualVolumeData.VolumeEncryptionType
	(EntityDTO_VirtualMachineData_VMBillingType)(0),                           // 37: common_dto.EntityDTO.VirtualMachineData.VMBillingType
	(EntityDTO_NetworkData_VSwitchType)(0),                                    // 38: common_dto.EntityDTO.NetworkData.VSwitchType
	(EntityDTO_DesktopPoolData_DesktopPoolProvisionType)(0),                   // 39: common_dto.EntityDTO.DesktopPoolData.DesktopPoolProvisionType
	(EntityDTO_DesktopPoolData_DesktopPoolCloneType)(0),                       // 40: common_dto.EntityDTO.DesktopPoolData.DesktopPoolCloneType
	(EntityDTO_DesktopPoolData_DesktopPoolAssignmentType)(0),                  // 41: common_dto.EntityDTO.DesktopPoolData.DesktopPoolAssignmentType
	(EntityDTO_ReservedInstanceData_InstanceTenancy)(0),                       // 42: common_dto.EntityDTO.ReservedInstanceData.InstanceTenancy
	(EntityDTO_ReservedInstanceData_OfferingClass)(0),                         // 43: common_dto.EntityDTO.ReservedInstanceData.OfferingClass
	(EntityDTO_ReservedInstanceData_OfferingType)(0),                          // 44: common_dto.EntityDTO.ReservedInstanceData.OfferingType
	(EntityDTO_ReservedInstanceData_Platform)(0),                              // 45: common_dto.EntityDTO.ReservedInstanceData.Platform
	(EntityDTO_CloudCommitmentData_ProviderType)(0),                           // 46: common_dto.EntityDTO.CloudCommitmentData.ProviderType
	(EntityDTO_CloudCommitmentData_CloudCommitmentScope)(0),                   // 47: common_dto.EntityDTO.CloudCommitmentData.CloudCommitmentScope
	(EntityDTO_CloudCommitmentData_CloudCommitmentStatus)(0),                  // 48: common_dto.EntityDTO.CloudCommitmentData.CloudCommitmentStatus
	(EntityDTO_CloudCommitmentData_CommitmentPricingInfo_OfferingClass)(0),    // 49: common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo.OfferingClass
	(ConnectedEntity_ConnectionType)(0),                                       // 50: common_dto.ConnectedEntity.ConnectionType
	(PricingIdentifier_PricingIdentifierName)(0),                              // 51: common_dto.PricingIdentifier.PricingIdentifierName
	(CommodityDTO_CommodityType)(0),                                           // 52: common_dto.CommodityDTO.CommodityType
	(GroupDTO_GroupType)(0),                                                   // 53: common_dto.GroupDTO.GroupType
	(GroupDTO_ConstraintType)(0),                                              // 54: common_dto.GroupDTO.ConstraintType
	(GroupDTO_Setting_SettingType)(0),                                         // 55: common_dto.GroupDTO.Setting.SettingType
	(GroupDTO_SelectionSpec_ExpressionType)(0),                                // 56: common_dto.GroupDTO.SelectionSpec.ExpressionType
	(NotificationDTO_Severity)(0),                                             // 57: common_dto.NotificationDTO.Severity
	(CustomTypeDef_MetadataNamespace)(0),                                      // 58: common_dto.CustomTypeDef.MetadataNamespace
	(FlowDTO_Protocol)(0),                                                     // 59: common_dto.FlowDTO.Protocol
	(ExternalTag_TagType)(0),                                                  // 60: common_dto.ExternalTag.TagType
	(*EntityDTO)(nil),                                                         // 61: common_dto.EntityDTO
	(*ConnectedEntity)(nil),                                                   // 62: common_dto.ConnectedEntity
	(*PricingIdentifier)(nil),                                                 // 63: common_dto.PricingIdentifier
	(*CommodityDTO)(nil),                                                      // 64: common_dto.CommodityDTO
	(*VStoragePartitionData)(nil),                                             // 65: common_dto.VStoragePartitionData
	(*GroupDTO)(nil),                                                          // 66: common_dto.GroupDTO
	(*ContextData)(nil),                                                       // 67: common_dto.ContextData
	(*NotificationDTO)(nil),                                                   // 68: common_dto.NotificationDTO
	(*CustomTypeDef)(nil),                                                     // 69: common_dto.CustomTypeDef
	(*ServerEntityPropDef)(nil),                                               // 70: common_dto.ServerEntityPropDef
	(*PropertyHandler)(nil),                                                   // 71: common_dto.PropertyHandler
	(*EntityIdentityData)(nil),                                                // 72: common_dto.EntityIdentityData
	(*FlowDTO)(nil),                                                           // 73: common_dto.FlowDTO
	(*GeoData)(nil),                                                           // 74: common_dto.GeoData
	(*CommodityCapacityLimit)(nil),                                            // 75: common_dto.CommodityCapacityLimit
	(*EntityIdentifyingPropertyValues)(nil),                                   // 76: common_dto.EntityIdentifyingPropertyValues
	(*ExternalTag)(nil),                                                       // 77: common_dto.ExternalTag
	(*ExternalResourceInfo)(nil),                                              // 78: common_dto.ExternalResourceInfo
	(*EntityDTO_EntityDetail)(nil),                                            // 79: common_dto.EntityDTO.EntityDetail
	(*EntityDTO_CommodityBought)(nil),                                         // 80: common_dto.EntityDTO.CommodityBought
	(*EntityDTO_ActionEligibility)(nil),                                       // 81: common_dto.EntityDTO.ActionEligibility
	(*EntityDTO_ActionOnProviderEligibility)(nil),                             // 82: common_dto.EntityDTO.ActionOnProviderEligibility
	(*EntityDTO_SubDivisionData)(nil),                                         // 83: common_dto.EntityDTO.SubDivisionData
	(*EntityDTO_StorageData)(nil),                                             // 84: common_dto.EntityDTO.StorageData
	(*EntityDTO_StorageTierData)(nil),                                         // 85: common_dto.EntityDTO.StorageTierData
	(*EntityDTO_CapacityOptionData)(nil),                                      // 86: common_dto.EntityDTO.CapacityOptionData
	(*EntityDTO_BusinessUserData)(nil),                                        // 87: common_dto.EntityDTO.BusinessUserData
	(*EntityDTO_RegionData)(nil),                                              // 88: common_dto.EntityDTO.RegionData
	(*EntityDTO_SessionData)(nil),                                             // 89: common_dto.EntityDTO.SessionData
	(*EntityDTO_DiskArrayData)(nil),                                           // 90: common_dto.EntityDTO.DiskArrayData
	(*EntityDTO_LogicalPoolData)(nil),                                         // 91: common_dto.EntityDTO.LogicalPoolData
	(*EntityDTO_ApplicationData)(nil),                                         // 92: common_dto.EntityDTO.ApplicationData
	(*EntityDTO_ApplicationServiceData)(nil),                                  // 93: common_dto.EntityDTO.ApplicationServiceData
	(*EntityDTO_VirtualMachineSpecData)(nil),                                  // 94: common_dto.EntityDTO.VirtualMachineSpecData
	(*EntityDTO_VirtualApplicationData)(nil),                                  // 95: common_dto.EntityDTO.VirtualApplicationData
	(*EntityDTO_ServiceData)(nil),                                             // 96: common_dto.EntityDTO.ServiceData
	(*EntityDTO_KubernetesServiceData)(nil),                                   // 97: common_dto.EntityDTO.KubernetesServiceData
	(*EntityDTO_BusinessAccountData)(nil),                                     // 98: common_dto.EntityDTO.BusinessAccountData
	(*EntityDTO_ComputeTierData)(nil),                                         // 99: common_dto.EntityDTO.ComputeTierData
	(*EntityDTO_DataWarehouseTierData)(nil),                                   // 100: common_dto.EntityDTO.DataWarehouseTierData
	(*EntityDTO_RepositoryData)(nil),                                          // 101: common_dto.EntityDTO.RepositoryData
	(*EntityDTO_GpuInfo)(nil),                                                 // 102: common_dto.EntityDTO.GpuInfo
	(*EntityDTO_PCIPassthroughGpuInfo)(nil),                                   // 103: common_dto.EntityDTO.PCIPassthroughGpuInfo
	(*EntityDTO_AcceleratorCardInfo)(nil),                                     // 104: common_dto.EntityDTO.AcceleratorCardInfo
	(*EntityDTO_VirtualVolumeData)(nil),                                       // 105: common_dto.EntityDTO.VirtualVolumeData
	(*EntityDTO_VirtualMachineData)(nil),                                      // 106: common_dto.EntityDTO.VirtualMachineData
	(*EntityDTO_InfrastructureAsCodeData)(nil),                                // 107: common_dto.EntityDTO.InfrastructureAsCodeData
	(*EntityDTO_DatabaseData)(nil),                                            // 108: common_dto.EntityDTO.DatabaseData
	(*EntityDTO_DatabaseReplica)(nil),                                         // 109: common_dto.EntityDTO.DatabaseReplica
	(*EntityDTO_DatabaseTierData)(nil),                                        // 110: common_dto.EntityDTO.DatabaseTierData
	(*EntityDTO_DatabaseServerTierData)(nil),                                  // 111: common_dto.EntityDTO.DatabaseServerTierData
	(*EntityDTO_StorageControllerData)(nil),                                   // 112: common_dto.EntityDTO.StorageControllerData
	(*EntityDTO_ContainerPodData)(nil),                                        // 113: common_dto.EntityDTO.ContainerPodData
	(*EntityDTO_ContainerData)(nil),                                           // 114: common_dto.EntityDTO.ContainerData
	(*EntityDTO_ContainerSpecData)(nil),                                       // 115: common_dto.EntityDTO.ContainerSpecData
	(*EntityDTO_NetworkData)(nil),                                             // 116: common_dto.EntityDTO.NetworkData
	(*EntityDTO_WorkloadControllerData)(nil),                                  // 117: common_dto.EntityDTO.WorkloadControllerData
	(*EntityDTO_CronJobData)(nil),                                             // 118: common_dto.EntityDTO.CronJobData
	(*EntityDTO_CustomControllerData)(nil),                                    // 119: common_dto.EntityDTO.CustomControllerData
	(*EntityDTO_DaemonSetData)(nil),                                           // 120: common_dto.EntityDTO.DaemonSetData
	(*EntityDTO_DeploymentData)(nil),                                          // 121: common_dto.EntityDTO.DeploymentData
	(*EntityDTO_JobData)(nil),                                                 // 122: common_dto.EntityDTO.JobData
	(*EntityDTO_ReplicaSetData)(nil),                                          // 123: common_dto.EntityDTO.ReplicaSetData
	(*EntityDTO_ReplicationControllerData)(nil),                               // 124: common_dto.EntityDTO.ReplicationControllerData
	(*EntityDTO_StatefulSetData)(nil),                                         // 125: common_dto.EntityDTO.StatefulSetData
	(*EntityDTO_NamespaceData)(nil),                                           // 126: common_dto.EntityDTO.NamespaceData
	(*EntityDTO_ContainerPlatformClusterData)(nil),                            // 127: common_dto.EntityDTO.ContainerPlatformClusterData
	(*EntityDTO_VMState)(nil),                                                 // 128: common_dto.EntityDTO.VMState
	(*EntityDTO_PhysicalMachineData)(nil),                                     // 129: common_dto.EntityDTO.PhysicalMachineData
	(*EntityDTO_PMState)(nil),                                                 // 130: common_dto.EntityDTO.PMState
	(*EntityDTO_VirtualDatacenterTypeProps)(nil),                              // 131: common_dto.EntityDTO.VirtualDatacenterTypeProps
	(*EntityDTO_VirtualDatacenterData)(nil),                                   // 132: common_dto.EntityDTO.VirtualDatacenterData
	(*EntityDTO_DesktopPoolData)(nil),                                         // 133: common_dto.EntityDTO.DesktopPoolData
	(*EntityDTO_EntityProperty)(nil),                                          // 134: common_dto.EntityDTO.EntityProperty
	(*EntityDTO_VirtualMachineRelatedData)(nil),                               // 135: common_dto.EntityDTO.VirtualMachineRelatedData
	(*EntityDTO_PhysicalMachineRelatedData)(nil),                              // 136: common_dto.EntityDTO.PhysicalMachineRelatedData
	(*EntityDTO_StorageControllerRelatedData)(nil),                            // 137: common_dto.EntityDTO.StorageControllerRelatedData
	(*EntityDTO_MemoryData)(nil),                                              // 138: common_dto.EntityDTO.MemoryData
	(*EntityDTO_ProcessorData)(nil),                                           // 139: common_dto.EntityDTO.ProcessorData
	(*EntityDTO_IoData)(nil),                                                  // 140: common_dto.EntityDTO.IoData
	(*EntityDTO_DiskGroupData)(nil),                                           // 141: common_dto.EntityDTO.DiskGroupData
	(*EntityDTO_DiskData)(nil),                                                // 142: common_dto.EntityDTO.DiskData
	(*EntityDTO_ComputeIopsData)(nil),                                         // 143: common_dto.EntityDTO.ComputeIopsData
	(*EntityDTO_IopsItemData)(nil),                                            // 144: common_dto.EntityDTO.IopsItemData
	(*EntityDTO_ReplacementEntityMetaData)(nil),                               // 145: common_dto.EntityDTO.ReplacementEntityMetaData
	(*EntityDTO_FieldReplacement)(nil),                                        // 146: common_dto.EntityDTO.FieldReplacement
	(*EntityDTO_ReplacementCommodityPropertyData)(nil),                        // 147: common_dto.EntityDTO.ReplacementCommodityPropertyData
	(*EntityDTO_ConsumerPolicy)(nil),                                          // 148: common_dto.EntityDTO.ConsumerPolicy
	(*EntityDTO_ProviderPolicy)(nil),                                          // 149: common_dto.EntityDTO.ProviderPolicy
	(*EntityDTO_ProcessorPoolData)(nil),                                       // 150: common_dto.EntityDTO.ProcessorPoolData
	(*EntityDTO_ReservedInstanceData)(nil),                                    // 151: common_dto.EntityDTO.ReservedInstanceData
	(*EntityDTO_CloudCommitmentData)(nil),                                     // 152: common_dto.EntityDTO.CloudCommitmentData
	(*EntityDTO_StorageData_StoragePolicy)(nil),                               // 153: common_dto.EntityDTO.StorageData.StoragePolicy
	(*EntityDTO_StorageData_RawCapacity)(nil),                                 // 154: common_dto.EntityDTO.StorageData.RawCapacity
	(*EntityDTO_CapacityOptionData_CapacityOption)(nil),                       // 155: common_dto.EntityDTO.CapacityOptionData.CapacityOption
	(*EntityDTO_ComputeTierData_ScalingPenalty)(nil),                          // 156: common_dto.EntityDTO.ComputeTierData.ScalingPenalty
	(*EntityDTO_RepositoryData_TerraformData)(nil),                            // 157: common_dto.EntityDTO.RepositoryData.TerraformData
	(*EntityDTO_RepositoryData_TerraformData_StateFileLocation)(nil),          // 158: common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation
	(*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config)(nil), // 159: common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.S3Config
	(*EntityDTO_VirtualVolumeData_VirtualVolumeFileDescriptor)(nil),           // 160: common_dto.EntityDTO.VirtualVolumeData.VirtualVolumeFileDescriptor
	(*EntityDTO_VirtualMachineData_AnnotationNote)(nil),                       // 161: common_dto.EntityDTO.VirtualMachineData.AnnotationNote
	nil, // 162: common_dto.EntityDTO.VirtualMachineData.DiskToStorageEntry
	(*EntityDTO_VirtualMachineData_AgentSoftwareProperties)(nil),                                              // 163: common_dto.EntityDTO.VirtualMachineData.AgentSoftwareProperties
	(*EntityDTO_FieldReplacement_FieldPath)(nil),                                                              // 164: common_dto.EntityDTO.FieldReplacement.FieldPath
	(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope)(nil),                                       // 165: common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope
	(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope)(nil),           // 166: common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.SharedReservedInstanceScope
	(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope)(nil), // 167: common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.MultipleAccountsReservedInstanceScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo)(nil),                                                 // 168: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo
	(*EntityDTO_CloudCommitmentData_CommitmentPricingInfo)(nil),                                               // 169: common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo
	(*EntityDTO_CloudCommitmentData_ServiceRestricted)(nil),                                                   // 170: common_dto.EntityDTO.CloudCommitmentData.ServiceRestricted
	(*EntityDTO_CloudCommitmentData_FamilyRestricted)(nil),                                                    // 171: common_dto.EntityDTO.CloudCommitmentData.FamilyRestricted
	(*EntityDTO_CloudCommitmentData_CommittedCommoditiesBought)(nil),                                          // 172: common_dto.EntityDTO.CloudCommitmentData.CommittedCommoditiesBought
	(*EntityDTO_CloudCommitmentData_CommittedCommodityBought)(nil),                                            // 173: common_dto.EntityDTO.CloudCommitmentData.CommittedCommodityBought
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_BilledCostScope)(nil),                                 // 174: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.BilledCostScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope)(nil),                                   // 175: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope)(nil),                                    // 176: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope)(nil),                       // 177: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.GlobalScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope)(nil),                 // 178: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.TierSpecificScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope)(nil),                       // 179: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.FamilyScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo)(nil),                   // 180: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.ComputeTierInfo
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo)(nil),            // 181: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseServerTierInfo
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo)(nil),                  // 182: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseTierInfo
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope)(nil),                         // 183: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.GroupScope
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope)(nil),                        // 184: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.EntityScope
	(*CommodityDTO_RangeDependency)(nil),                                                                      // 185: common_dto.CommodityDTO.RangeDependency
	(*CommodityDTO_RangeTuple)(nil),                                                                           // 186: common_dto.CommodityDTO.RangeTuple
	(*CommodityDTO_RatioDependency)(nil),                                                                      // 187: common_dto.CommodityDTO.RatioDependency
	(*CommodityDTO_PropertiesList)(nil),                                                                       // 188: common_dto.CommodityDTO.PropertiesList
	(*CommodityDTO_DecayingAverageWeightFactor)(nil),                                                          // 189: common_dto.CommodityDTO.DecayingAverageWeightFactor
	(*CommodityDTO_StorageLatencyData)(nil),                                                                   // 190: common_dto.CommodityDTO.StorageLatencyData
	(*CommodityDTO_StorageAccessData)(nil),                                                                    // 191: common_dto.CommodityDTO.StorageAccessData
	(*CommodityDTO_StorageProvisionedData)(nil),                                                               // 192: common_dto.CommodityDTO.StorageProvisionedData
	(*CommodityDTO_GpuMemData)(nil),                                                                           // 193: common_dto.CommodityDTO.GpuMemData
	(*CommodityDTO_GpuData)(nil),                                                                              // 194: common_dto.CommodityDTO.GpuData
	(*CommodityDTO_VMemData)(nil),                                                                             // 195: common_dto.CommodityDTO.VMemData
	(*CommodityDTO_VCpuData)(nil),                                                                             // 196: common_dto.CommodityDTO.VCpuData
	(*CommodityDTO_PricingMetadata)(nil),                                                                      // 197: common_dto.CommodityDTO.PricingMetadata
	(*CommodityDTO_UtilizationData)(nil),                                                                      // 198: common_dto.CommodityDTO.UtilizationData
	(*GroupDTO_TagValues)(nil),                                                                                // 199: common_dto.GroupDTO.TagValues
	nil,                                                                                                       // 200: common_dto.GroupDTO.TagsEntry
	(*GroupDTO_ConstraintInfo)(nil),                                                                           // 201: common_dto.GroupDTO.ConstraintInfo
	(*GroupDTO_SettingPolicy)(nil),                                                                            // 202: common_dto.GroupDTO.SettingPolicy
	(*GroupDTO_SelectionSpecList)(nil),                                                                        // 203: common_dto.GroupDTO.SelectionSpecList
	(*GroupDTO_MembersList)(nil),                                                                              // 204: common_dto.GroupDTO.MembersList
	(*GroupDTO_AddedAndRemovedMembersList)(nil),                                                               // 205: common_dto.GroupDTO.AddedAndRemovedMembersList
	(*GroupDTO_BuyerMetaData)(nil),                                                                            // 206: common_dto.GroupDTO.BuyerMetaData
	(*GroupDTO_Setting)(nil),                                                                                  // 207: common_dto.GroupDTO.Setting
	(*GroupDTO_SelectionSpec)(nil),                                                                            // 208: common_dto.GroupDTO.SelectionSpec
	(*GroupDTO_Setting_NumericSettingValueType)(nil),                                                          // 209: common_dto.GroupDTO.Setting.NumericSettingValueType
	(*GroupDTO_Setting_IntegerSettingValueType)(nil),                                                          // 210: common_dto.GroupDTO.Setting.IntegerSettingValueType
	(*GroupDTO_Setting_StringSettingValueType)(nil),                                                           // 211: common_dto.GroupDTO.Setting.StringSettingValueType
	(*GroupDTO_Setting_BooleanSettingValueType)(nil),                                                          // 212: common_dto.GroupDTO.Setting.BooleanSettingValueType
	(*GroupDTO_SelectionSpec_PropertyStringList)(nil),                                                         // 213: common_dto.GroupDTO.SelectionSpec.PropertyStringList
	(*GroupDTO_SelectionSpec_PropertyDoubleList)(nil),                                                         // 214: common_dto.GroupDTO.SelectionSpec.PropertyDoubleList
	nil,                                 // 215: common_dto.EntityIdentifyingPropertyValues.IdentifyingPropertyValuesEntry
	(*ExternalResourceInfo_TagRef)(nil), // 216: common_dto.ExternalResourceInfo.TagRef
	(*CurrencyAmount)(nil),              // 217: common_dto.CurrencyAmount
	(PaymentOption)(0),                  // 218: common_dto.PaymentOption
}
var file_CommonDTO_proto_depIdxs = []int32{
	1,   // 0: common_dto.EntityDTO.entityType:type_name -> common_dto.EntityDTO.EntityType
	64,  // 1: common_dto.EntityDTO.commoditiesSold:type_name -> common_dto.CommodityDTO
	80,  // 2: common_dto.EntityDTO.commoditiesBought:type_name -> common_dto.EntityDTO.CommodityBought
	134, // 3: common_dto.EntityDTO.entityProperties:type_name -> common_dto.EntityDTO.EntityProperty
	21,  // 4: common_dto.EntityDTO.origin:type_name -> common_dto.EntityDTO.EntityOrigin
	145, // 5: common_dto.EntityDTO.replacementEntityData:type_name -> common_dto.EntityDTO.ReplacementEntityMetaData
	2,   // 6: common_dto.EntityDTO.powerState:type_name -> common_dto.EntityDTO.PowerState
	148, // 7: common_dto.EntityDTO.consumerPolicy:type_name -> common_dto.EntityDTO.ConsumerPolicy
	149, // 8: common_dto.EntityDTO.providerPolicy:type_name -> common_dto.EntityDTO.ProviderPolicy
	68,  // 9: common_dto.EntityDTO.notification:type_name -> common_dto.NotificationDTO
	0,   // 10: common_dto.EntityDTO.updateType:type_name -> common_dto.UpdateType
	81,  // 11: common_dto.EntityDTO.actionEligibility:type_name -> common_dto.EntityDTO.ActionEligibility
	62,  // 12: common_dto.EntityDTO.connectedEntities:type_name -> common_dto.ConnectedEntity
	79,  // 13: common_dto.EntityDTO.details:type_name -> common_dto.EntityDTO.EntityDetail
	84,  // 14: common_dto.EntityDTO.storage_data:type_name -> common_dto.EntityDTO.StorageData
	90,  // 15: common_dto.EntityDTO.disk_array_data:type_name -> common_dto.EntityDTO.DiskArrayData
	92,  // 16: common_dto.EntityDTO.application_data:type_name -> common_dto.EntityDTO.ApplicationData
	106, // 17: common_dto.EntityDTO.virtual_machine_data:type_name -> common_dto.EntityDTO.VirtualMachineData
	129, // 18: common_dto.EntityDTO.physical_machine_data:type_name -> common_dto.EntityDTO.PhysicalMachineData
	132, // 19: common_dto.EntityDTO.virtual_datacenter_data:type_name -> common_dto.EntityDTO.VirtualDatacenterData
	112, // 20: common_dto.EntityDTO.storage_controller_data:type_name -> common_dto.EntityDTO.StorageControllerData
	91,  // 21: common_dto.EntityDTO.logical_pool_data:type_name -> common_dto.EntityDTO.LogicalPoolData
	95,  // 22: common_dto.EntityDTO.virtual_application_data:type_name -> common_dto.EntityDTO.VirtualApplicationData
	150, // 23: common_dto.EntityDTO.processor_pool_data:type_name -> common_dto.EntityDTO.ProcessorPoolData
	151, // 24: common_dto.EntityDTO.reserved_instance_data:type_name -> common_dto.EntityDTO.ReservedInstanceData
	113, // 25: common_dto.EntityDTO.container_pod_data:type_name -> common_dto.EntityDTO.ContainerPodData
	114, // 26: common_dto.EntityDTO.container_data:type_name -> common_dto.EntityDTO.ContainerData
	98,  // 27: common_dto.EntityDTO.business_account_data:type_name -> common_dto.EntityDTO.BusinessAccountData
	99,  // 28: common_dto.EntityDTO.compute_tier_data:type_name -> common_dto.EntityDTO.ComputeTierData
	105, // 29: common_dto.EntityDTO.virtual_volume_data:type_name -> common_dto.EntityDTO.VirtualVolumeData
	87,  // 30: common_dto.EntityDTO.business_user_data:type_name -> common_dto.EntityDTO.BusinessUserData
	88,  // 31: common_dto.EntityDTO.region_data:type_name -> common_dto.EntityDTO.RegionData
	117, // 32: common_dto.EntityDTO.workload_controller_data:type_name -> common_dto.EntityDTO.WorkloadControllerData
	110, // 33: common_dto.EntityDTO.database_tier_data:type_name -> common_dto.EntityDTO.DatabaseTierData
	111, // 34: common_dto.EntityDTO.database_server_tier_data:type_name -> common_dto.EntityDTO.DatabaseServerTierData
	96,  // 35: common_dto.EntityDTO.service_data:type_name -> common_dto.EntityDTO.ServiceData
	152, // 36: common_dto.EntityDTO.cloud_commitment_data:type_name -> common_dto.EntityDTO.CloudCommitmentData
	126, // 37: common_dto.EntityDTO.namespace_data:type_name -> common_dto.EntityDTO.NamespaceData
	127, // 38: common_dto.EntityDTO.container_platform_cluster_data:type_name -> common_dto.EntityDTO.ContainerPlatformClusterData
	93,  // 39: common_dto.EntityDTO.application_service_data:type_name -> common_dto.EntityDTO.ApplicationServiceData
	115, // 40: common_dto.EntityDTO.container_spec_data:type_name -> common_dto.EntityDTO.ContainerSpecData
	116, // 41: common_dto.EntityDTO.network_data:type_name -> common_dto.EntityDTO.NetworkData
	85,  // 42: common_dto.EntityDTO.storage_tier_data:type_name -> common_dto.EntityDTO.StorageTierData
	86,  // 43: common_dto.EntityDTO.capacity_option_data:type_name -> common_dto.EntityDTO.CapacityOptionData
	94,  // 44: common_dto.EntityDTO.virtual_machine_spec_data:type_name -> common_dto.EntityDTO.VirtualMachineSpecData
	100, // 45: common_dto.EntityDTO.data_warehouse_tier_data:type_name -> common_dto.EntityDTO.DataWarehouseTierData
	101, // 46: common_dto.EntityDTO.repository_data:type_name -> common_dto.EntityDTO.RepositoryData
	135, // 47: common_dto.EntityDTO.virtual_machine_related_data:type_name -> common_dto.EntityDTO.VirtualMachineRelatedData
	136, // 48: common_dto.EntityDTO.physical_machine_related_data:type_name -> common_dto.EntityDTO.PhysicalMachineRelatedData
	137, // 49: common_dto.EntityDTO.storage_controller_related_data:type_name -> common_dto.EntityDTO.StorageControllerRelatedData
	50,  // 50: common_dto.ConnectedEntity.connectionType:type_name -> common_dto.ConnectedEntity.ConnectionType
	51,  // 51: common_dto.PricingIdentifier.identifier_name:type_name -> common_dto.PricingIdentifier.PricingIdentifierName
	52,  // 52: common_dto.CommodityDTO.commodityType:type_name -> common_dto.CommodityDTO.CommodityType
	188, // 53: common_dto.CommodityDTO.propMap:type_name -> common_dto.CommodityDTO.PropertiesList
	197, // 54: common_dto.CommodityDTO.pricingMetadata:type_name -> common_dto.CommodityDTO.PricingMetadata
	198, // 55: common_dto.CommodityDTO.utilizationData:type_name -> common_dto.CommodityDTO.UtilizationData
	187, // 56: common_dto.CommodityDTO.ratio_dependency:type_name -> common_dto.CommodityDTO.RatioDependency
	185, // 57: common_dto.CommodityDTO.range_dependency:type_name -> common_dto.CommodityDTO.RangeDependency
	189, // 58: common_dto.CommodityDTO.decaying_average_weight_factor:type_name -> common_dto.CommodityDTO.DecayingAverageWeightFactor
	190, // 59: common_dto.CommodityDTO.storage_latency_data:type_name -> common_dto.CommodityDTO.StorageLatencyData
	191, // 60: common_dto.CommodityDTO.storage_access_data:type_name -> common_dto.CommodityDTO.StorageAccessData
	65,  // 61: common_dto.CommodityDTO.vstorage_partition_data:type_name -> common_dto.VStoragePartitionData
	192, // 62: common_dto.CommodityDTO.storage_provisioned_data:type_name -> common_dto.CommodityDTO.StorageProvisionedData
	194, // 63: common_dto.CommodityDTO.gpu_data:type_name -> common_dto.CommodityDTO.GpuData
	193, // 64: common_dto.CommodityDTO.gpu_mem_data:type_name -> common_dto.CommodityDTO.GpuMemData
	195, // 65: common_dto.CommodityDTO.vmem_data:type_name -> common_dto.CommodityDTO.VMemData
	196, // 66: common_dto.CommodityDTO.vcpu_data:type_name -> common_dto.CommodityDTO.VCpuData
	1,   // 67: common_dto.GroupDTO.entity_type:type_name -> common_dto.EntityDTO.EntityType
	201, // 68: common_dto.GroupDTO.constraint_info:type_name -> common_dto.GroupDTO.ConstraintInfo
	202, // 69: common_dto.GroupDTO.setting_policy:type_name -> common_dto.GroupDTO.SettingPolicy
	203, // 70: common_dto.GroupDTO.selection_spec_list:type_name -> common_dto.GroupDTO.SelectionSpecList
	204, // 71: common_dto.GroupDTO.member_list:type_name -> common_dto.GroupDTO.MembersList
	205, // 72: common_dto.GroupDTO.added_and_removed_members:type_name -> common_dto.GroupDTO.AddedAndRemovedMembersList
	134, // 73: common_dto.GroupDTO.entityProperties:type_name -> common_dto.EntityDTO.EntityProperty
	0,   // 74: common_dto.GroupDTO.updateType:type_name -> common_dto.UpdateType
	53,  // 75: common_dto.GroupDTO.groupType:type_name -> common_dto.GroupDTO.GroupType
	200, // 76: common_dto.GroupDTO.tags:type_name -> common_dto.GroupDTO.TagsEntry
	57,  // 77: common_dto.NotificationDTO.severity:type_name -> common_dto.NotificationDTO.Severity
	58,  // 78: common_dto.CustomTypeDef.namespace:type_name -> common_dto.CustomTypeDef.MetadataNamespace
	1,   // 79: common_dto.ServerEntityPropDef.entity:type_name -> common_dto.EntityDTO.EntityType
	71,  // 80: common_dto.ServerEntityPropDef.propertyHandler:type_name -> common_dto.PropertyHandler
	1,   // 81: common_dto.PropertyHandler.entityType:type_name -> common_dto.EntityDTO.EntityType
	71,  // 82: common_dto.PropertyHandler.next_handler:type_name -> common_dto.PropertyHandler
	72,  // 83: common_dto.FlowDTO.sourceEntityIdentityData:type_name -> common_dto.EntityIdentityData
	72,  // 84: common_dto.FlowDTO.destEntityIdentityData:type_name -> common_dto.EntityIdentityData
	59,  // 85: common_dto.FlowDTO.protocol:type_name -> common_dto.FlowDTO.Protocol
	1,   // 86: common_dto.EntityIdentifyingPropertyValues.entity_type:type_name -> common_dto.EntityDTO.EntityType
	215, // 87: common_dto.EntityIdentifyingPropertyValues.identifying_property_values:type_name -> common_dto.EntityIdentifyingPropertyValues.IdentifyingPropertyValuesEntry
	60,  // 88: common_dto.ExternalTag.type:type_name -> common_dto.ExternalTag.TagType
	1,   // 89: common_dto.ExternalResourceInfo.entity_type:type_name -> common_dto.EntityDTO.EntityType
	216, // 90: common_dto.ExternalResourceInfo.external_tags:type_name -> common_dto.ExternalResourceInfo.TagRef
	64,  // 91: common_dto.EntityDTO.CommodityBought.bought:type_name -> common_dto.CommodityDTO
	1,   // 92: common_dto.EntityDTO.CommodityBought.providerType:type_name -> common_dto.EntityDTO.EntityType
	83,  // 93: common_dto.EntityDTO.CommodityBought.subDivision:type_name -> common_dto.EntityDTO.SubDivisionData
	82,  // 94: common_dto.EntityDTO.CommodityBought.actionEligibility:type_name -> common_dto.EntityDTO.ActionOnProviderEligibility
	4,   // 95: common_dto.EntityDTO.StorageData.storageType:type_name -> common_dto.EntityDTO.StorageType
	153, // 96: common_dto.EntityDTO.StorageData.policy:type_name -> common_dto.EntityDTO.StorageData.StoragePolicy
	154, // 97: common_dto.EntityDTO.StorageData.rawCapacity:type_name -> common_dto.EntityDTO.StorageData.RawCapacity
	1,   // 98: common_dto.EntityDTO.StorageTierData.supported_consumer_types:type_name -> common_dto.EntityDTO.EntityType
	52,  // 99: common_dto.EntityDTO.CapacityOptionData.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	155, // 100: common_dto.EntityDTO.CapacityOptionData.capacity_option:type_name -> common_dto.EntityDTO.CapacityOptionData.CapacityOption
	89,  // 101: common_dto.EntityDTO.BusinessUserData.sessionData:type_name -> common_dto.EntityDTO.SessionData
	74,  // 102: common_dto.EntityDTO.RegionData.geo_data:type_name -> common_dto.GeoData
	143, // 103: common_dto.EntityDTO.DiskArrayData.iopsComputeData:type_name -> common_dto.EntityDTO.ComputeIopsData
	143, // 104: common_dto.EntityDTO.LogicalPoolData.iopsComputeData:type_name -> common_dto.EntityDTO.ComputeIopsData
	108, // 105: common_dto.EntityDTO.ApplicationData.dbData:type_name -> common_dto.EntityDTO.DatabaseData
	25,  // 106: common_dto.EntityDTO.ApplicationServiceData.platform:type_name -> common_dto.EntityDTO.ApplicationServiceData.Platform
	26,  // 107: common_dto.EntityDTO.ApplicationServiceData.tier:type_name -> common_dto.EntityDTO.ApplicationServiceData.Tier
	97,  // 108: common_dto.EntityDTO.ServiceData.kubernetes_service_data:type_name -> common_dto.EntityDTO.KubernetesServiceData
	27,  // 109: common_dto.EntityDTO.KubernetesServiceData.service_type:type_name -> common_dto.EntityDTO.KubernetesServiceData.ServiceType
	63,  // 110: common_dto.EntityDTO.BusinessAccountData.pricing_identifiers:type_name -> common_dto.PricingIdentifier
	63,  // 111: common_dto.EntityDTO.BusinessAccountData.price_table_keys:type_name -> common_dto.PricingIdentifier
	28,  // 112: common_dto.EntityDTO.BusinessAccountData.account_type:type_name -> common_dto.EntityDTO.BusinessAccountData.AccountType
	29,  // 113: common_dto.EntityDTO.ComputeTierData.dedicated_storage_network_state:type_name -> common_dto.EntityDTO.ComputeTierData.DedicatedStorageNetworkState
	6,   // 114: common_dto.EntityDTO.ComputeTierData.instance_disk_type:type_name -> common_dto.EntityDTO.InstanceDiskType
	156, // 115: common_dto.EntityDTO.ComputeTierData.scale_penalty:type_name -> common_dto.EntityDTO.ComputeTierData.ScalingPenalty
	1,   // 116: common_dto.EntityDTO.ComputeTierData.supported_consumer_types:type_name -> common_dto.EntityDTO.EntityType
	102, // 117: common_dto.EntityDTO.ComputeTierData.gpuInfo:type_name -> common_dto.EntityDTO.GpuInfo
	104, // 118: common_dto.EntityDTO.ComputeTierData.accelerator_card:type_name -> common_dto.EntityDTO.AcceleratorCardInfo
	157, // 119: common_dto.EntityDTO.RepositoryData.terraform_data:type_name -> common_dto.EntityDTO.RepositoryData.TerraformData
	10,  // 120: common_dto.EntityDTO.GpuInfo.model:type_name -> common_dto.EntityDTO.GpuModel
	8,   // 121: common_dto.EntityDTO.AcceleratorCardInfo.family:type_name -> common_dto.EntityDTO.AcceleratorFamily
	9,   // 122: common_dto.EntityDTO.AcceleratorCardInfo.model:type_name -> common_dto.EntityDTO.AcceleratorModel
	35,  // 123: common_dto.EntityDTO.VirtualVolumeData.redundancy_type:type_name -> common_dto.EntityDTO.VirtualVolumeData.RedundancyType
	160, // 124: common_dto.EntityDTO.VirtualVolumeData.file:type_name -> common_dto.EntityDTO.VirtualVolumeData.VirtualVolumeFileDescriptor
	33,  // 125: common_dto.EntityDTO.VirtualVolumeData.attachment_state:type_name -> common_dto.EntityDTO.VirtualVolumeData.AttachmentState
	32,  // 126: common_dto.EntityDTO.VirtualVolumeData.storage_compatibility_for_consumer:type_name -> common_dto.EntityDTO.VirtualVolumeData.StorageCompatibilityType
	31,  // 127: common_dto.EntityDTO.VirtualVolumeData.usage_type:type_name -> common_dto.EntityDTO.VirtualVolumeData.UsageType
	128, // 128: common_dto.EntityDTO.VirtualMachineData.vmState:type_name -> common_dto.EntityDTO.VMState
	161, // 129: common_dto.EntityDTO.VirtualMachineData.annotationNote:type_name -> common_dto.EntityDTO.VirtualMachineData.AnnotationNote
	37,  // 130: common_dto.EntityDTO.VirtualMachineData.billingType:type_name -> common_dto.EntityDTO.VirtualMachineData.VMBillingType
	162, // 131: common_dto.EntityDTO.VirtualMachineData.diskToStorage:type_name -> common_dto.EntityDTO.VirtualMachineData.DiskToStorageEntry
	11,  // 132: common_dto.EntityDTO.VirtualMachineData.licenseModel:type_name -> common_dto.EntityDTO.LicenseModel
	163, // 133: common_dto.EntityDTO.VirtualMachineData.agentSoftwareProperties:type_name -> common_dto.EntityDTO.VirtualMachineData.AgentSoftwareProperties
	102, // 134: common_dto.EntityDTO.VirtualMachineData.gpuInfo:type_name -> common_dto.EntityDTO.GpuInfo
	103, // 135: common_dto.EntityDTO.VirtualMachineData.pciPassthroughGpuInfo:type_name -> common_dto.EntityDTO.PCIPassthroughGpuInfo
	104, // 136: common_dto.EntityDTO.VirtualMachineData.accelerator_card:type_name -> common_dto.EntityDTO.AcceleratorCardInfo
	107, // 137: common_dto.EntityDTO.VirtualMachineData.infrastructureAsCodeData:type_name -> common_dto.EntityDTO.InfrastructureAsCodeData
	158, // 138: common_dto.EntityDTO.InfrastructureAsCodeData.terraformStateFileLocation:type_name -> common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation
	75,  // 139: common_dto.EntityDTO.DatabaseData.lower_bound_scale_up:type_name -> common_dto.CommodityCapacityLimit
	109, // 140: common_dto.EntityDTO.DatabaseData.replicas:type_name -> common_dto.EntityDTO.DatabaseReplica
	12,  // 141: common_dto.EntityDTO.DatabaseReplica.cluster_role:type_name -> common_dto.EntityDTO.ClusterRole
	13,  // 142: common_dto.EntityDTO.DatabaseReplica.deployment_type:type_name -> common_dto.EntityDTO.DeploymentType
	143, // 143: common_dto.EntityDTO.StorageControllerData.iopsComputeData:type_name -> common_dto.EntityDTO.ComputeIopsData
	117, // 144: common_dto.EntityDTO.ContainerPodData.controllerData:type_name -> common_dto.EntityDTO.WorkloadControllerData
	14,  // 145: common_dto.EntityDTO.ContainerSpecData.cpuThrottlingType:type_name -> common_dto.EntityDTO.CPUThrottlingType
	38,  // 146: common_dto.EntityDTO.NetworkData.vSwitchType:type_name -> common_dto.EntityDTO.NetworkData.VSwitchType
	118, // 147: common_dto.EntityDTO.WorkloadControllerData.cron_job_data:type_name -> common_dto.EntityDTO.CronJobData
	119, // 148: common_dto.EntityDTO.WorkloadControllerData.custom_controller_data:type_name -> common_dto.EntityDTO.CustomControllerData
	120, // 149: common_dto.EntityDTO.WorkloadControllerData.daemon_set_data:type_name -> common_dto.EntityDTO.DaemonSetData
	121, // 150: common_dto.EntityDTO.WorkloadControllerData.deployment_data:type_name -> common_dto.EntityDTO.DeploymentData
	122, // 151: common_dto.EntityDTO.WorkloadControllerData.job_data:type_name -> common_dto.EntityDTO.JobData
	123, // 152: common_dto.EntityDTO.WorkloadControllerData.replica_set_data:type_name -> common_dto.EntityDTO.ReplicaSetData
	124, // 153: common_dto.EntityDTO.WorkloadControllerData.replication_controller_data:type_name -> common_dto.EntityDTO.ReplicationControllerData
	125, // 154: common_dto.EntityDTO.WorkloadControllerData.stateful_set_data:type_name -> common_dto.EntityDTO.StatefulSetData
	15,  // 155: common_dto.EntityDTO.ContainerPlatformClusterData.vcpuUnit:type_name -> common_dto.EntityDTO.VcpuCommodityUnit
	130, // 156: common_dto.EntityDTO.PhysicalMachineData.pmState:type_name -> common_dto.EntityDTO.PMState
	141, // 157: common_dto.EntityDTO.PhysicalMachineData.diskGroup:type_name -> common_dto.EntityDTO.DiskGroupData
	16,  // 158: common_dto.EntityDTO.PhysicalMachineData.automationLevel:type_name -> common_dto.EntityDTO.AutomationLevel
	17,  // 159: common_dto.EntityDTO.VirtualDatacenterTypeProps.role:type_name -> common_dto.EntityDTO.VirtualDatacenterRole
	131, // 160: common_dto.EntityDTO.VirtualDatacenterData.vdc_type_props:type_name -> common_dto.EntityDTO.VirtualDatacenterTypeProps
	18,  // 161: common_dto.EntityDTO.VirtualDatacenterData.vdc_allocation_model:type_name -> common_dto.EntityDTO.VirtualDatacenterAllocationModel
	133, // 162: common_dto.EntityDTO.VirtualDatacenterData.desktopPoolData:type_name -> common_dto.EntityDTO.DesktopPoolData
	39,  // 163: common_dto.EntityDTO.DesktopPoolData.provisionType:type_name -> common_dto.EntityDTO.DesktopPoolData.DesktopPoolProvisionType
	40,  // 164: common_dto.EntityDTO.DesktopPoolData.cloneType:type_name -> common_dto.EntityDTO.DesktopPoolData.DesktopPoolCloneType
	41,  // 165: common_dto.EntityDTO.DesktopPoolData.assignmentType:type_name -> common_dto.EntityDTO.DesktopPoolData.DesktopPoolAssignmentType
	138, // 166: common_dto.EntityDTO.VirtualMachineRelatedData.memory:type_name -> common_dto.EntityDTO.MemoryData
	139, // 167: common_dto.EntityDTO.VirtualMachineRelatedData.processor:type_name -> common_dto.EntityDTO.ProcessorData
	140, // 168: common_dto.EntityDTO.VirtualMachineRelatedData.io:type_name -> common_dto.EntityDTO.IoData
	138, // 169: common_dto.EntityDTO.PhysicalMachineRelatedData.memory:type_name -> common_dto.EntityDTO.MemoryData
	139, // 170: common_dto.EntityDTO.PhysicalMachineRelatedData.processor:type_name -> common_dto.EntityDTO.ProcessorData
	140, // 171: common_dto.EntityDTO.PhysicalMachineRelatedData.io:type_name -> common_dto.EntityDTO.IoData
	138, // 172: common_dto.EntityDTO.StorageControllerRelatedData.memory:type_name -> common_dto.EntityDTO.MemoryData
	139, // 173: common_dto.EntityDTO.StorageControllerRelatedData.processor:type_name -> common_dto.EntityDTO.ProcessorData
	142, // 174: common_dto.EntityDTO.DiskGroupData.disk:type_name -> common_dto.EntityDTO.DiskData
	19,  // 175: common_dto.EntityDTO.DiskData.role:type_name -> common_dto.EntityDTO.DiskRole
	144, // 176: common_dto.EntityDTO.ComputeIopsData.iopsItems:type_name -> common_dto.EntityDTO.IopsItemData
	146, // 177: common_dto.EntityDTO.ReplacementEntityMetaData.replacementFields:type_name -> common_dto.EntityDTO.FieldReplacement
	147, // 178: common_dto.EntityDTO.ReplacementEntityMetaData.buyingCommTypes:type_name -> common_dto.EntityDTO.ReplacementCommodityPropertyData
	147, // 179: common_dto.EntityDTO.ReplacementEntityMetaData.sellingCommTypes:type_name -> common_dto.EntityDTO.ReplacementCommodityPropertyData
	70,  // 180: common_dto.EntityDTO.ReplacementEntityMetaData.extEntityPropDef:type_name -> common_dto.ServerEntityPropDef
	164, // 181: common_dto.EntityDTO.FieldReplacement.path:type_name -> common_dto.EntityDTO.FieldReplacement.FieldPath
	52,  // 182: common_dto.EntityDTO.ReplacementCommodityPropertyData.commodityType:type_name -> common_dto.CommodityDTO.CommodityType
	42,  // 183: common_dto.EntityDTO.ReservedInstanceData.instanceTenancy:type_name -> common_dto.EntityDTO.ReservedInstanceData.InstanceTenancy
	43,  // 184: common_dto.EntityDTO.ReservedInstanceData.offeringClass:type_name -> common_dto.EntityDTO.ReservedInstanceData.OfferingClass
	44,  // 185: common_dto.EntityDTO.ReservedInstanceData.offeringType:type_name -> common_dto.EntityDTO.ReservedInstanceData.OfferingType
	45,  // 186: common_dto.EntityDTO.ReservedInstanceData.platform:type_name -> common_dto.EntityDTO.ReservedInstanceData.Platform
	165, // 187: common_dto.EntityDTO.ReservedInstanceData.applied_scope:type_name -> common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope
	170, // 188: common_dto.EntityDTO.CloudCommitmentData.service_restricted:type_name -> common_dto.EntityDTO.CloudCommitmentData.ServiceRestricted
	171, // 189: common_dto.EntityDTO.CloudCommitmentData.family_restricted:type_name -> common_dto.EntityDTO.CloudCommitmentData.FamilyRestricted
	217, // 190: common_dto.EntityDTO.CloudCommitmentData.spend:type_name -> common_dto.CurrencyAmount
	172, // 191: common_dto.EntityDTO.CloudCommitmentData.commodities_bought:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommittedCommoditiesBought
	218, // 192: common_dto.EntityDTO.CloudCommitmentData.payment:type_name -> common_dto.PaymentOption
	46,  // 193: common_dto.EntityDTO.CloudCommitmentData.provider_specific_type:type_name -> common_dto.EntityDTO.CloudCommitmentData.ProviderType
	48,  // 194: common_dto.EntityDTO.CloudCommitmentData.commitment_status:type_name -> common_dto.EntityDTO.CloudCommitmentData.CloudCommitmentStatus
	47,  // 195: common_dto.EntityDTO.CloudCommitmentData.commitment_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CloudCommitmentScope
	168, // 196: common_dto.EntityDTO.CloudCommitmentData.commitment_scope_info:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo
	169, // 197: common_dto.EntityDTO.CloudCommitmentData.commitment_pricing_info:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo
	3,   // 198: common_dto.EntityDTO.StorageData.StoragePolicy.redundancy:type_name -> common_dto.EntityDTO.StorageRedundancyMethod
	7,   // 199: common_dto.EntityDTO.ComputeTierData.ScalingPenalty.reason:type_name -> common_dto.EntityDTO.ScalingPenaltyReason
	7,   // 200: common_dto.EntityDTO.ComputeTierData.ScalingPenalty.reasons:type_name -> common_dto.EntityDTO.ScalingPenaltyReason
	158, // 201: common_dto.EntityDTO.RepositoryData.TerraformData.state_file_location:type_name -> common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation
	30,  // 202: common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.backend_type:type_name -> common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.BackendType
	159, // 203: common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.s3_config:type_name -> common_dto.EntityDTO.RepositoryData.TerraformData.StateFileLocation.S3Config
	5,   // 204: common_dto.EntityDTO.VirtualVolumeData.VirtualVolumeFileDescriptor.type:type_name -> common_dto.EntityDTO.VirtualMachineFileType
	164, // 205: common_dto.EntityDTO.FieldReplacement.FieldPath.next:type_name -> common_dto.EntityDTO.FieldReplacement.FieldPath
	166, // 206: common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.shared_reserved_instance_scope:type_name -> common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.SharedReservedInstanceScope
	167, // 207: common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.multiple_accounts_reserved_instance_scope:type_name -> common_dto.EntityDTO.ReservedInstanceData.ReservedInstanceAppliedScope.MultipleAccountsReservedInstanceScope
	174, // 208: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.billed_cost_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.BilledCostScope
	175, // 209: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.topology_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope
	176, // 210: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.applied_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope
	49,  // 211: common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo.offering_class:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo.OfferingClass
	218, // 212: common_dto.EntityDTO.CloudCommitmentData.CommitmentPricingInfo.payment_option:type_name -> common_dto.PaymentOption
	173, // 213: common_dto.EntityDTO.CloudCommitmentData.CommittedCommoditiesBought.commodity:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommittedCommodityBought
	52,  // 214: common_dto.EntityDTO.CloudCommitmentData.CommittedCommodityBought.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	1,   // 215: common_dto.EntityDTO.CloudCommitmentData.CommittedCommodityBought.provider_type:type_name -> common_dto.EntityDTO.EntityType
	24,  // 216: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.instance_tenancy:type_name -> common_dto.EntityDTO.InstanceTenancy
	177, // 217: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.global_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.GlobalScope
	179, // 218: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.family_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.FamilyScope
	178, // 219: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.tier_specific_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.TierSpecificScope
	180, // 220: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.compute_tier_info:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.ComputeTierInfo
	181, // 221: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.database_server_tier_info:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseServerTierInfo
	182, // 222: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.database_tier_info:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseTierInfo
	183, // 223: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.group_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.GroupScope
	184, // 224: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.entity_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.EntityScope
	22,  // 225: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.ComputeTierInfo.os_type:type_name -> common_dto.EntityDTO.OSType
	23,  // 226: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseServerTierInfo.database_engine:type_name -> common_dto.EntityDTO.DatabaseEngine
	13,  // 227: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseServerTierInfo.deployment_type:type_name -> common_dto.EntityDTO.DeploymentType
	11,  // 228: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope.DatabaseServerTierInfo.license_model:type_name -> common_dto.EntityDTO.LicenseModel
	53,  // 229: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.GroupScope.group_type:type_name -> common_dto.GroupDTO.GroupType
	1,   // 230: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.AppliedScope.EntityScope.entity_type:type_name -> common_dto.EntityDTO.EntityType
	52,  // 231: common_dto.CommodityDTO.RangeDependency.base_commodity:type_name -> common_dto.CommodityDTO.CommodityType
	186, // 232: common_dto.CommodityDTO.RangeDependency.range_tuple:type_name -> common_dto.CommodityDTO.RangeTuple
	52,  // 233: common_dto.CommodityDTO.RatioDependency.base_commodity:type_name -> common_dto.CommodityDTO.CommodityType
	58,  // 234: common_dto.CommodityDTO.PricingMetadata.pricingHandlerNamespace:type_name -> common_dto.CustomTypeDef.MetadataNamespace
	199, // 235: common_dto.GroupDTO.TagsEntry.value:type_name -> common_dto.GroupDTO.TagValues
	54,  // 236: common_dto.GroupDTO.ConstraintInfo.constraint_type:type_name -> common_dto.GroupDTO.ConstraintType
	206, // 237: common_dto.GroupDTO.ConstraintInfo.buyer_meta_data:type_name -> common_dto.GroupDTO.BuyerMetaData
	207, // 238: common_dto.GroupDTO.SettingPolicy.settings:type_name -> common_dto.GroupDTO.Setting
	208, // 239: common_dto.GroupDTO.SelectionSpecList.selection_spec:type_name -> common_dto.GroupDTO.SelectionSpec
	1,   // 240: common_dto.GroupDTO.BuyerMetaData.seller_type:type_name -> common_dto.EntityDTO.EntityType
	55,  // 241: common_dto.GroupDTO.Setting.type:type_name -> common_dto.GroupDTO.Setting.SettingType
	209, // 242: common_dto.GroupDTO.Setting.numeric_setting_value_type:type_name -> common_dto.GroupDTO.Setting.NumericSettingValueType
	211, // 243: common_dto.GroupDTO.Setting.string_setting_value_type:type_name -> common_dto.GroupDTO.Setting.StringSettingValueType
	212, // 244: common_dto.GroupDTO.Setting.boolean_setting_value_type:type_name -> common_dto.GroupDTO.Setting.BooleanSettingValueType
	210, // 245: common_dto.GroupDTO.Setting.integer_setting_value_type:type_name -> common_dto.GroupDTO.Setting.IntegerSettingValueType
	56,  // 246: common_dto.GroupDTO.SelectionSpec.expression_type:type_name -> common_dto.GroupDTO.SelectionSpec.ExpressionType
	213, // 247: common_dto.GroupDTO.SelectionSpec.property_value_string_list:type_name -> common_dto.GroupDTO.SelectionSpec.PropertyStringList
	214, // 248: common_dto.GroupDTO.SelectionSpec.property_value_double_list:type_name -> common_dto.GroupDTO.SelectionSpec.PropertyDoubleList
	60,  // 249: common_dto.ExternalResourceInfo.TagRef.type:type_name -> common_dto.ExternalTag.TagType
	250, // [250:250] is the sub-list for method output_type
	250, // [250:250] is the sub-list for method input_type
	250, // [250:250] is the sub-list for extension type_name
	250, // [250:250] is the sub-list for extension extendee
	0,   // [0:250] is the sub-list for field type_name
}

func init() { file_CommonDTO_proto_init() }
func file_CommonDTO_proto_init() {
	if File_CommonDTO_proto != nil {
		return
	}
	file_CommonCost_proto_init()
	file_CommonDTO_proto_msgTypes[0].OneofWrappers = []any{
		(*EntityDTO_StorageData_)(nil),
		(*EntityDTO_DiskArrayData_)(nil),
		(*EntityDTO_ApplicationData_)(nil),
		(*EntityDTO_VirtualMachineData_)(nil),
		(*EntityDTO_PhysicalMachineData_)(nil),
		(*EntityDTO_VirtualDatacenterData_)(nil),
		(*EntityDTO_StorageControllerData_)(nil),
		(*EntityDTO_LogicalPoolData_)(nil),
		(*EntityDTO_VirtualApplicationData_)(nil),
		(*EntityDTO_ProcessorPoolData_)(nil),
		(*EntityDTO_ReservedInstanceData_)(nil),
		(*EntityDTO_ContainerPodData_)(nil),
		(*EntityDTO_ContainerData_)(nil),
		(*EntityDTO_BusinessAccountData_)(nil),
		(*EntityDTO_ComputeTierData_)(nil),
		(*EntityDTO_VirtualVolumeData_)(nil),
		(*EntityDTO_BusinessUserData_)(nil),
		(*EntityDTO_RegionData_)(nil),
		(*EntityDTO_WorkloadControllerData_)(nil),
		(*EntityDTO_DatabaseTierData_)(nil),
		(*EntityDTO_DatabaseServerTierData_)(nil),
		(*EntityDTO_ServiceData_)(nil),
		(*EntityDTO_CloudCommitmentData_)(nil),
		(*EntityDTO_NamespaceData_)(nil),
		(*EntityDTO_ContainerPlatformClusterData_)(nil),
		(*EntityDTO_ApplicationServiceData_)(nil),
		(*EntityDTO_ContainerSpecData_)(nil),
		(*EntityDTO_NetworkData_)(nil),
		(*EntityDTO_StorageTierData_)(nil),
		(*EntityDTO_CapacityOptionData_)(nil),
		(*EntityDTO_VirtualMachineSpecData_)(nil),
		(*EntityDTO_DataWarehouseTierData_)(nil),
		(*EntityDTO_RepositoryData_)(nil),
		(*EntityDTO_VirtualMachineRelatedData_)(nil),
		(*EntityDTO_PhysicalMachineRelatedData_)(nil),
		(*EntityDTO_StorageControllerRelatedData_)(nil),
	}
	file_CommonDTO_proto_msgTypes[3].OneofWrappers = []any{
		(*CommodityDTO_StorageLatencyData_)(nil),
		(*CommodityDTO_StorageAccessData_)(nil),
		(*CommodityDTO_VstoragePartitionData)(nil),
		(*CommodityDTO_StorageProvisionedData_)(nil),
		(*CommodityDTO_GpuData_)(nil),
		(*CommodityDTO_GpuMemData_)(nil),
		(*CommodityDTO_VmemData)(nil),
		(*CommodityDTO_VcpuData)(nil),
	}
	file_CommonDTO_proto_msgTypes[5].OneofWrappers = []any{
		(*GroupDTO_GroupName)(nil),
		(*GroupDTO_ConstraintInfo_)(nil),
		(*GroupDTO_SettingPolicy_)(nil),
		(*GroupDTO_SelectionSpecList_)(nil),
		(*GroupDTO_MemberList)(nil),
		(*GroupDTO_AddedAndRemovedMembers)(nil),
		(*GroupDTO_SourceGroupId)(nil),
	}
	file_CommonDTO_proto_msgTypes[29].OneofWrappers = []any{
		(*EntityDTO_DiskArrayData_IopsCapacity)(nil),
		(*EntityDTO_DiskArrayData_IopsComputeData)(nil),
	}
	file_CommonDTO_proto_msgTypes[30].OneofWrappers = []any{
		(*EntityDTO_LogicalPoolData_IopsCapacity)(nil),
		(*EntityDTO_LogicalPoolData_IopsComputeData)(nil),
	}
	file_CommonDTO_proto_msgTypes[35].OneofWrappers = []any{
		(*EntityDTO_ServiceData_KubernetesServiceData)(nil),
	}
	file_CommonDTO_proto_msgTypes[40].OneofWrappers = []any{
		(*EntityDTO_RepositoryData_TerraformData_)(nil),
	}
	file_CommonDTO_proto_msgTypes[51].OneofWrappers = []any{
		(*EntityDTO_StorageControllerData_IopsCapacity)(nil),
		(*EntityDTO_StorageControllerData_IopsComputeData)(nil),
	}
	file_CommonDTO_proto_msgTypes[56].OneofWrappers = []any{
		(*EntityDTO_WorkloadControllerData_CronJobData)(nil),
		(*EntityDTO_WorkloadControllerData_CustomControllerData)(nil),
		(*EntityDTO_WorkloadControllerData_DaemonSetData)(nil),
		(*EntityDTO_WorkloadControllerData_DeploymentData)(nil),
		(*EntityDTO_WorkloadControllerData_JobData)(nil),
		(*EntityDTO_WorkloadControllerData_ReplicaSetData)(nil),
		(*EntityDTO_WorkloadControllerData_ReplicationControllerData)(nil),
		(*EntityDTO_WorkloadControllerData_StatefulSetData)(nil),
	}
	file_CommonDTO_proto_msgTypes[91].OneofWrappers = []any{
		(*EntityDTO_CloudCommitmentData_ServiceRestricted_)(nil),
		(*EntityDTO_CloudCommitmentData_FamilyRestricted_)(nil),
		(*EntityDTO_CloudCommitmentData_Spend)(nil),
		(*EntityDTO_CloudCommitmentData_NumberCoupons)(nil),
		(*EntityDTO_CloudCommitmentData_NumberOfCoupons)(nil),
		(*EntityDTO_CloudCommitmentData_CommoditiesBought)(nil),
	}
	file_CommonDTO_proto_msgTypes[97].OneofWrappers = []any{
		(*EntityDTO_RepositoryData_TerraformData_StateFileLocation_S3Config_)(nil),
	}
	file_CommonDTO_proto_msgTypes[104].OneofWrappers = []any{
		(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_SharedReservedInstanceScope_)(nil),
		(*EntityDTO_ReservedInstanceData_ReservedInstanceAppliedScope_MultipleAccountsReservedInstanceScope_)(nil),
	}
	file_CommonDTO_proto_msgTypes[114].OneofWrappers = []any{
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_GlobalScope_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_FamilyScope_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_TierSpecificScope_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_ComputeTierInfo_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseServerTierInfo_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope_DatabaseTierInfo_)(nil),
	}
	file_CommonDTO_proto_msgTypes[115].OneofWrappers = []any{
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_GroupScope_)(nil),
		(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_AppliedScope_EntityScope_)(nil),
	}
	file_CommonDTO_proto_msgTypes[146].OneofWrappers = []any{
		(*GroupDTO_Setting_NumericSettingValueType_)(nil),
		(*GroupDTO_Setting_StringSettingValueType_)(nil),
		(*GroupDTO_Setting_BooleanSettingValueType_)(nil),
		(*GroupDTO_Setting_IntegerSettingValueType_)(nil),
	}
	file_CommonDTO_proto_msgTypes[147].OneofWrappers = []any{
		(*GroupDTO_SelectionSpec_PropertyValueDouble)(nil),
		(*GroupDTO_SelectionSpec_PropertyValueString)(nil),
		(*GroupDTO_SelectionSpec_PropertyValueStringList)(nil),
		(*GroupDTO_SelectionSpec_PropertyValueDoubleList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_CommonDTO_proto_rawDesc), len(file_CommonDTO_proto_rawDesc)),
			NumEnums:      61,
			NumMessages:   156,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CommonDTO_proto_goTypes,
		DependencyIndexes: file_CommonDTO_proto_depIdxs,
		EnumInfos:         file_CommonDTO_proto_enumTypes,
		MessageInfos:      file_CommonDTO_proto_msgTypes,
	}.Build()
	File_CommonDTO_proto = out.File
	file_CommonDTO_proto_goTypes = nil
	file_CommonDTO_proto_depIdxs = nil
}
