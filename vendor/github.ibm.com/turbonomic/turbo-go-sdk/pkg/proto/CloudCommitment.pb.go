// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: CloudCommitment.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit int32

const (
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_NFU   CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit = 1
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_RATIO CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit = 2
)

// Enum value maps for CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit.
var (
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit_name = map[int32]string{
		1: "NFU",
		2: "RATIO",
	}
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit_value = map[string]int32{
		"NFU":   1,
		"RATIO": 2,
	}
)

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) Enum() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit {
	p := new(CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit)
	*p = x
	return p
}

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_CloudCommitment_proto_enumTypes[0].Descriptor()
}

func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) Type() protoreflect.EnumType {
	return &file_CloudCommitment_proto_enumTypes[0]
}

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit(num)
	return nil
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit.Descriptor instead.
func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit) EnumDescriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 1, 0, 0}
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit int32

const (
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_HOUR CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit = 1
	// These multi-dimensional units are particularly useful for GCP VMs,
	// and may also be applied to Azure vCore DBs.
	// It's left up to the platform to convert these values as needed.
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_CORE_HOUR     CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit = 2
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_KIBIBYTE_HOUR CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit = 3
)

// Enum value maps for CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit.
var (
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit_name = map[int32]string{
		1: "HOUR",
		2: "CORE_HOUR",
		3: "KIBIBYTE_HOUR",
	}
	CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit_value = map[string]int32{
		"HOUR":          1,
		"CORE_HOUR":     2,
		"KIBIBYTE_HOUR": 3,
	}
)

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) Enum() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit {
	p := new(CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit)
	*p = x
	return p
}

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_CloudCommitment_proto_enumTypes[1].Descriptor()
}

func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) Type() protoreflect.EnumType {
	return &file_CloudCommitment_proto_enumTypes[1]
}

func (x CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit(num)
	return nil
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit.Descriptor instead.
func (CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit) EnumDescriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 1, 1, 0}
}

// Represents cloud commitment mapping data discovered by probes for billing families
type CloudCommitmentData struct {
	state                         protoimpl.MessageState                              `protogen:"open.v1"`
	BillingIdentifier             *string                                             `protobuf:"bytes,1,opt,name=billing_identifier,json=billingIdentifier" json:"billing_identifier,omitempty"`
	CloudCommitmentMappingBuckets []*CloudCommitmentData_CloudCommitmentMappingBucket `protobuf:"bytes,2,rep,name=cloud_commitment_mapping_buckets,json=cloudCommitmentMappingBuckets" json:"cloud_commitment_mapping_buckets,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *CloudCommitmentData) Reset() {
	*x = CloudCommitmentData{}
	mi := &file_CloudCommitment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData) ProtoMessage() {}

func (x *CloudCommitmentData) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0}
}

func (x *CloudCommitmentData) GetBillingIdentifier() string {
	if x != nil && x.BillingIdentifier != nil {
		return *x.BillingIdentifier
	}
	return ""
}

func (x *CloudCommitmentData) GetCloudCommitmentMappingBuckets() []*CloudCommitmentData_CloudCommitmentMappingBucket {
	if x != nil {
		return x.CloudCommitmentMappingBuckets
	}
	return nil
}

// Similar to PriceTable but instead lists the commitment rates, for example AWS Compute or EC2
// instances saving plan rates.
type CommitmentRates struct {
	state                protoimpl.MessageState                  `protogen:"open.v1"`
	RateIdentifier       []*PricingIdentifier                    `protobuf:"bytes,1,rep,name=rate_identifier,json=rateIdentifier" json:"rate_identifier,omitempty"`
	CommitmentRateBySpec []*CommitmentRates_CommitmentRateBySpec `protobuf:"bytes,2,rep,name=commitment_rate_by_spec,json=commitmentRateBySpec" json:"commitment_rate_by_spec,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CommitmentRates) Reset() {
	*x = CommitmentRates{}
	mi := &file_CloudCommitment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitmentRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentRates) ProtoMessage() {}

func (x *CommitmentRates) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentRates.ProtoReflect.Descriptor instead.
func (*CommitmentRates) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{1}
}

func (x *CommitmentRates) GetRateIdentifier() []*PricingIdentifier {
	if x != nil {
		return x.RateIdentifier
	}
	return nil
}

func (x *CommitmentRates) GetCommitmentRateBySpec() []*CommitmentRates_CommitmentRateBySpec {
	if x != nil {
		return x.CommitmentRateBySpec
	}
	return nil
}

type CommitmentRateRegionEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cloud Region for which those rates are relevant.
	RelatedRegion *string `protobuf:"bytes,1,opt,name=related_region,json=relatedRegion" json:"related_region,omitempty"`
	// The rates by cloud tiers in this region
	CloudTierRates map[string]*CloudTierRates `protobuf:"bytes,2,rep,name=cloud_tier_rates,json=cloudTierRates" json:"cloud_tier_rates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommitmentRateRegionEntry) Reset() {
	*x = CommitmentRateRegionEntry{}
	mi := &file_CloudCommitment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitmentRateRegionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentRateRegionEntry) ProtoMessage() {}

func (x *CommitmentRateRegionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentRateRegionEntry.ProtoReflect.Descriptor instead.
func (*CommitmentRateRegionEntry) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{2}
}

func (x *CommitmentRateRegionEntry) GetRelatedRegion() string {
	if x != nil && x.RelatedRegion != nil {
		return *x.RelatedRegion
	}
	return ""
}

func (x *CommitmentRateRegionEntry) GetCloudTierRates() map[string]*CloudTierRates {
	if x != nil {
		return x.CloudTierRates
	}
	return nil
}

type CloudTierRates struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	CloudTierRate []*CloudTierRates_CloudTierRate `protobuf:"bytes,1,rep,name=cloud_tier_rate,json=cloudTierRate" json:"cloud_tier_rate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudTierRates) Reset() {
	*x = CloudTierRates{}
	mi := &file_CloudCommitment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudTierRates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTierRates) ProtoMessage() {}

func (x *CloudTierRates) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTierRates.ProtoReflect.Descriptor instead.
func (*CloudTierRates) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{3}
}

func (x *CloudTierRates) GetCloudTierRate() []*CloudTierRates_CloudTierRate {
	if x != nil {
		return x.CloudTierRate
	}
	return nil
}

type CommitmentSpec struct {
	state                protoimpl.MessageState                                           `protogen:"open.v1"`
	ProviderSpecificType *EntityDTO_CloudCommitmentData_ProviderType                      `protobuf:"varint,1,opt,name=provider_specific_type,json=providerSpecificType,enum=common_dto.EntityDTO_CloudCommitmentData_ProviderType" json:"provider_specific_type,omitempty"`
	TopologyScope        *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope `protobuf:"bytes,2,opt,name=topology_scope,json=topologyScope" json:"topology_scope,omitempty"`
	TermMilliseconds     *int64                                                           `protobuf:"varint,3,opt,name=term_milliseconds,json=termMilliseconds" json:"term_milliseconds,omitempty"`
	PaymentOption        *PaymentOption                                                   `protobuf:"varint,4,opt,name=payment_option,json=paymentOption,enum=common_dto.PaymentOption" json:"payment_option,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CommitmentSpec) Reset() {
	*x = CommitmentSpec{}
	mi := &file_CloudCommitment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentSpec) ProtoMessage() {}

func (x *CommitmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentSpec.ProtoReflect.Descriptor instead.
func (*CommitmentSpec) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{4}
}

func (x *CommitmentSpec) GetProviderSpecificType() EntityDTO_CloudCommitmentData_ProviderType {
	if x != nil && x.ProviderSpecificType != nil {
		return *x.ProviderSpecificType
	}
	return EntityDTO_CloudCommitmentData_SAVINGS_PLAN
}

func (x *CommitmentSpec) GetTopologyScope() *EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope {
	if x != nil {
		return x.TopologyScope
	}
	return nil
}

func (x *CommitmentSpec) GetTermMilliseconds() int64 {
	if x != nil && x.TermMilliseconds != nil {
		return *x.TermMilliseconds
	}
	return 0
}

func (x *CommitmentSpec) GetPaymentOption() PaymentOption {
	if x != nil && x.PaymentOption != nil {
		return *x.PaymentOption
	}
	return PaymentOption_ALL_UPFRONT
}

// Bucket containing commitment data for a subset of a billing family as determined by the bucket key for a
// time period represented by the timestamp and granularity
type CloudCommitmentData_CloudCommitmentMappingBucket struct {
	state          protoimpl.MessageState                             `protogen:"open.v1"`
	TimestampMsUtc *int64                                             `protobuf:"varint,1,opt,name=timestamp_ms_utc,json=timestampMsUtc" json:"timestamp_ms_utc,omitempty"`
	Samples        []*CloudCommitmentData_EntityCommitmentMapping     `protobuf:"bytes,2,rep,name=samples" json:"samples,omitempty"`
	Granularity    *CloudBillingData_CloudBillingBucket_Granularity   `protobuf:"varint,3,opt,name=granularity,enum=common_dto.CloudBillingData_CloudBillingBucket_Granularity,def=0" json:"granularity,omitempty"`
	BucketKey      *CloudBillingData_CloudBillingBucket_BucketKey     `protobuf:"bytes,4,opt,name=bucket_key,json=bucketKey" json:"bucket_key,omitempty"`
	DiscoveryType  *CloudBillingData_CloudBillingBucket_DiscoveryType `protobuf:"varint,5,opt,name=discoveryType,enum=common_dto.CloudBillingData_CloudBillingBucket_DiscoveryType,def=1" json:"discoveryType,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CloudCommitmentData_CloudCommitmentMappingBucket fields.
const (
	Default_CloudCommitmentData_CloudCommitmentMappingBucket_Granularity   = CloudBillingData_CloudBillingBucket_HOURLY
	Default_CloudCommitmentData_CloudCommitmentMappingBucket_DiscoveryType = CloudBillingData_CloudBillingBucket_INCREMENTAL
)

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) Reset() {
	*x = CloudCommitmentData_CloudCommitmentMappingBucket{}
	mi := &file_CloudCommitment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_CloudCommitmentMappingBucket) ProtoMessage() {}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_CloudCommitmentMappingBucket.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_CloudCommitmentMappingBucket) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) GetTimestampMsUtc() int64 {
	if x != nil && x.TimestampMsUtc != nil {
		return *x.TimestampMsUtc
	}
	return 0
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) GetSamples() []*CloudCommitmentData_EntityCommitmentMapping {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) GetGranularity() CloudBillingData_CloudBillingBucket_Granularity {
	if x != nil && x.Granularity != nil {
		return *x.Granularity
	}
	return Default_CloudCommitmentData_CloudCommitmentMappingBucket_Granularity
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) GetBucketKey() *CloudBillingData_CloudBillingBucket_BucketKey {
	if x != nil {
		return x.BucketKey
	}
	return nil
}

func (x *CloudCommitmentData_CloudCommitmentMappingBucket) GetDiscoveryType() CloudBillingData_CloudBillingBucket_DiscoveryType {
	if x != nil && x.DiscoveryType != nil {
		return *x.DiscoveryType
	}
	return Default_CloudCommitmentData_CloudCommitmentMappingBucket_DiscoveryType
}

// Represents a mapping between a commitment and an entity or a cloud service
type CloudCommitmentData_EntityCommitmentMapping struct {
	state              protoimpl.MessageState                                            `protogen:"open.v1"`
	EntityId           *string                                                           `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	EntityType         *EntityDTO_EntityType                                             `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	AccountId          *string                                                           `protobuf:"bytes,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	RegionId           *string                                                           `protobuf:"bytes,4,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	CloudServiceId     *string                                                           `protobuf:"bytes,5,opt,name=cloud_service_id,json=cloudServiceId" json:"cloud_service_id,omitempty"`
	CloudTierId        *string                                                           `protobuf:"bytes,6,opt,name=cloud_tier_id,json=cloudTierId" json:"cloud_tier_id,omitempty"`
	CommitmentCoverage []*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage `protobuf:"bytes,7,rep,name=commitment_coverage,json=commitmentCoverage" json:"commitment_coverage,omitempty"`
	ServiceProviderId  *string                                                           `protobuf:"bytes,8,opt,name=service_provider_id,json=serviceProviderId" json:"service_provider_id,omitempty"`
	DiscoveryType      *CloudBillingData_CloudBillingBucket_DiscoveryType                `protobuf:"varint,9,opt,name=discoveryType,enum=common_dto.CloudBillingData_CloudBillingBucket_DiscoveryType,def=1" json:"discoveryType,omitempty"`
	// Deprecated - now part of CommitmentCoverage message
	//
	// Deprecated: Marked as deprecated in CloudCommitment.proto.
	CommitmentAmount *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount `protobuf:"bytes,20,opt,name=commitment_amount,json=commitmentAmount" json:"commitment_amount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for CloudCommitmentData_EntityCommitmentMapping fields.
const (
	Default_CloudCommitmentData_EntityCommitmentMapping_DiscoveryType = CloudBillingData_CloudBillingBucket_INCREMENTAL
)

func (x *CloudCommitmentData_EntityCommitmentMapping) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping{}
	mi := &file_CloudCommitment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping) ProtoMessage() {}

func (x *CloudCommitmentData_EntityCommitmentMapping) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetEntityId() string {
	if x != nil && x.EntityId != nil {
		return *x.EntityId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetRegionId() string {
	if x != nil && x.RegionId != nil {
		return *x.RegionId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetCloudServiceId() string {
	if x != nil && x.CloudServiceId != nil {
		return *x.CloudServiceId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetCloudTierId() string {
	if x != nil && x.CloudTierId != nil {
		return *x.CloudTierId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetCommitmentCoverage() []*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage {
	if x != nil {
		return x.CommitmentCoverage
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetServiceProviderId() string {
	if x != nil && x.ServiceProviderId != nil {
		return *x.ServiceProviderId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping) GetDiscoveryType() CloudBillingData_CloudBillingBucket_DiscoveryType {
	if x != nil && x.DiscoveryType != nil {
		return *x.DiscoveryType
	}
	return Default_CloudCommitmentData_EntityCommitmentMapping_DiscoveryType
}

// Deprecated: Marked as deprecated in CloudCommitment.proto.
func (x *CloudCommitmentData_EntityCommitmentMapping) GetCommitmentAmount() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount {
	if x != nil {
		return x.CommitmentAmount
	}
	return nil
}

// The coverage related information for this mapping
type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CoveringCommitment:
	//
	//	*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment_
	//	*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment_
	//	*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CommitmentInfo
	CoveringCommitment isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment `protobuf_oneof:"covering_commitment"`
	CommitmentAmount   *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount                  `protobuf:"bytes,20,opt,name=commitment_amount,json=commitmentAmount" json:"commitment_amount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage{}
	mi := &file_CloudCommitment_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) ProtoMessage() {}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) GetCoveringCommitment() isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment {
	if x != nil {
		return x.CoveringCommitment
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) GetNoCommitment() *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment {
	if x != nil {
		if x, ok := x.CoveringCommitment.(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment_); ok {
			return x.NoCommitment
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) GetUnknownCommitment() *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment {
	if x != nil {
		if x, ok := x.CoveringCommitment.(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment_); ok {
			return x.UnknownCommitment
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) GetCommitmentInfo() *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo {
	if x != nil {
		if x, ok := x.CoveringCommitment.(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CommitmentInfo); ok {
			return x.CommitmentInfo
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage) GetCommitmentAmount() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount {
	if x != nil {
		return x.CommitmentAmount
	}
	return nil
}

type isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment interface {
	isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment()
}

type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment_ struct {
	// Tracks uncovered demand to derive coverage data. Corresponding unused
	// capacity of a commitment to calculate utilization will not be represented
	// in the CloudCommitmentMapping. This is because unused capacity is not
	// represented in the cloud billing data. Instead, capacity used as the
	// denominator for utilization will be extracted from the discovered cloud
	// commitment entity.
	NoCommitment *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment `protobuf:"bytes,1,opt,name=no_commitment,json=noCommitment,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment_ struct {
	// This will be used for GCP, in which the specific CUD is not specified
	// in the BigQuery cost export.
	UnknownCommitment *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment `protobuf:"bytes,2,opt,name=unknown_commitment,json=unknownCommitment,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CommitmentInfo struct {
	CommitmentInfo *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo `protobuf:"bytes,3,opt,name=commitment_info,json=commitmentInfo,oneof"`
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment_) isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment_) isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CommitmentInfo) isCloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CoveringCommitment() {
}

// Amount and type of Commitment coverage involved in this mapping
type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Coupons
	//	*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_OnDemandSpend
	//	*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_DiscountedSpend
	//	*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CommoditiesBought
	//	*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_
	Value         isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount{}
	mi := &file_CloudCommitment_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) ProtoMessage() {}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetValue() isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetCoupons() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount {
	if x != nil {
		if x, ok := x.Value.(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Coupons); ok {
			return x.Coupons
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetOnDemandSpend() *CurrencyAmount {
	if x != nil {
		if x, ok := x.Value.(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_OnDemandSpend); ok {
			return x.OnDemandSpend
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetDiscountedSpend() *CurrencyAmount {
	if x != nil {
		if x, ok := x.Value.(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_DiscountedSpend); ok {
			return x.DiscountedSpend
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetCommoditiesBought() *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought {
	if x != nil {
		if x, ok := x.Value.(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CommoditiesBought); ok {
			return x.CommoditiesBought
		}
	}
	return nil
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount) GetUsageAmount() *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount {
	if x != nil {
		if x, ok := x.Value.(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_); ok {
			return x.UsageAmount
		}
	}
	return nil
}

type isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value interface {
	isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value()
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Coupons struct {
	Coupons *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount `protobuf:"bytes,1,opt,name=coupons,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_OnDemandSpend struct {
	OnDemandSpend *CurrencyAmount `protobuf:"bytes,2,opt,name=on_demand_spend,json=onDemandSpend,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_DiscountedSpend struct {
	DiscountedSpend *CurrencyAmount `protobuf:"bytes,3,opt,name=discounted_spend,json=discountedSpend,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CommoditiesBought struct {
	CommoditiesBought *EntityDTO_CloudCommitmentData_CommittedCommoditiesBought `protobuf:"bytes,4,opt,name=commodities_bought,json=commoditiesBought,oneof"`
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_ struct {
	UsageAmount *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount `protobuf:"bytes,5,opt,name=usage_amount,json=usageAmount,oneof"`
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Coupons) isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_OnDemandSpend) isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_DiscountedSpend) isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CommoditiesBought) isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value() {
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_) isCloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Value() {
}

// Details of the commitment involved in this mapping
type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	CommitmentId *string                `protobuf:"bytes,1,opt,name=commitment_id,json=commitmentId" json:"commitment_id,omitempty"`
	// To distinguish between RIs and commitments
	EntityType    *EntityDTO_EntityType `protobuf:"varint,2,opt,name=entity_type,json=entityType,enum=common_dto.EntityDTO_EntityType" json:"entity_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo{}
	mi := &file_CloudCommitment_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) ProtoMessage() {
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) GetCommitmentId() string {
	if x != nil && x.CommitmentId != nil {
		return *x.CommitmentId
	}
	return ""
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo) GetEntityType() EntityDTO_EntityType {
	if x != nil && x.EntityType != nil {
		return *x.EntityType
	}
	return EntityDTO_SWITCH
}

// Commitment not known
type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnusedField   *bool                  `protobuf:"varint,1,opt,name=unused_field,json=unusedField" json:"unused_field,omitempty"` // required for parquet support
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment{}
	mi := &file_CloudCommitment_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) ProtoMessage() {
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment) GetUnusedField() bool {
	if x != nil && x.UnusedField != nil {
		return *x.UnusedField
	}
	return false
}

// Represents on-demand usage
type CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnusedField   *bool                  `protobuf:"varint,1,opt,name=unused_field,json=unusedField" json:"unused_field,omitempty"` // required for parquet support
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment{}
	mi := &file_CloudCommitment_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) ProtoMessage() {}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 0, 2}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment) GetUnusedField() bool {
	if x != nil && x.UnusedField != nil {
		return *x.UnusedField
	}
	return false
}

// Amount for coupon based Commitment coverage
type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount struct {
	state         protoimpl.MessageState                                                                                       `protogen:"open.v1"`
	Coupons       *float64                                                                                                     `protobuf:"fixed64,1,opt,name=coupons" json:"coupons,omitempty"`
	ProviderUnit  *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit `protobuf:"varint,2,opt,name=provider_unit,json=providerUnit,enum=common_dto.CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit" json:"provider_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount{}
	mi := &file_CloudCommitment_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) ProtoMessage() {
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) GetCoupons() float64 {
	if x != nil && x.Coupons != nil {
		return *x.Coupons
	}
	return 0
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount) GetProviderUnit() CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit {
	if x != nil && x.ProviderUnit != nil {
		return *x.ProviderUnit
	}
	return CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_NFU
}

type CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount struct {
	state         protoimpl.MessageState                                                              `protogen:"open.v1"`
	Amount        *float64                                                                            `protobuf:"fixed64,1,req,name=amount" json:"amount,omitempty"`
	Unit          *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit `protobuf:"varint,2,req,name=unit,enum=common_dto.CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit,def=1" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount fields.
const (
	Default_CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_HOUR
)

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) Reset() {
	*x = CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount{}
	mi := &file_CloudCommitment_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) ProtoMessage() {
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount.ProtoReflect.Descriptor instead.
func (*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{0, 1, 1, 1}
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount) GetUnit() CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return Default_CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit
}

type CommitmentRates_CommitmentRateBySpec struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	CommitmentSpec         *CommitmentSpec              `protobuf:"bytes,1,opt,name=commitment_spec,json=commitmentSpec" json:"commitment_spec,omitempty"`
	CommitmentRateByRegion []*CommitmentRateRegionEntry `protobuf:"bytes,2,rep,name=commitment_rate_by_region,json=commitmentRateByRegion" json:"commitment_rate_by_region,omitempty"`
	LocationId             *EntityDTO                   `protobuf:"bytes,3,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CommitmentRates_CommitmentRateBySpec) Reset() {
	*x = CommitmentRates_CommitmentRateBySpec{}
	mi := &file_CloudCommitment_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitmentRates_CommitmentRateBySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitmentRates_CommitmentRateBySpec) ProtoMessage() {}

func (x *CommitmentRates_CommitmentRateBySpec) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitmentRates_CommitmentRateBySpec.ProtoReflect.Descriptor instead.
func (*CommitmentRates_CommitmentRateBySpec) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CommitmentRates_CommitmentRateBySpec) GetCommitmentSpec() *CommitmentSpec {
	if x != nil {
		return x.CommitmentSpec
	}
	return nil
}

func (x *CommitmentRates_CommitmentRateBySpec) GetCommitmentRateByRegion() []*CommitmentRateRegionEntry {
	if x != nil {
		return x.CommitmentRateByRegion
	}
	return nil
}

func (x *CommitmentRates_CommitmentRateBySpec) GetLocationId() *EntityDTO {
	if x != nil {
		return x.LocationId
	}
	return nil
}

type CloudTierRates_CloudTierRate struct {
	state            protoimpl.MessageState                           `protogen:"open.v1"`
	CommodityTypeKey []*CloudTierRates_CloudTierRate_CommodityTypeKey `protobuf:"bytes,1,rep,name=commodity_type_key,json=commodityTypeKey" json:"commodity_type_key,omitempty"`
	Rate             []*Price                                         `protobuf:"bytes,2,rep,name=rate" json:"rate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CloudTierRates_CloudTierRate) Reset() {
	*x = CloudTierRates_CloudTierRate{}
	mi := &file_CloudCommitment_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudTierRates_CloudTierRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTierRates_CloudTierRate) ProtoMessage() {}

func (x *CloudTierRates_CloudTierRate) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTierRates_CloudTierRate.ProtoReflect.Descriptor instead.
func (*CloudTierRates_CloudTierRate) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CloudTierRates_CloudTierRate) GetCommodityTypeKey() []*CloudTierRates_CloudTierRate_CommodityTypeKey {
	if x != nil {
		return x.CommodityTypeKey
	}
	return nil
}

func (x *CloudTierRates_CloudTierRate) GetRate() []*Price {
	if x != nil {
		return x.Rate
	}
	return nil
}

type CloudTierRates_CloudTierRate_CommodityTypeKey struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	CommodityType *CommodityDTO_CommodityType `protobuf:"varint,1,opt,name=commodity_type,json=commodityType,enum=common_dto.CommodityDTO_CommodityType" json:"commodity_type,omitempty"`
	Key           *string                     `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudTierRates_CloudTierRate_CommodityTypeKey) Reset() {
	*x = CloudTierRates_CloudTierRate_CommodityTypeKey{}
	mi := &file_CloudCommitment_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudTierRates_CloudTierRate_CommodityTypeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudTierRates_CloudTierRate_CommodityTypeKey) ProtoMessage() {}

func (x *CloudTierRates_CloudTierRate_CommodityTypeKey) ProtoReflect() protoreflect.Message {
	mi := &file_CloudCommitment_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudTierRates_CloudTierRate_CommodityTypeKey.ProtoReflect.Descriptor instead.
func (*CloudTierRates_CloudTierRate_CommodityTypeKey) Descriptor() ([]byte, []int) {
	return file_CloudCommitment_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *CloudTierRates_CloudTierRate_CommodityTypeKey) GetCommodityType() CommodityDTO_CommodityType {
	if x != nil && x.CommodityType != nil {
		return *x.CommodityType
	}
	return CommodityDTO_CLUSTER
}

func (x *CloudTierRates_CloudTierRate_CommodityTypeKey) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

var File_CloudCommitment_proto protoreflect.FileDescriptor

var file_CloudCommitment_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x1a, 0x11, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x54,
	0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43,
	0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x44, 0x54, 0x4f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x18, 0x0a, 0x13,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x1d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xce, 0x03, 0x0a, 0x1c, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x5f, 0x75, 0x74, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x55, 0x74, 0x63, 0x12, 0x51, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x65, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x6e,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x47,
	0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x06, 0x48, 0x4f, 0x55, 0x52,
	0x4c, 0x59, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x58, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x09,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x70, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xd2, 0x13, 0x0a, 0x17,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x7b, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x70,
	0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x3a, 0x0b, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41,
	0x4c, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x7e, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0xad, 0x06, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x5e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x7d, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x36,
	0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x75, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x31, 0x0a, 0x0c, 0x4e, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0xfd, 0x07, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x0f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x75, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x6f, 0x75,
	0x67, 0x68, 0x74, 0x12, 0x7e, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xfb, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x77, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x46, 0x55, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10,
	0x02, 0x1a, 0xd3, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x78, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x3a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x32, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x48, 0x4f,
	0x55, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x42, 0x49, 0x42, 0x59, 0x54, 0x45,
	0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xba, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x72, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xf5, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x60, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54,
	0x4f, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x86, 0x02,
	0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69,
	0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x94, 0x02, 0x0a, 0x0d,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x69, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x1a, 0x73, 0x0a,
	0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79,
	0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xe1, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x6c, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x72, 0x0a, 0x0e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x54, 0x4f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x53, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6d,
	0x74, 0x75, 0x72, 0x62, 0x6f, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x69, 0x62, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x2f, 0x74, 0x75, 0x72, 0x62, 0x6f, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
})

var (
	file_CloudCommitment_proto_rawDescOnce sync.Once
	file_CloudCommitment_proto_rawDescData []byte
)

func file_CloudCommitment_proto_rawDescGZIP() []byte {
	file_CloudCommitment_proto_rawDescOnce.Do(func() {
		file_CloudCommitment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_CloudCommitment_proto_rawDesc), len(file_CloudCommitment_proto_rawDesc)))
	})
	return file_CloudCommitment_proto_rawDescData
}

var file_CloudCommitment_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_CloudCommitment_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_CloudCommitment_proto_goTypes = []any{
	(CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount_CouponProviderUnit)(0), // 0: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.CouponCommitmentAmount.CouponProviderUnit
	(CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_Unit)(0),                          // 1: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.UsageAmount.Unit
	(*CloudCommitmentData)(nil),                                                                      // 2: common_dto.CloudCommitmentData
	(*CommitmentRates)(nil),                                                                          // 3: common_dto.CommitmentRates
	(*CommitmentRateRegionEntry)(nil),                                                                // 4: common_dto.CommitmentRateRegionEntry
	(*CloudTierRates)(nil),                                                                           // 5: common_dto.CloudTierRates
	(*CommitmentSpec)(nil),                                                                           // 6: common_dto.CommitmentSpec
	(*CloudCommitmentData_CloudCommitmentMappingBucket)(nil),                                         // 7: common_dto.CloudCommitmentData.CloudCommitmentMappingBucket
	(*CloudCommitmentData_EntityCommitmentMapping)(nil),                                              // 8: common_dto.CloudCommitmentData.EntityCommitmentMapping
	(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage)(nil),                           // 9: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage
	(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount)(nil),                        // 10: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount
	(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CloudCommitmentInfo)(nil),       // 11: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.CloudCommitmentInfo
	(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment)(nil),         // 12: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.UnknownCommitment
	(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment)(nil),              // 13: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.NoCommitment
	(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CouponCommitmentAmount)(nil), // 14: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.CouponCommitmentAmount
	(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount)(nil),            // 15: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.UsageAmount
	(*CommitmentRates_CommitmentRateBySpec)(nil),                                                     // 16: common_dto.CommitmentRates.CommitmentRateBySpec
	nil,                                  // 17: common_dto.CommitmentRateRegionEntry.CloudTierRatesEntry
	(*CloudTierRates_CloudTierRate)(nil), // 18: common_dto.CloudTierRates.CloudTierRate
	(*CloudTierRates_CloudTierRate_CommodityTypeKey)(nil),                   // 19: common_dto.CloudTierRates.CloudTierRate.CommodityTypeKey
	(*PricingIdentifier)(nil),                                               // 20: common_dto.PricingIdentifier
	(EntityDTO_CloudCommitmentData_ProviderType)(0),                         // 21: common_dto.EntityDTO.CloudCommitmentData.ProviderType
	(*EntityDTO_CloudCommitmentData_CommitmentScopeInfo_TopologyScope)(nil), // 22: common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope
	(PaymentOption)(0), // 23: common_dto.PaymentOption
	(CloudBillingData_CloudBillingBucket_Granularity)(0),             // 24: common_dto.CloudBillingData.CloudBillingBucket.Granularity
	(*CloudBillingData_CloudBillingBucket_BucketKey)(nil),            // 25: common_dto.CloudBillingData.CloudBillingBucket.BucketKey
	(CloudBillingData_CloudBillingBucket_DiscoveryType)(0),           // 26: common_dto.CloudBillingData.CloudBillingBucket.DiscoveryType
	(EntityDTO_EntityType)(0),                                        // 27: common_dto.EntityDTO.EntityType
	(*CurrencyAmount)(nil),                                           // 28: common_dto.CurrencyAmount
	(*EntityDTO_CloudCommitmentData_CommittedCommoditiesBought)(nil), // 29: common_dto.EntityDTO.CloudCommitmentData.CommittedCommoditiesBought
	(*EntityDTO)(nil),                                                // 30: common_dto.EntityDTO
	(*Price)(nil),                                                    // 31: common_dto.Price
	(CommodityDTO_CommodityType)(0),                                  // 32: common_dto.CommodityDTO.CommodityType
}
var file_CloudCommitment_proto_depIdxs = []int32{
	7,  // 0: common_dto.CloudCommitmentData.cloud_commitment_mapping_buckets:type_name -> common_dto.CloudCommitmentData.CloudCommitmentMappingBucket
	20, // 1: common_dto.CommitmentRates.rate_identifier:type_name -> common_dto.PricingIdentifier
	16, // 2: common_dto.CommitmentRates.commitment_rate_by_spec:type_name -> common_dto.CommitmentRates.CommitmentRateBySpec
	17, // 3: common_dto.CommitmentRateRegionEntry.cloud_tier_rates:type_name -> common_dto.CommitmentRateRegionEntry.CloudTierRatesEntry
	18, // 4: common_dto.CloudTierRates.cloud_tier_rate:type_name -> common_dto.CloudTierRates.CloudTierRate
	21, // 5: common_dto.CommitmentSpec.provider_specific_type:type_name -> common_dto.EntityDTO.CloudCommitmentData.ProviderType
	22, // 6: common_dto.CommitmentSpec.topology_scope:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommitmentScopeInfo.TopologyScope
	23, // 7: common_dto.CommitmentSpec.payment_option:type_name -> common_dto.PaymentOption
	8,  // 8: common_dto.CloudCommitmentData.CloudCommitmentMappingBucket.samples:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping
	24, // 9: common_dto.CloudCommitmentData.CloudCommitmentMappingBucket.granularity:type_name -> common_dto.CloudBillingData.CloudBillingBucket.Granularity
	25, // 10: common_dto.CloudCommitmentData.CloudCommitmentMappingBucket.bucket_key:type_name -> common_dto.CloudBillingData.CloudBillingBucket.BucketKey
	26, // 11: common_dto.CloudCommitmentData.CloudCommitmentMappingBucket.discoveryType:type_name -> common_dto.CloudBillingData.CloudBillingBucket.DiscoveryType
	27, // 12: common_dto.CloudCommitmentData.EntityCommitmentMapping.entity_type:type_name -> common_dto.EntityDTO.EntityType
	9,  // 13: common_dto.CloudCommitmentData.EntityCommitmentMapping.commitment_coverage:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage
	26, // 14: common_dto.CloudCommitmentData.EntityCommitmentMapping.discoveryType:type_name -> common_dto.CloudBillingData.CloudBillingBucket.DiscoveryType
	10, // 15: common_dto.CloudCommitmentData.EntityCommitmentMapping.commitment_amount:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount
	13, // 16: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.no_commitment:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.NoCommitment
	12, // 17: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.unknown_commitment:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.UnknownCommitment
	11, // 18: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.commitment_info:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.CloudCommitmentInfo
	10, // 19: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.commitment_amount:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount
	14, // 20: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.coupons:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.CouponCommitmentAmount
	28, // 21: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.on_demand_spend:type_name -> common_dto.CurrencyAmount
	28, // 22: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.discounted_spend:type_name -> common_dto.CurrencyAmount
	29, // 23: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.commodities_bought:type_name -> common_dto.EntityDTO.CloudCommitmentData.CommittedCommoditiesBought
	15, // 24: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.usage_amount:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.UsageAmount
	27, // 25: common_dto.CloudCommitmentData.EntityCommitmentMapping.CommitmentCoverage.CloudCommitmentInfo.entity_type:type_name -> common_dto.EntityDTO.EntityType
	0,  // 26: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.CouponCommitmentAmount.provider_unit:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.CouponCommitmentAmount.CouponProviderUnit
	1,  // 27: common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.UsageAmount.unit:type_name -> common_dto.CloudCommitmentData.EntityCommitmentMapping.CloudCommitmentAmount.UsageAmount.Unit
	6,  // 28: common_dto.CommitmentRates.CommitmentRateBySpec.commitment_spec:type_name -> common_dto.CommitmentSpec
	4,  // 29: common_dto.CommitmentRates.CommitmentRateBySpec.commitment_rate_by_region:type_name -> common_dto.CommitmentRateRegionEntry
	30, // 30: common_dto.CommitmentRates.CommitmentRateBySpec.location_id:type_name -> common_dto.EntityDTO
	5,  // 31: common_dto.CommitmentRateRegionEntry.CloudTierRatesEntry.value:type_name -> common_dto.CloudTierRates
	19, // 32: common_dto.CloudTierRates.CloudTierRate.commodity_type_key:type_name -> common_dto.CloudTierRates.CloudTierRate.CommodityTypeKey
	31, // 33: common_dto.CloudTierRates.CloudTierRate.rate:type_name -> common_dto.Price
	32, // 34: common_dto.CloudTierRates.CloudTierRate.CommodityTypeKey.commodity_type:type_name -> common_dto.CommodityDTO.CommodityType
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_CloudCommitment_proto_init() }
func file_CloudCommitment_proto_init() {
	if File_CloudCommitment_proto != nil {
		return
	}
	file_CostBilling_proto_init()
	file_CommonDTO_proto_init()
	file_CommonCost_proto_init()
	file_PricingDTO_proto_init()
	file_CloudCommitment_proto_msgTypes[7].OneofWrappers = []any{
		(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_NoCommitment_)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_UnknownCommitment_)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CommitmentCoverage_CommitmentInfo)(nil),
	}
	file_CloudCommitment_proto_msgTypes[8].OneofWrappers = []any{
		(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_Coupons)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_OnDemandSpend)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_DiscountedSpend)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_CommoditiesBought)(nil),
		(*CloudCommitmentData_EntityCommitmentMapping_CloudCommitmentAmount_UsageAmount_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_CloudCommitment_proto_rawDesc), len(file_CloudCommitment_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CloudCommitment_proto_goTypes,
		DependencyIndexes: file_CloudCommitment_proto_depIdxs,
		EnumInfos:         file_CloudCommitment_proto_enumTypes,
		MessageInfos:      file_CloudCommitment_proto_msgTypes,
	}.Build()
	File_CloudCommitment_proto = out.File
	file_CloudCommitment_proto_goTypes = nil
	file_CloudCommitment_proto_depIdxs = nil
}
